// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package cilium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostManagementCiliumIoV2CiliumNodesHandlerFunc turns a function with the right signature into a post management cilium io v2 cilium nodes handler
type PostManagementCiliumIoV2CiliumNodesHandlerFunc func(PostManagementCiliumIoV2CiliumNodesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostManagementCiliumIoV2CiliumNodesHandlerFunc) Handle(params PostManagementCiliumIoV2CiliumNodesParams) middleware.Responder {
	return fn(params)
}

// PostManagementCiliumIoV2CiliumNodesHandler interface for that can handle valid post management cilium io v2 cilium nodes params
type PostManagementCiliumIoV2CiliumNodesHandler interface {
	Handle(PostManagementCiliumIoV2CiliumNodesParams) middleware.Responder
}

// NewPostManagementCiliumIoV2CiliumNodes creates a new http.Handler for the post management cilium io v2 cilium nodes operation
func NewPostManagementCiliumIoV2CiliumNodes(ctx *middleware.Context, handler PostManagementCiliumIoV2CiliumNodesHandler) *PostManagementCiliumIoV2CiliumNodes {
	return &PostManagementCiliumIoV2CiliumNodes{Context: ctx, Handler: handler}
}

/*PostManagementCiliumIoV2CiliumNodes swagger:route POST /management/cilium.io/v2/ciliumnodes cilium postManagementCiliumIoV2CiliumNodes

PostManagementCiliumIoV2CiliumNodes post management cilium io v2 cilium nodes API

*/
type PostManagementCiliumIoV2CiliumNodes struct {
	Context *middleware.Context
	Handler PostManagementCiliumIoV2CiliumNodesHandler
}

func (o *PostManagementCiliumIoV2CiliumNodes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostManagementCiliumIoV2CiliumNodesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
