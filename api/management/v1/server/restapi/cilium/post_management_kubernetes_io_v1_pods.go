// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package cilium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostManagementKubernetesIoV1PodsHandlerFunc turns a function with the right signature into a post management kubernetes io v1 pods handler
type PostManagementKubernetesIoV1PodsHandlerFunc func(PostManagementKubernetesIoV1PodsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostManagementKubernetesIoV1PodsHandlerFunc) Handle(params PostManagementKubernetesIoV1PodsParams) middleware.Responder {
	return fn(params)
}

// PostManagementKubernetesIoV1PodsHandler interface for that can handle valid post management kubernetes io v1 pods params
type PostManagementKubernetesIoV1PodsHandler interface {
	Handle(PostManagementKubernetesIoV1PodsParams) middleware.Responder
}

// NewPostManagementKubernetesIoV1Pods creates a new http.Handler for the post management kubernetes io v1 pods operation
func NewPostManagementKubernetesIoV1Pods(ctx *middleware.Context, handler PostManagementKubernetesIoV1PodsHandler) *PostManagementKubernetesIoV1Pods {
	return &PostManagementKubernetesIoV1Pods{Context: ctx, Handler: handler}
}

/*PostManagementKubernetesIoV1Pods swagger:route POST /management/kubernetes.io/v1/pods cilium postManagementKubernetesIoV1Pods

PostManagementKubernetesIoV1Pods post management kubernetes io v1 pods API

*/
type PostManagementKubernetesIoV1Pods struct {
	Context *middleware.Context
	Handler PostManagementKubernetesIoV1PodsHandler
}

func (o *PostManagementKubernetesIoV1Pods) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostManagementKubernetesIoV1PodsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
