// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Options options
//
// swagger:model options
type Options struct {

	// add
	Add Add `json:"add,omitempty"`

	// del
	Del Del `json:"del,omitempty"`

	// with dependents
	WithDependents Dependents `json:"with-dependents,omitempty"`
}

// Validate validates this options
func (m *Options) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWithDependents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Options) validateAdd(formats strfmt.Registry) error {

	if swag.IsZero(m.Add) { // not required
		return nil
	}

	if err := m.Add.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("add")
		}
		return err
	}

	return nil
}

func (m *Options) validateDel(formats strfmt.Registry) error {

	if swag.IsZero(m.Del) { // not required
		return nil
	}

	if err := m.Del.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("del")
		}
		return err
	}

	return nil
}

func (m *Options) validateWithDependents(formats strfmt.Registry) error {

	if swag.IsZero(m.WithDependents) { // not required
		return nil
	}

	if err := m.WithDependents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("with-dependents")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Options) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Options) UnmarshalBinary(b []byte) error {
	var res Options
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
