// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rbac authorization v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rbac authorization v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRbacAuthorizationV1ClusterRole(params *CreateRbacAuthorizationV1ClusterRoleParams) (*CreateRbacAuthorizationV1ClusterRoleOK, *CreateRbacAuthorizationV1ClusterRoleCreated, *CreateRbacAuthorizationV1ClusterRoleAccepted, error)

	CreateRbacAuthorizationV1ClusterRoleBinding(params *CreateRbacAuthorizationV1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1ClusterRoleBindingOK, *CreateRbacAuthorizationV1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1ClusterRoleBindingAccepted, error)

	CreateRbacAuthorizationV1NamespacedRole(params *CreateRbacAuthorizationV1NamespacedRoleParams) (*CreateRbacAuthorizationV1NamespacedRoleOK, *CreateRbacAuthorizationV1NamespacedRoleCreated, *CreateRbacAuthorizationV1NamespacedRoleAccepted, error)

	CreateRbacAuthorizationV1NamespacedRoleBinding(params *CreateRbacAuthorizationV1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1NamespacedRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1ClusterRole(params *DeleteRbacAuthorizationV1ClusterRoleParams) (*DeleteRbacAuthorizationV1ClusterRoleOK, *DeleteRbacAuthorizationV1ClusterRoleAccepted, error)

	DeleteRbacAuthorizationV1ClusterRoleBinding(params *DeleteRbacAuthorizationV1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1ClusterRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1CollectionClusterRole(params *DeleteRbacAuthorizationV1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1CollectionClusterRoleOK, error)

	DeleteRbacAuthorizationV1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1CollectionClusterRoleBindingOK, error)

	DeleteRbacAuthorizationV1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1CollectionNamespacedRoleOK, error)

	DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOK, error)

	DeleteRbacAuthorizationV1NamespacedRole(params *DeleteRbacAuthorizationV1NamespacedRoleParams) (*DeleteRbacAuthorizationV1NamespacedRoleOK, *DeleteRbacAuthorizationV1NamespacedRoleAccepted, error)

	DeleteRbacAuthorizationV1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1NamespacedRoleBindingAccepted, error)

	GetRbacAuthorizationV1APIResources(params *GetRbacAuthorizationV1APIResourcesParams) (*GetRbacAuthorizationV1APIResourcesOK, error)

	ListRbacAuthorizationV1ClusterRole(params *ListRbacAuthorizationV1ClusterRoleParams) (*ListRbacAuthorizationV1ClusterRoleOK, error)

	ListRbacAuthorizationV1ClusterRoleBinding(params *ListRbacAuthorizationV1ClusterRoleBindingParams) (*ListRbacAuthorizationV1ClusterRoleBindingOK, error)

	ListRbacAuthorizationV1NamespacedRole(params *ListRbacAuthorizationV1NamespacedRoleParams) (*ListRbacAuthorizationV1NamespacedRoleOK, error)

	ListRbacAuthorizationV1NamespacedRoleBinding(params *ListRbacAuthorizationV1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1NamespacedRoleBindingOK, error)

	ListRbacAuthorizationV1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1RoleBindingForAllNamespacesOK, error)

	ListRbacAuthorizationV1RoleForAllNamespaces(params *ListRbacAuthorizationV1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1RoleForAllNamespacesOK, error)

	PatchRbacAuthorizationV1ClusterRole(params *PatchRbacAuthorizationV1ClusterRoleParams) (*PatchRbacAuthorizationV1ClusterRoleOK, error)

	PatchRbacAuthorizationV1ClusterRoleBinding(params *PatchRbacAuthorizationV1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1ClusterRoleBindingOK, error)

	PatchRbacAuthorizationV1NamespacedRole(params *PatchRbacAuthorizationV1NamespacedRoleParams) (*PatchRbacAuthorizationV1NamespacedRoleOK, error)

	PatchRbacAuthorizationV1NamespacedRoleBinding(params *PatchRbacAuthorizationV1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1NamespacedRoleBindingOK, error)

	ReadRbacAuthorizationV1ClusterRole(params *ReadRbacAuthorizationV1ClusterRoleParams) (*ReadRbacAuthorizationV1ClusterRoleOK, error)

	ReadRbacAuthorizationV1ClusterRoleBinding(params *ReadRbacAuthorizationV1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1ClusterRoleBindingOK, error)

	ReadRbacAuthorizationV1NamespacedRole(params *ReadRbacAuthorizationV1NamespacedRoleParams) (*ReadRbacAuthorizationV1NamespacedRoleOK, error)

	ReadRbacAuthorizationV1NamespacedRoleBinding(params *ReadRbacAuthorizationV1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1NamespacedRoleBindingOK, error)

	ReplaceRbacAuthorizationV1ClusterRole(params *ReplaceRbacAuthorizationV1ClusterRoleParams) (*ReplaceRbacAuthorizationV1ClusterRoleOK, *ReplaceRbacAuthorizationV1ClusterRoleCreated, error)

	ReplaceRbacAuthorizationV1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1ClusterRoleBindingCreated, error)

	ReplaceRbacAuthorizationV1NamespacedRole(params *ReplaceRbacAuthorizationV1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1NamespacedRoleOK, *ReplaceRbacAuthorizationV1NamespacedRoleCreated, error)

	ReplaceRbacAuthorizationV1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1NamespacedRoleBindingCreated, error)

	WatchRbacAuthorizationV1ClusterRole(params *WatchRbacAuthorizationV1ClusterRoleParams) (*WatchRbacAuthorizationV1ClusterRoleOK, error)

	WatchRbacAuthorizationV1ClusterRoleBinding(params *WatchRbacAuthorizationV1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1ClusterRoleBindingOK, error)

	WatchRbacAuthorizationV1ClusterRoleBindingList(params *WatchRbacAuthorizationV1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1ClusterRoleBindingListOK, error)

	WatchRbacAuthorizationV1ClusterRoleList(params *WatchRbacAuthorizationV1ClusterRoleListParams) (*WatchRbacAuthorizationV1ClusterRoleListOK, error)

	WatchRbacAuthorizationV1NamespacedRole(params *WatchRbacAuthorizationV1NamespacedRoleParams) (*WatchRbacAuthorizationV1NamespacedRoleOK, error)

	WatchRbacAuthorizationV1NamespacedRoleBinding(params *WatchRbacAuthorizationV1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1NamespacedRoleBindingOK, error)

	WatchRbacAuthorizationV1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1NamespacedRoleBindingListOK, error)

	WatchRbacAuthorizationV1NamespacedRoleList(params *WatchRbacAuthorizationV1NamespacedRoleListParams) (*WatchRbacAuthorizationV1NamespacedRoleListOK, error)

	WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1RoleBindingListForAllNamespacesOK, error)

	WatchRbacAuthorizationV1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1RoleListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRbacAuthorizationV1ClusterRole create a ClusterRole
*/
func (a *Client) CreateRbacAuthorizationV1ClusterRole(params *CreateRbacAuthorizationV1ClusterRoleParams) (*CreateRbacAuthorizationV1ClusterRoleOK, *CreateRbacAuthorizationV1ClusterRoleCreated, *CreateRbacAuthorizationV1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1ClusterRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1ClusterRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1ClusterRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1ClusterRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1ClusterRoleBinding create a ClusterRoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1ClusterRoleBinding(params *CreateRbacAuthorizationV1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1ClusterRoleBindingOK, *CreateRbacAuthorizationV1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1ClusterRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1ClusterRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1ClusterRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1ClusterRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1NamespacedRole create a Role
*/
func (a *Client) CreateRbacAuthorizationV1NamespacedRole(params *CreateRbacAuthorizationV1NamespacedRoleParams) (*CreateRbacAuthorizationV1NamespacedRoleOK, *CreateRbacAuthorizationV1NamespacedRoleCreated, *CreateRbacAuthorizationV1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1NamespacedRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1NamespacedRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1NamespacedRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1NamespacedRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1NamespacedRoleBinding create a RoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1NamespacedRoleBinding(params *CreateRbacAuthorizationV1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1NamespacedRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1NamespacedRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1NamespacedRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1ClusterRole delete a ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1ClusterRole(params *DeleteRbacAuthorizationV1ClusterRoleParams) (*DeleteRbacAuthorizationV1ClusterRoleOK, *DeleteRbacAuthorizationV1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1ClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1ClusterRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1ClusterRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1ClusterRoleBinding delete a ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1ClusterRoleBinding(params *DeleteRbacAuthorizationV1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1ClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1ClusterRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1ClusterRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1CollectionClusterRole delete collection of ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1CollectionClusterRole(params *DeleteRbacAuthorizationV1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1CollectionClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1CollectionClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1CollectionClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1CollectionClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1CollectionClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1CollectionClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1CollectionClusterRoleBinding delete collection of ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1CollectionClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1CollectionClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1CollectionClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1CollectionClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1CollectionClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1CollectionClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1CollectionNamespacedRole delete collection of Role
*/
func (a *Client) DeleteRbacAuthorizationV1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1CollectionNamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1CollectionNamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1CollectionNamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1CollectionNamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1CollectionNamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1CollectionNamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding delete collection of RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1CollectionNamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1CollectionNamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1CollectionNamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1NamespacedRole delete a Role
*/
func (a *Client) DeleteRbacAuthorizationV1NamespacedRole(params *DeleteRbacAuthorizationV1NamespacedRoleParams) (*DeleteRbacAuthorizationV1NamespacedRoleOK, *DeleteRbacAuthorizationV1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1NamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1NamespacedRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1NamespacedRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1NamespacedRoleBinding delete a RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1NamespacedRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRbacAuthorizationV1APIResources get available resources
*/
func (a *Client) GetRbacAuthorizationV1APIResources(params *GetRbacAuthorizationV1APIResourcesParams) (*GetRbacAuthorizationV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRbacAuthorizationV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRbacAuthorizationV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRbacAuthorizationV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRbacAuthorizationV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRbacAuthorizationV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1ClusterRole list or watch objects of kind ClusterRole
*/
func (a *Client) ListRbacAuthorizationV1ClusterRole(params *ListRbacAuthorizationV1ClusterRoleParams) (*ListRbacAuthorizationV1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1ClusterRoleBinding list or watch objects of kind ClusterRoleBinding
*/
func (a *Client) ListRbacAuthorizationV1ClusterRoleBinding(params *ListRbacAuthorizationV1ClusterRoleBindingParams) (*ListRbacAuthorizationV1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1NamespacedRole list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1NamespacedRole(params *ListRbacAuthorizationV1NamespacedRoleParams) (*ListRbacAuthorizationV1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1NamespacedRoleBinding list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1NamespacedRoleBinding(params *ListRbacAuthorizationV1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1RoleBindingForAllNamespaces list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1RoleBindingForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1RoleBindingForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1RoleBindingForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1RoleBindingForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1RoleBindingForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1RoleBindingForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1RoleForAllNamespaces list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1RoleForAllNamespaces(params *ListRbacAuthorizationV1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1RoleForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1RoleForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1RoleForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1RoleForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1RoleForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1RoleForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1ClusterRole partially update the specified ClusterRole
*/
func (a *Client) PatchRbacAuthorizationV1ClusterRole(params *PatchRbacAuthorizationV1ClusterRoleParams) (*PatchRbacAuthorizationV1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1ClusterRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1ClusterRoleBinding partially update the specified ClusterRoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1ClusterRoleBinding(params *PatchRbacAuthorizationV1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1ClusterRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1NamespacedRole partially update the specified Role
*/
func (a *Client) PatchRbacAuthorizationV1NamespacedRole(params *PatchRbacAuthorizationV1NamespacedRoleParams) (*PatchRbacAuthorizationV1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1NamespacedRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1NamespacedRoleBinding partially update the specified RoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1NamespacedRoleBinding(params *PatchRbacAuthorizationV1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1ClusterRole read the specified ClusterRole
*/
func (a *Client) ReadRbacAuthorizationV1ClusterRole(params *ReadRbacAuthorizationV1ClusterRoleParams) (*ReadRbacAuthorizationV1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1ClusterRoleBinding read the specified ClusterRoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1ClusterRoleBinding(params *ReadRbacAuthorizationV1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1NamespacedRole read the specified Role
*/
func (a *Client) ReadRbacAuthorizationV1NamespacedRole(params *ReadRbacAuthorizationV1NamespacedRoleParams) (*ReadRbacAuthorizationV1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1NamespacedRoleBinding read the specified RoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1NamespacedRoleBinding(params *ReadRbacAuthorizationV1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1ClusterRole replace the specified ClusterRole
*/
func (a *Client) ReplaceRbacAuthorizationV1ClusterRole(params *ReplaceRbacAuthorizationV1ClusterRoleParams) (*ReplaceRbacAuthorizationV1ClusterRoleOK, *ReplaceRbacAuthorizationV1ClusterRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1ClusterRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1ClusterRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1ClusterRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1ClusterRoleBinding replace the specified ClusterRoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1ClusterRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1ClusterRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1ClusterRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1NamespacedRole replace the specified Role
*/
func (a *Client) ReplaceRbacAuthorizationV1NamespacedRole(params *ReplaceRbacAuthorizationV1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1NamespacedRoleOK, *ReplaceRbacAuthorizationV1NamespacedRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1NamespacedRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1NamespacedRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1NamespacedRoleBinding replace the specified RoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1NamespacedRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1NamespacedRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1ClusterRole watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1ClusterRole(params *WatchRbacAuthorizationV1ClusterRoleParams) (*WatchRbacAuthorizationV1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1ClusterRoleBinding watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1ClusterRoleBinding(params *WatchRbacAuthorizationV1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1ClusterRoleBindingList watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1ClusterRoleBindingList(params *WatchRbacAuthorizationV1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1ClusterRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1ClusterRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1ClusterRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1ClusterRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1ClusterRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1ClusterRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1ClusterRoleList watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1ClusterRoleList(params *WatchRbacAuthorizationV1ClusterRoleListParams) (*WatchRbacAuthorizationV1ClusterRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1ClusterRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1ClusterRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1ClusterRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1ClusterRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1ClusterRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1NamespacedRole watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1NamespacedRole(params *WatchRbacAuthorizationV1NamespacedRoleParams) (*WatchRbacAuthorizationV1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1NamespacedRoleBinding watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1NamespacedRoleBinding(params *WatchRbacAuthorizationV1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1NamespacedRoleBindingList watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1NamespacedRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1NamespacedRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1NamespacedRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1NamespacedRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1NamespacedRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1NamespacedRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1NamespacedRoleList watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1NamespacedRoleList(params *WatchRbacAuthorizationV1NamespacedRoleListParams) (*WatchRbacAuthorizationV1NamespacedRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1NamespacedRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1NamespacedRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1NamespacedRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1NamespacedRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1NamespacedRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1RoleBindingListForAllNamespaces watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1RoleBindingListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1RoleBindingListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1RoleBindingListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1RoleBindingListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1RoleBindingListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1RoleListForAllNamespaces watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1RoleListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1RoleListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1RoleListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1/watch/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1RoleListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1RoleListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1RoleListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
