// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReadRbacAuthorizationV1ClusterRoleParams creates a new ReadRbacAuthorizationV1ClusterRoleParams object
// with the default values initialized.
func NewReadRbacAuthorizationV1ClusterRoleParams() *ReadRbacAuthorizationV1ClusterRoleParams {
	var ()
	return &ReadRbacAuthorizationV1ClusterRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadRbacAuthorizationV1ClusterRoleParamsWithTimeout creates a new ReadRbacAuthorizationV1ClusterRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadRbacAuthorizationV1ClusterRoleParamsWithTimeout(timeout time.Duration) *ReadRbacAuthorizationV1ClusterRoleParams {
	var ()
	return &ReadRbacAuthorizationV1ClusterRoleParams{

		timeout: timeout,
	}
}

// NewReadRbacAuthorizationV1ClusterRoleParamsWithContext creates a new ReadRbacAuthorizationV1ClusterRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadRbacAuthorizationV1ClusterRoleParamsWithContext(ctx context.Context) *ReadRbacAuthorizationV1ClusterRoleParams {
	var ()
	return &ReadRbacAuthorizationV1ClusterRoleParams{

		Context: ctx,
	}
}

// NewReadRbacAuthorizationV1ClusterRoleParamsWithHTTPClient creates a new ReadRbacAuthorizationV1ClusterRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadRbacAuthorizationV1ClusterRoleParamsWithHTTPClient(client *http.Client) *ReadRbacAuthorizationV1ClusterRoleParams {
	var ()
	return &ReadRbacAuthorizationV1ClusterRoleParams{
		HTTPClient: client,
	}
}

/*ReadRbacAuthorizationV1ClusterRoleParams contains all the parameters to send to the API endpoint
for the read rbac authorization v1 cluster role operation typically these are written to a http.Request
*/
type ReadRbacAuthorizationV1ClusterRoleParams struct {

	/*Name
	  name of the ClusterRole

	*/
	Name string
	/*Pretty
	  If 'true', then the output is pretty printed.

	*/
	Pretty *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WithTimeout(timeout time.Duration) *ReadRbacAuthorizationV1ClusterRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WithContext(ctx context.Context) *ReadRbacAuthorizationV1ClusterRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WithHTTPClient(client *http.Client) *ReadRbacAuthorizationV1ClusterRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WithName(name string) *ReadRbacAuthorizationV1ClusterRoleParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) SetName(name string) {
	o.Name = name
}

// WithPretty adds the pretty to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WithPretty(pretty *string) *ReadRbacAuthorizationV1ClusterRoleParams {
	o.SetPretty(pretty)
	return o
}

// SetPretty adds the pretty to the read rbac authorization v1 cluster role params
func (o *ReadRbacAuthorizationV1ClusterRoleParams) SetPretty(pretty *string) {
	o.Pretty = pretty
}

// WriteToRequest writes these params to a swagger request
func (o *ReadRbacAuthorizationV1ClusterRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Pretty != nil {

		// query param pretty
		var qrPretty string
		if o.Pretty != nil {
			qrPretty = *o.Pretty
		}
		qPretty := qrPretty
		if qPretty != "" {
			if err := r.SetQueryParam("pretty", qPretty); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
