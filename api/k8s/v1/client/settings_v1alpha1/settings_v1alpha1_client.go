// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package settings_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new settings v1alpha1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings v1alpha1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSettingsV1alpha1NamespacedPodPreset(params *CreateSettingsV1alpha1NamespacedPodPresetParams) (*CreateSettingsV1alpha1NamespacedPodPresetOK, *CreateSettingsV1alpha1NamespacedPodPresetCreated, *CreateSettingsV1alpha1NamespacedPodPresetAccepted, error)

	DeleteSettingsV1alpha1CollectionNamespacedPodPreset(params *DeleteSettingsV1alpha1CollectionNamespacedPodPresetParams) (*DeleteSettingsV1alpha1CollectionNamespacedPodPresetOK, error)

	DeleteSettingsV1alpha1NamespacedPodPreset(params *DeleteSettingsV1alpha1NamespacedPodPresetParams) (*DeleteSettingsV1alpha1NamespacedPodPresetOK, *DeleteSettingsV1alpha1NamespacedPodPresetAccepted, error)

	GetSettingsV1alpha1APIResources(params *GetSettingsV1alpha1APIResourcesParams) (*GetSettingsV1alpha1APIResourcesOK, error)

	ListSettingsV1alpha1NamespacedPodPreset(params *ListSettingsV1alpha1NamespacedPodPresetParams) (*ListSettingsV1alpha1NamespacedPodPresetOK, error)

	ListSettingsV1alpha1PodPresetForAllNamespaces(params *ListSettingsV1alpha1PodPresetForAllNamespacesParams) (*ListSettingsV1alpha1PodPresetForAllNamespacesOK, error)

	PatchSettingsV1alpha1NamespacedPodPreset(params *PatchSettingsV1alpha1NamespacedPodPresetParams) (*PatchSettingsV1alpha1NamespacedPodPresetOK, error)

	ReadSettingsV1alpha1NamespacedPodPreset(params *ReadSettingsV1alpha1NamespacedPodPresetParams) (*ReadSettingsV1alpha1NamespacedPodPresetOK, error)

	ReplaceSettingsV1alpha1NamespacedPodPreset(params *ReplaceSettingsV1alpha1NamespacedPodPresetParams) (*ReplaceSettingsV1alpha1NamespacedPodPresetOK, *ReplaceSettingsV1alpha1NamespacedPodPresetCreated, error)

	WatchSettingsV1alpha1NamespacedPodPreset(params *WatchSettingsV1alpha1NamespacedPodPresetParams) (*WatchSettingsV1alpha1NamespacedPodPresetOK, error)

	WatchSettingsV1alpha1NamespacedPodPresetList(params *WatchSettingsV1alpha1NamespacedPodPresetListParams) (*WatchSettingsV1alpha1NamespacedPodPresetListOK, error)

	WatchSettingsV1alpha1PodPresetListForAllNamespaces(params *WatchSettingsV1alpha1PodPresetListForAllNamespacesParams) (*WatchSettingsV1alpha1PodPresetListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSettingsV1alpha1NamespacedPodPreset create a PodPreset
*/
func (a *Client) CreateSettingsV1alpha1NamespacedPodPreset(params *CreateSettingsV1alpha1NamespacedPodPresetParams) (*CreateSettingsV1alpha1NamespacedPodPresetOK, *CreateSettingsV1alpha1NamespacedPodPresetCreated, *CreateSettingsV1alpha1NamespacedPodPresetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSettingsV1alpha1NamespacedPodPreset",
		Method:             "POST",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSettingsV1alpha1NamespacedPodPresetOK:
		return value, nil, nil, nil
	case *CreateSettingsV1alpha1NamespacedPodPresetCreated:
		return nil, value, nil, nil
	case *CreateSettingsV1alpha1NamespacedPodPresetAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for settings_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSettingsV1alpha1CollectionNamespacedPodPreset delete collection of PodPreset
*/
func (a *Client) DeleteSettingsV1alpha1CollectionNamespacedPodPreset(params *DeleteSettingsV1alpha1CollectionNamespacedPodPresetParams) (*DeleteSettingsV1alpha1CollectionNamespacedPodPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSettingsV1alpha1CollectionNamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSettingsV1alpha1CollectionNamespacedPodPreset",
		Method:             "DELETE",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSettingsV1alpha1CollectionNamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSettingsV1alpha1CollectionNamespacedPodPresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSettingsV1alpha1CollectionNamespacedPodPreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSettingsV1alpha1NamespacedPodPreset delete a PodPreset
*/
func (a *Client) DeleteSettingsV1alpha1NamespacedPodPreset(params *DeleteSettingsV1alpha1NamespacedPodPresetParams) (*DeleteSettingsV1alpha1NamespacedPodPresetOK, *DeleteSettingsV1alpha1NamespacedPodPresetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSettingsV1alpha1NamespacedPodPreset",
		Method:             "DELETE",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSettingsV1alpha1NamespacedPodPresetOK:
		return value, nil, nil
	case *DeleteSettingsV1alpha1NamespacedPodPresetAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for settings_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSettingsV1alpha1APIResources get available resources
*/
func (a *Client) GetSettingsV1alpha1APIResources(params *GetSettingsV1alpha1APIResourcesParams) (*GetSettingsV1alpha1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsV1alpha1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsV1alpha1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSettingsV1alpha1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSettingsV1alpha1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSettingsV1alpha1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSettingsV1alpha1NamespacedPodPreset list or watch objects of kind PodPreset
*/
func (a *Client) ListSettingsV1alpha1NamespacedPodPreset(params *ListSettingsV1alpha1NamespacedPodPresetParams) (*ListSettingsV1alpha1NamespacedPodPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSettingsV1alpha1NamespacedPodPreset",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSettingsV1alpha1NamespacedPodPresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSettingsV1alpha1NamespacedPodPreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSettingsV1alpha1PodPresetForAllNamespaces list or watch objects of kind PodPreset
*/
func (a *Client) ListSettingsV1alpha1PodPresetForAllNamespaces(params *ListSettingsV1alpha1PodPresetForAllNamespacesParams) (*ListSettingsV1alpha1PodPresetForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSettingsV1alpha1PodPresetForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSettingsV1alpha1PodPresetForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSettingsV1alpha1PodPresetForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSettingsV1alpha1PodPresetForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSettingsV1alpha1PodPresetForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSettingsV1alpha1NamespacedPodPreset partially update the specified PodPreset
*/
func (a *Client) PatchSettingsV1alpha1NamespacedPodPreset(params *PatchSettingsV1alpha1NamespacedPodPresetParams) (*PatchSettingsV1alpha1NamespacedPodPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSettingsV1alpha1NamespacedPodPreset",
		Method:             "PATCH",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSettingsV1alpha1NamespacedPodPresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSettingsV1alpha1NamespacedPodPreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadSettingsV1alpha1NamespacedPodPreset read the specified PodPreset
*/
func (a *Client) ReadSettingsV1alpha1NamespacedPodPreset(params *ReadSettingsV1alpha1NamespacedPodPresetParams) (*ReadSettingsV1alpha1NamespacedPodPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readSettingsV1alpha1NamespacedPodPreset",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSettingsV1alpha1NamespacedPodPresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readSettingsV1alpha1NamespacedPodPreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSettingsV1alpha1NamespacedPodPreset replace the specified PodPreset
*/
func (a *Client) ReplaceSettingsV1alpha1NamespacedPodPreset(params *ReplaceSettingsV1alpha1NamespacedPodPresetParams) (*ReplaceSettingsV1alpha1NamespacedPodPresetOK, *ReplaceSettingsV1alpha1NamespacedPodPresetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSettingsV1alpha1NamespacedPodPreset",
		Method:             "PUT",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceSettingsV1alpha1NamespacedPodPresetOK:
		return value, nil, nil
	case *ReplaceSettingsV1alpha1NamespacedPodPresetCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for settings_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchSettingsV1alpha1NamespacedPodPreset watch changes to an object of kind PodPreset. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchSettingsV1alpha1NamespacedPodPreset(params *WatchSettingsV1alpha1NamespacedPodPresetParams) (*WatchSettingsV1alpha1NamespacedPodPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchSettingsV1alpha1NamespacedPodPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchSettingsV1alpha1NamespacedPodPreset",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchSettingsV1alpha1NamespacedPodPresetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchSettingsV1alpha1NamespacedPodPresetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchSettingsV1alpha1NamespacedPodPreset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchSettingsV1alpha1NamespacedPodPresetList watch individual changes to a list of PodPreset. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchSettingsV1alpha1NamespacedPodPresetList(params *WatchSettingsV1alpha1NamespacedPodPresetListParams) (*WatchSettingsV1alpha1NamespacedPodPresetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchSettingsV1alpha1NamespacedPodPresetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchSettingsV1alpha1NamespacedPodPresetList",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchSettingsV1alpha1NamespacedPodPresetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchSettingsV1alpha1NamespacedPodPresetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchSettingsV1alpha1NamespacedPodPresetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchSettingsV1alpha1PodPresetListForAllNamespaces watch individual changes to a list of PodPreset. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchSettingsV1alpha1PodPresetListForAllNamespaces(params *WatchSettingsV1alpha1PodPresetListForAllNamespacesParams) (*WatchSettingsV1alpha1PodPresetListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchSettingsV1alpha1PodPresetListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchSettingsV1alpha1PodPresetListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/settings.k8s.io/v1alpha1/watch/podpresets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchSettingsV1alpha1PodPresetListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchSettingsV1alpha1PodPresetListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchSettingsV1alpha1PodPresetListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
