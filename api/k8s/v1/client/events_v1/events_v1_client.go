// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package events_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new events v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEventsV1NamespacedEvent(params *CreateEventsV1NamespacedEventParams) (*CreateEventsV1NamespacedEventOK, *CreateEventsV1NamespacedEventCreated, *CreateEventsV1NamespacedEventAccepted, error)

	DeleteEventsV1CollectionNamespacedEvent(params *DeleteEventsV1CollectionNamespacedEventParams) (*DeleteEventsV1CollectionNamespacedEventOK, error)

	DeleteEventsV1NamespacedEvent(params *DeleteEventsV1NamespacedEventParams) (*DeleteEventsV1NamespacedEventOK, *DeleteEventsV1NamespacedEventAccepted, error)

	GetEventsV1APIResources(params *GetEventsV1APIResourcesParams) (*GetEventsV1APIResourcesOK, error)

	ListEventsV1EventForAllNamespaces(params *ListEventsV1EventForAllNamespacesParams) (*ListEventsV1EventForAllNamespacesOK, error)

	ListEventsV1NamespacedEvent(params *ListEventsV1NamespacedEventParams) (*ListEventsV1NamespacedEventOK, error)

	PatchEventsV1NamespacedEvent(params *PatchEventsV1NamespacedEventParams) (*PatchEventsV1NamespacedEventOK, error)

	ReadEventsV1NamespacedEvent(params *ReadEventsV1NamespacedEventParams) (*ReadEventsV1NamespacedEventOK, error)

	ReplaceEventsV1NamespacedEvent(params *ReplaceEventsV1NamespacedEventParams) (*ReplaceEventsV1NamespacedEventOK, *ReplaceEventsV1NamespacedEventCreated, error)

	WatchEventsV1EventListForAllNamespaces(params *WatchEventsV1EventListForAllNamespacesParams) (*WatchEventsV1EventListForAllNamespacesOK, error)

	WatchEventsV1NamespacedEvent(params *WatchEventsV1NamespacedEventParams) (*WatchEventsV1NamespacedEventOK, error)

	WatchEventsV1NamespacedEventList(params *WatchEventsV1NamespacedEventListParams) (*WatchEventsV1NamespacedEventListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEventsV1NamespacedEvent create an Event
*/
func (a *Client) CreateEventsV1NamespacedEvent(params *CreateEventsV1NamespacedEventParams) (*CreateEventsV1NamespacedEventOK, *CreateEventsV1NamespacedEventCreated, *CreateEventsV1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventsV1NamespacedEvent",
		Method:             "POST",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEventsV1NamespacedEventOK:
		return value, nil, nil, nil
	case *CreateEventsV1NamespacedEventCreated:
		return nil, value, nil, nil
	case *CreateEventsV1NamespacedEventAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEventsV1CollectionNamespacedEvent delete collection of Event
*/
func (a *Client) DeleteEventsV1CollectionNamespacedEvent(params *DeleteEventsV1CollectionNamespacedEventParams) (*DeleteEventsV1CollectionNamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsV1CollectionNamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventsV1CollectionNamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventsV1CollectionNamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEventsV1CollectionNamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEventsV1CollectionNamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEventsV1NamespacedEvent delete an Event
*/
func (a *Client) DeleteEventsV1NamespacedEvent(params *DeleteEventsV1NamespacedEventParams) (*DeleteEventsV1NamespacedEventOK, *DeleteEventsV1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventsV1NamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEventsV1NamespacedEventOK:
		return value, nil, nil
	case *DeleteEventsV1NamespacedEventAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEventsV1APIResources get available resources
*/
func (a *Client) GetEventsV1APIResources(params *GetEventsV1APIResourcesParams) (*GetEventsV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventsV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEventsV1EventForAllNamespaces list or watch objects of kind Event
*/
func (a *Client) ListEventsV1EventForAllNamespaces(params *ListEventsV1EventForAllNamespacesParams) (*ListEventsV1EventForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsV1EventForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventsV1EventForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsV1EventForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsV1EventForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsV1EventForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEventsV1NamespacedEvent list or watch objects of kind Event
*/
func (a *Client) ListEventsV1NamespacedEvent(params *ListEventsV1NamespacedEventParams) (*ListEventsV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventsV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchEventsV1NamespacedEvent partially update the specified Event
*/
func (a *Client) PatchEventsV1NamespacedEvent(params *PatchEventsV1NamespacedEventParams) (*PatchEventsV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEventsV1NamespacedEvent",
		Method:             "PATCH",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEventsV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchEventsV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadEventsV1NamespacedEvent read the specified Event
*/
func (a *Client) ReadEventsV1NamespacedEvent(params *ReadEventsV1NamespacedEventParams) (*ReadEventsV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readEventsV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadEventsV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readEventsV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceEventsV1NamespacedEvent replace the specified Event
*/
func (a *Client) ReplaceEventsV1NamespacedEvent(params *ReplaceEventsV1NamespacedEventParams) (*ReplaceEventsV1NamespacedEventOK, *ReplaceEventsV1NamespacedEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceEventsV1NamespacedEvent",
		Method:             "PUT",
		PathPattern:        "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceEventsV1NamespacedEventOK:
		return value, nil, nil
	case *ReplaceEventsV1NamespacedEventCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1EventListForAllNamespaces watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchEventsV1EventListForAllNamespaces(params *WatchEventsV1EventListForAllNamespacesParams) (*WatchEventsV1EventListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1EventListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1EventListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/watch/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1EventListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1EventListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1EventListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1NamespacedEvent watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchEventsV1NamespacedEvent(params *WatchEventsV1NamespacedEventParams) (*WatchEventsV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1NamespacedEventList watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchEventsV1NamespacedEventList(params *WatchEventsV1NamespacedEventListParams) (*WatchEventsV1NamespacedEventListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1NamespacedEventListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1NamespacedEventList",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1NamespacedEventListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1NamespacedEventListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1NamespacedEventList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
