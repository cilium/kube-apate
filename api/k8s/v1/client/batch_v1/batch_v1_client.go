// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new batch v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for batch v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBatchV1NamespacedJob(params *CreateBatchV1NamespacedJobParams) (*CreateBatchV1NamespacedJobOK, *CreateBatchV1NamespacedJobCreated, *CreateBatchV1NamespacedJobAccepted, error)

	DeleteBatchV1CollectionNamespacedJob(params *DeleteBatchV1CollectionNamespacedJobParams) (*DeleteBatchV1CollectionNamespacedJobOK, error)

	DeleteBatchV1NamespacedJob(params *DeleteBatchV1NamespacedJobParams) (*DeleteBatchV1NamespacedJobOK, *DeleteBatchV1NamespacedJobAccepted, error)

	GetBatchV1APIResources(params *GetBatchV1APIResourcesParams) (*GetBatchV1APIResourcesOK, error)

	ListBatchV1JobForAllNamespaces(params *ListBatchV1JobForAllNamespacesParams) (*ListBatchV1JobForAllNamespacesOK, error)

	ListBatchV1NamespacedJob(params *ListBatchV1NamespacedJobParams) (*ListBatchV1NamespacedJobOK, error)

	PatchBatchV1NamespacedJob(params *PatchBatchV1NamespacedJobParams) (*PatchBatchV1NamespacedJobOK, error)

	PatchBatchV1NamespacedJobStatus(params *PatchBatchV1NamespacedJobStatusParams) (*PatchBatchV1NamespacedJobStatusOK, error)

	ReadBatchV1NamespacedJob(params *ReadBatchV1NamespacedJobParams) (*ReadBatchV1NamespacedJobOK, error)

	ReadBatchV1NamespacedJobStatus(params *ReadBatchV1NamespacedJobStatusParams) (*ReadBatchV1NamespacedJobStatusOK, error)

	ReplaceBatchV1NamespacedJob(params *ReplaceBatchV1NamespacedJobParams) (*ReplaceBatchV1NamespacedJobOK, *ReplaceBatchV1NamespacedJobCreated, error)

	ReplaceBatchV1NamespacedJobStatus(params *ReplaceBatchV1NamespacedJobStatusParams) (*ReplaceBatchV1NamespacedJobStatusOK, *ReplaceBatchV1NamespacedJobStatusCreated, error)

	WatchBatchV1JobListForAllNamespaces(params *WatchBatchV1JobListForAllNamespacesParams) (*WatchBatchV1JobListForAllNamespacesOK, error)

	WatchBatchV1NamespacedJob(params *WatchBatchV1NamespacedJobParams) (*WatchBatchV1NamespacedJobOK, error)

	WatchBatchV1NamespacedJobList(params *WatchBatchV1NamespacedJobListParams) (*WatchBatchV1NamespacedJobListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBatchV1NamespacedJob create a Job
*/
func (a *Client) CreateBatchV1NamespacedJob(params *CreateBatchV1NamespacedJobParams) (*CreateBatchV1NamespacedJobOK, *CreateBatchV1NamespacedJobCreated, *CreateBatchV1NamespacedJobAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBatchV1NamespacedJob",
		Method:             "POST",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBatchV1NamespacedJobOK:
		return value, nil, nil, nil
	case *CreateBatchV1NamespacedJobCreated:
		return nil, value, nil, nil
	case *CreateBatchV1NamespacedJobAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for batch_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBatchV1CollectionNamespacedJob delete collection of Job
*/
func (a *Client) DeleteBatchV1CollectionNamespacedJob(params *DeleteBatchV1CollectionNamespacedJobParams) (*DeleteBatchV1CollectionNamespacedJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBatchV1CollectionNamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBatchV1CollectionNamespacedJob",
		Method:             "DELETE",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBatchV1CollectionNamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBatchV1CollectionNamespacedJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBatchV1CollectionNamespacedJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBatchV1NamespacedJob delete a Job
*/
func (a *Client) DeleteBatchV1NamespacedJob(params *DeleteBatchV1NamespacedJobParams) (*DeleteBatchV1NamespacedJobOK, *DeleteBatchV1NamespacedJobAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBatchV1NamespacedJob",
		Method:             "DELETE",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBatchV1NamespacedJobOK:
		return value, nil, nil
	case *DeleteBatchV1NamespacedJobAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for batch_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBatchV1APIResources get available resources
*/
func (a *Client) GetBatchV1APIResources(params *GetBatchV1APIResourcesParams) (*GetBatchV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBatchV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBatchV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBatchV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBatchV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBatchV1JobForAllNamespaces list or watch objects of kind Job
*/
func (a *Client) ListBatchV1JobForAllNamespaces(params *ListBatchV1JobForAllNamespacesParams) (*ListBatchV1JobForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBatchV1JobForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBatchV1JobForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/jobs",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBatchV1JobForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBatchV1JobForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBatchV1JobForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListBatchV1NamespacedJob list or watch objects of kind Job
*/
func (a *Client) ListBatchV1NamespacedJob(params *ListBatchV1NamespacedJobParams) (*ListBatchV1NamespacedJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBatchV1NamespacedJob",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBatchV1NamespacedJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listBatchV1NamespacedJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchBatchV1NamespacedJob partially update the specified Job
*/
func (a *Client) PatchBatchV1NamespacedJob(params *PatchBatchV1NamespacedJobParams) (*PatchBatchV1NamespacedJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBatchV1NamespacedJob",
		Method:             "PATCH",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchBatchV1NamespacedJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchBatchV1NamespacedJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchBatchV1NamespacedJobStatus partially update status of the specified Job
*/
func (a *Client) PatchBatchV1NamespacedJobStatus(params *PatchBatchV1NamespacedJobStatusParams) (*PatchBatchV1NamespacedJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchBatchV1NamespacedJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchBatchV1NamespacedJobStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchBatchV1NamespacedJobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchBatchV1NamespacedJobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchBatchV1NamespacedJobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadBatchV1NamespacedJob read the specified Job
*/
func (a *Client) ReadBatchV1NamespacedJob(params *ReadBatchV1NamespacedJobParams) (*ReadBatchV1NamespacedJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readBatchV1NamespacedJob",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadBatchV1NamespacedJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readBatchV1NamespacedJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadBatchV1NamespacedJobStatus read status of the specified Job
*/
func (a *Client) ReadBatchV1NamespacedJobStatus(params *ReadBatchV1NamespacedJobStatusParams) (*ReadBatchV1NamespacedJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadBatchV1NamespacedJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readBatchV1NamespacedJobStatus",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadBatchV1NamespacedJobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadBatchV1NamespacedJobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readBatchV1NamespacedJobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBatchV1NamespacedJob replace the specified Job
*/
func (a *Client) ReplaceBatchV1NamespacedJob(params *ReplaceBatchV1NamespacedJobParams) (*ReplaceBatchV1NamespacedJobOK, *ReplaceBatchV1NamespacedJobCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceBatchV1NamespacedJob",
		Method:             "PUT",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceBatchV1NamespacedJobOK:
		return value, nil, nil
	case *ReplaceBatchV1NamespacedJobCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for batch_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBatchV1NamespacedJobStatus replace status of the specified Job
*/
func (a *Client) ReplaceBatchV1NamespacedJobStatus(params *ReplaceBatchV1NamespacedJobStatusParams) (*ReplaceBatchV1NamespacedJobStatusOK, *ReplaceBatchV1NamespacedJobStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBatchV1NamespacedJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceBatchV1NamespacedJobStatus",
		Method:             "PUT",
		PathPattern:        "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceBatchV1NamespacedJobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceBatchV1NamespacedJobStatusOK:
		return value, nil, nil
	case *ReplaceBatchV1NamespacedJobStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for batch_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchBatchV1JobListForAllNamespaces watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchBatchV1JobListForAllNamespaces(params *WatchBatchV1JobListForAllNamespacesParams) (*WatchBatchV1JobListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchBatchV1JobListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchBatchV1JobListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/watch/jobs",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchBatchV1JobListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchBatchV1JobListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchBatchV1JobListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchBatchV1NamespacedJob watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchBatchV1NamespacedJob(params *WatchBatchV1NamespacedJobParams) (*WatchBatchV1NamespacedJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchBatchV1NamespacedJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchBatchV1NamespacedJob",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchBatchV1NamespacedJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchBatchV1NamespacedJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchBatchV1NamespacedJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchBatchV1NamespacedJobList watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchBatchV1NamespacedJobList(params *WatchBatchV1NamespacedJobListParams) (*WatchBatchV1NamespacedJobListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchBatchV1NamespacedJobListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchBatchV1NamespacedJobList",
		Method:             "GET",
		PathPattern:        "/apis/batch/v1/watch/namespaces/{namespace}/jobs",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchBatchV1NamespacedJobListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchBatchV1NamespacedJobListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchBatchV1NamespacedJobList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
