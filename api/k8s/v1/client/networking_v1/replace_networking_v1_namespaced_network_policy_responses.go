// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cilium/kube-apate/api/k8s/v1/models"
)

// ReplaceNetworkingV1NamespacedNetworkPolicyReader is a Reader for the ReplaceNetworkingV1NamespacedNetworkPolicy structure.
type ReplaceNetworkingV1NamespacedNetworkPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceNetworkingV1NamespacedNetworkPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceNetworkingV1NamespacedNetworkPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewReplaceNetworkingV1NamespacedNetworkPolicyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReplaceNetworkingV1NamespacedNetworkPolicyOK creates a ReplaceNetworkingV1NamespacedNetworkPolicyOK with default headers values
func NewReplaceNetworkingV1NamespacedNetworkPolicyOK() *ReplaceNetworkingV1NamespacedNetworkPolicyOK {
	return &ReplaceNetworkingV1NamespacedNetworkPolicyOK{}
}

/*ReplaceNetworkingV1NamespacedNetworkPolicyOK handles this case with default header values.

OK
*/
type ReplaceNetworkingV1NamespacedNetworkPolicyOK struct {
	Payload *models.IoK8sAPINetworkingV1NetworkPolicy
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyOK) Error() string {
	return fmt.Sprintf("[PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}][%d] replaceNetworkingV1NamespacedNetworkPolicyOK  %+v", 200, o.Payload)
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyOK) GetPayload() *models.IoK8sAPINetworkingV1NetworkPolicy {
	return o.Payload
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IoK8sAPINetworkingV1NetworkPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNetworkingV1NamespacedNetworkPolicyCreated creates a ReplaceNetworkingV1NamespacedNetworkPolicyCreated with default headers values
func NewReplaceNetworkingV1NamespacedNetworkPolicyCreated() *ReplaceNetworkingV1NamespacedNetworkPolicyCreated {
	return &ReplaceNetworkingV1NamespacedNetworkPolicyCreated{}
}

/*ReplaceNetworkingV1NamespacedNetworkPolicyCreated handles this case with default header values.

Created
*/
type ReplaceNetworkingV1NamespacedNetworkPolicyCreated struct {
	Payload *models.IoK8sAPINetworkingV1NetworkPolicy
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyCreated) Error() string {
	return fmt.Sprintf("[PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}][%d] replaceNetworkingV1NamespacedNetworkPolicyCreated  %+v", 201, o.Payload)
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyCreated) GetPayload() *models.IoK8sAPINetworkingV1NetworkPolicy {
	return o.Payload
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IoK8sAPINetworkingV1NetworkPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized creates a ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized with default headers values
func NewReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized() *ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized {
	return &ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized{}
}

/*ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized handles this case with default header values.

Unauthorized
*/
type ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized struct {
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}][%d] replaceNetworkingV1NamespacedNetworkPolicyUnauthorized ", 401)
}

func (o *ReplaceNetworkingV1NamespacedNetworkPolicyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
