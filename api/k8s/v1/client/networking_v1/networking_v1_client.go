// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networking v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networking v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkingV1IngressClass(params *CreateNetworkingV1IngressClassParams) (*CreateNetworkingV1IngressClassOK, *CreateNetworkingV1IngressClassCreated, *CreateNetworkingV1IngressClassAccepted, error)

	CreateNetworkingV1NamespacedIngress(params *CreateNetworkingV1NamespacedIngressParams) (*CreateNetworkingV1NamespacedIngressOK, *CreateNetworkingV1NamespacedIngressCreated, *CreateNetworkingV1NamespacedIngressAccepted, error)

	CreateNetworkingV1NamespacedNetworkPolicy(params *CreateNetworkingV1NamespacedNetworkPolicyParams) (*CreateNetworkingV1NamespacedNetworkPolicyOK, *CreateNetworkingV1NamespacedNetworkPolicyCreated, *CreateNetworkingV1NamespacedNetworkPolicyAccepted, error)

	DeleteNetworkingV1CollectionIngressClass(params *DeleteNetworkingV1CollectionIngressClassParams) (*DeleteNetworkingV1CollectionIngressClassOK, error)

	DeleteNetworkingV1CollectionNamespacedIngress(params *DeleteNetworkingV1CollectionNamespacedIngressParams) (*DeleteNetworkingV1CollectionNamespacedIngressOK, error)

	DeleteNetworkingV1CollectionNamespacedNetworkPolicy(params *DeleteNetworkingV1CollectionNamespacedNetworkPolicyParams) (*DeleteNetworkingV1CollectionNamespacedNetworkPolicyOK, error)

	DeleteNetworkingV1IngressClass(params *DeleteNetworkingV1IngressClassParams) (*DeleteNetworkingV1IngressClassOK, *DeleteNetworkingV1IngressClassAccepted, error)

	DeleteNetworkingV1NamespacedIngress(params *DeleteNetworkingV1NamespacedIngressParams) (*DeleteNetworkingV1NamespacedIngressOK, *DeleteNetworkingV1NamespacedIngressAccepted, error)

	DeleteNetworkingV1NamespacedNetworkPolicy(params *DeleteNetworkingV1NamespacedNetworkPolicyParams) (*DeleteNetworkingV1NamespacedNetworkPolicyOK, *DeleteNetworkingV1NamespacedNetworkPolicyAccepted, error)

	GetNetworkingV1APIResources(params *GetNetworkingV1APIResourcesParams) (*GetNetworkingV1APIResourcesOK, error)

	ListNetworkingV1IngressClass(params *ListNetworkingV1IngressClassParams) (*ListNetworkingV1IngressClassOK, error)

	ListNetworkingV1IngressForAllNamespaces(params *ListNetworkingV1IngressForAllNamespacesParams) (*ListNetworkingV1IngressForAllNamespacesOK, error)

	ListNetworkingV1NamespacedIngress(params *ListNetworkingV1NamespacedIngressParams) (*ListNetworkingV1NamespacedIngressOK, error)

	ListNetworkingV1NamespacedNetworkPolicy(params *ListNetworkingV1NamespacedNetworkPolicyParams) (*ListNetworkingV1NamespacedNetworkPolicyOK, error)

	ListNetworkingV1NetworkPolicyForAllNamespaces(params *ListNetworkingV1NetworkPolicyForAllNamespacesParams) (*ListNetworkingV1NetworkPolicyForAllNamespacesOK, error)

	PatchNetworkingV1IngressClass(params *PatchNetworkingV1IngressClassParams) (*PatchNetworkingV1IngressClassOK, error)

	PatchNetworkingV1NamespacedIngress(params *PatchNetworkingV1NamespacedIngressParams) (*PatchNetworkingV1NamespacedIngressOK, error)

	PatchNetworkingV1NamespacedIngressStatus(params *PatchNetworkingV1NamespacedIngressStatusParams) (*PatchNetworkingV1NamespacedIngressStatusOK, error)

	PatchNetworkingV1NamespacedNetworkPolicy(params *PatchNetworkingV1NamespacedNetworkPolicyParams) (*PatchNetworkingV1NamespacedNetworkPolicyOK, error)

	ReadNetworkingV1IngressClass(params *ReadNetworkingV1IngressClassParams) (*ReadNetworkingV1IngressClassOK, error)

	ReadNetworkingV1NamespacedIngress(params *ReadNetworkingV1NamespacedIngressParams) (*ReadNetworkingV1NamespacedIngressOK, error)

	ReadNetworkingV1NamespacedIngressStatus(params *ReadNetworkingV1NamespacedIngressStatusParams) (*ReadNetworkingV1NamespacedIngressStatusOK, error)

	ReadNetworkingV1NamespacedNetworkPolicy(params *ReadNetworkingV1NamespacedNetworkPolicyParams) (*ReadNetworkingV1NamespacedNetworkPolicyOK, error)

	ReplaceNetworkingV1IngressClass(params *ReplaceNetworkingV1IngressClassParams) (*ReplaceNetworkingV1IngressClassOK, *ReplaceNetworkingV1IngressClassCreated, error)

	ReplaceNetworkingV1NamespacedIngress(params *ReplaceNetworkingV1NamespacedIngressParams) (*ReplaceNetworkingV1NamespacedIngressOK, *ReplaceNetworkingV1NamespacedIngressCreated, error)

	ReplaceNetworkingV1NamespacedIngressStatus(params *ReplaceNetworkingV1NamespacedIngressStatusParams) (*ReplaceNetworkingV1NamespacedIngressStatusOK, *ReplaceNetworkingV1NamespacedIngressStatusCreated, error)

	ReplaceNetworkingV1NamespacedNetworkPolicy(params *ReplaceNetworkingV1NamespacedNetworkPolicyParams) (*ReplaceNetworkingV1NamespacedNetworkPolicyOK, *ReplaceNetworkingV1NamespacedNetworkPolicyCreated, error)

	WatchNetworkingV1IngressClass(params *WatchNetworkingV1IngressClassParams) (*WatchNetworkingV1IngressClassOK, error)

	WatchNetworkingV1IngressClassList(params *WatchNetworkingV1IngressClassListParams) (*WatchNetworkingV1IngressClassListOK, error)

	WatchNetworkingV1IngressListForAllNamespaces(params *WatchNetworkingV1IngressListForAllNamespacesParams) (*WatchNetworkingV1IngressListForAllNamespacesOK, error)

	WatchNetworkingV1NamespacedIngress(params *WatchNetworkingV1NamespacedIngressParams) (*WatchNetworkingV1NamespacedIngressOK, error)

	WatchNetworkingV1NamespacedIngressList(params *WatchNetworkingV1NamespacedIngressListParams) (*WatchNetworkingV1NamespacedIngressListOK, error)

	WatchNetworkingV1NamespacedNetworkPolicy(params *WatchNetworkingV1NamespacedNetworkPolicyParams) (*WatchNetworkingV1NamespacedNetworkPolicyOK, error)

	WatchNetworkingV1NamespacedNetworkPolicyList(params *WatchNetworkingV1NamespacedNetworkPolicyListParams) (*WatchNetworkingV1NamespacedNetworkPolicyListOK, error)

	WatchNetworkingV1NetworkPolicyListForAllNamespaces(params *WatchNetworkingV1NetworkPolicyListForAllNamespacesParams) (*WatchNetworkingV1NetworkPolicyListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkingV1IngressClass create an IngressClass
*/
func (a *Client) CreateNetworkingV1IngressClass(params *CreateNetworkingV1IngressClassParams) (*CreateNetworkingV1IngressClassOK, *CreateNetworkingV1IngressClassCreated, *CreateNetworkingV1IngressClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkingV1IngressClass",
		Method:             "POST",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkingV1IngressClassOK:
		return value, nil, nil, nil
	case *CreateNetworkingV1IngressClassCreated:
		return nil, value, nil, nil
	case *CreateNetworkingV1IngressClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkingV1NamespacedIngress create an Ingress
*/
func (a *Client) CreateNetworkingV1NamespacedIngress(params *CreateNetworkingV1NamespacedIngressParams) (*CreateNetworkingV1NamespacedIngressOK, *CreateNetworkingV1NamespacedIngressCreated, *CreateNetworkingV1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkingV1NamespacedIngress",
		Method:             "POST",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkingV1NamespacedIngressOK:
		return value, nil, nil, nil
	case *CreateNetworkingV1NamespacedIngressCreated:
		return nil, value, nil, nil
	case *CreateNetworkingV1NamespacedIngressAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkingV1NamespacedNetworkPolicy create a NetworkPolicy
*/
func (a *Client) CreateNetworkingV1NamespacedNetworkPolicy(params *CreateNetworkingV1NamespacedNetworkPolicyParams) (*CreateNetworkingV1NamespacedNetworkPolicyOK, *CreateNetworkingV1NamespacedNetworkPolicyCreated, *CreateNetworkingV1NamespacedNetworkPolicyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkingV1NamespacedNetworkPolicy",
		Method:             "POST",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkingV1NamespacedNetworkPolicyOK:
		return value, nil, nil, nil
	case *CreateNetworkingV1NamespacedNetworkPolicyCreated:
		return nil, value, nil, nil
	case *CreateNetworkingV1NamespacedNetworkPolicyAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1CollectionIngressClass delete collection of IngressClass
*/
func (a *Client) DeleteNetworkingV1CollectionIngressClass(params *DeleteNetworkingV1CollectionIngressClassParams) (*DeleteNetworkingV1CollectionIngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1CollectionIngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1CollectionIngressClass",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1CollectionIngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkingV1CollectionIngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkingV1CollectionIngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1CollectionNamespacedIngress delete collection of Ingress
*/
func (a *Client) DeleteNetworkingV1CollectionNamespacedIngress(params *DeleteNetworkingV1CollectionNamespacedIngressParams) (*DeleteNetworkingV1CollectionNamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1CollectionNamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1CollectionNamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1CollectionNamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkingV1CollectionNamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkingV1CollectionNamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1CollectionNamespacedNetworkPolicy delete collection of NetworkPolicy
*/
func (a *Client) DeleteNetworkingV1CollectionNamespacedNetworkPolicy(params *DeleteNetworkingV1CollectionNamespacedNetworkPolicyParams) (*DeleteNetworkingV1CollectionNamespacedNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1CollectionNamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1CollectionNamespacedNetworkPolicy",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1CollectionNamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkingV1CollectionNamespacedNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkingV1CollectionNamespacedNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1IngressClass delete an IngressClass
*/
func (a *Client) DeleteNetworkingV1IngressClass(params *DeleteNetworkingV1IngressClassParams) (*DeleteNetworkingV1IngressClassOK, *DeleteNetworkingV1IngressClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1IngressClass",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNetworkingV1IngressClassOK:
		return value, nil, nil
	case *DeleteNetworkingV1IngressClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1NamespacedIngress delete an Ingress
*/
func (a *Client) DeleteNetworkingV1NamespacedIngress(params *DeleteNetworkingV1NamespacedIngressParams) (*DeleteNetworkingV1NamespacedIngressOK, *DeleteNetworkingV1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1NamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNetworkingV1NamespacedIngressOK:
		return value, nil, nil
	case *DeleteNetworkingV1NamespacedIngressAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1NamespacedNetworkPolicy delete a NetworkPolicy
*/
func (a *Client) DeleteNetworkingV1NamespacedNetworkPolicy(params *DeleteNetworkingV1NamespacedNetworkPolicyParams) (*DeleteNetworkingV1NamespacedNetworkPolicyOK, *DeleteNetworkingV1NamespacedNetworkPolicyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1NamespacedNetworkPolicy",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNetworkingV1NamespacedNetworkPolicyOK:
		return value, nil, nil
	case *DeleteNetworkingV1NamespacedNetworkPolicyAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkingV1APIResources get available resources
*/
func (a *Client) GetNetworkingV1APIResources(params *GetNetworkingV1APIResourcesParams) (*GetNetworkingV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkingV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkingV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkingV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkingV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkingV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1IngressClass list or watch objects of kind IngressClass
*/
func (a *Client) ListNetworkingV1IngressClass(params *ListNetworkingV1IngressClassParams) (*ListNetworkingV1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1IngressForAllNamespaces list or watch objects of kind Ingress
*/
func (a *Client) ListNetworkingV1IngressForAllNamespaces(params *ListNetworkingV1IngressForAllNamespacesParams) (*ListNetworkingV1IngressForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1IngressForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1IngressForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1IngressForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1IngressForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1IngressForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1NamespacedIngress list or watch objects of kind Ingress
*/
func (a *Client) ListNetworkingV1NamespacedIngress(params *ListNetworkingV1NamespacedIngressParams) (*ListNetworkingV1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1NamespacedNetworkPolicy list or watch objects of kind NetworkPolicy
*/
func (a *Client) ListNetworkingV1NamespacedNetworkPolicy(params *ListNetworkingV1NamespacedNetworkPolicyParams) (*ListNetworkingV1NamespacedNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1NamespacedNetworkPolicy",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1NamespacedNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1NamespacedNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1NetworkPolicyForAllNamespaces list or watch objects of kind NetworkPolicy
*/
func (a *Client) ListNetworkingV1NetworkPolicyForAllNamespaces(params *ListNetworkingV1NetworkPolicyForAllNamespacesParams) (*ListNetworkingV1NetworkPolicyForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1NetworkPolicyForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1NetworkPolicyForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1NetworkPolicyForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1NetworkPolicyForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1NetworkPolicyForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1IngressClass partially update the specified IngressClass
*/
func (a *Client) PatchNetworkingV1IngressClass(params *PatchNetworkingV1IngressClassParams) (*PatchNetworkingV1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1IngressClass",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1NamespacedIngress partially update the specified Ingress
*/
func (a *Client) PatchNetworkingV1NamespacedIngress(params *PatchNetworkingV1NamespacedIngressParams) (*PatchNetworkingV1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1NamespacedIngress",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1NamespacedIngressStatus partially update status of the specified Ingress
*/
func (a *Client) PatchNetworkingV1NamespacedIngressStatus(params *PatchNetworkingV1NamespacedIngressStatusParams) (*PatchNetworkingV1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1NamespacedIngressStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1NamespacedNetworkPolicy partially update the specified NetworkPolicy
*/
func (a *Client) PatchNetworkingV1NamespacedNetworkPolicy(params *PatchNetworkingV1NamespacedNetworkPolicyParams) (*PatchNetworkingV1NamespacedNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1NamespacedNetworkPolicy",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1NamespacedNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1NamespacedNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1IngressClass read the specified IngressClass
*/
func (a *Client) ReadNetworkingV1IngressClass(params *ReadNetworkingV1IngressClassParams) (*ReadNetworkingV1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1NamespacedIngress read the specified Ingress
*/
func (a *Client) ReadNetworkingV1NamespacedIngress(params *ReadNetworkingV1NamespacedIngressParams) (*ReadNetworkingV1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1NamespacedIngressStatus read status of the specified Ingress
*/
func (a *Client) ReadNetworkingV1NamespacedIngressStatus(params *ReadNetworkingV1NamespacedIngressStatusParams) (*ReadNetworkingV1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1NamespacedIngressStatus",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1NamespacedNetworkPolicy read the specified NetworkPolicy
*/
func (a *Client) ReadNetworkingV1NamespacedNetworkPolicy(params *ReadNetworkingV1NamespacedNetworkPolicyParams) (*ReadNetworkingV1NamespacedNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1NamespacedNetworkPolicy",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1NamespacedNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1NamespacedNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1IngressClass replace the specified IngressClass
*/
func (a *Client) ReplaceNetworkingV1IngressClass(params *ReplaceNetworkingV1IngressClassParams) (*ReplaceNetworkingV1IngressClassOK, *ReplaceNetworkingV1IngressClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1IngressClass",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1IngressClassOK:
		return value, nil, nil
	case *ReplaceNetworkingV1IngressClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1NamespacedIngress replace the specified Ingress
*/
func (a *Client) ReplaceNetworkingV1NamespacedIngress(params *ReplaceNetworkingV1NamespacedIngressParams) (*ReplaceNetworkingV1NamespacedIngressOK, *ReplaceNetworkingV1NamespacedIngressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1NamespacedIngress",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1NamespacedIngressOK:
		return value, nil, nil
	case *ReplaceNetworkingV1NamespacedIngressCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1NamespacedIngressStatus replace status of the specified Ingress
*/
func (a *Client) ReplaceNetworkingV1NamespacedIngressStatus(params *ReplaceNetworkingV1NamespacedIngressStatusParams) (*ReplaceNetworkingV1NamespacedIngressStatusOK, *ReplaceNetworkingV1NamespacedIngressStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1NamespacedIngressStatus",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1NamespacedIngressStatusOK:
		return value, nil, nil
	case *ReplaceNetworkingV1NamespacedIngressStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1NamespacedNetworkPolicy replace the specified NetworkPolicy
*/
func (a *Client) ReplaceNetworkingV1NamespacedNetworkPolicy(params *ReplaceNetworkingV1NamespacedNetworkPolicyParams) (*ReplaceNetworkingV1NamespacedNetworkPolicyOK, *ReplaceNetworkingV1NamespacedNetworkPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1NamespacedNetworkPolicy",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1NamespacedNetworkPolicyOK:
		return value, nil, nil
	case *ReplaceNetworkingV1NamespacedNetworkPolicyCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1IngressClass watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNetworkingV1IngressClass(params *WatchNetworkingV1IngressClassParams) (*WatchNetworkingV1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1IngressClassList watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1IngressClassList(params *WatchNetworkingV1IngressClassListParams) (*WatchNetworkingV1IngressClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1IngressClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1IngressClassList",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1IngressClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1IngressClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1IngressClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1IngressListForAllNamespaces watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1IngressListForAllNamespaces(params *WatchNetworkingV1IngressListForAllNamespacesParams) (*WatchNetworkingV1IngressListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1IngressListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1IngressListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1IngressListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1IngressListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1IngressListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1NamespacedIngress watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNetworkingV1NamespacedIngress(params *WatchNetworkingV1NamespacedIngressParams) (*WatchNetworkingV1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1NamespacedIngressList watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1NamespacedIngressList(params *WatchNetworkingV1NamespacedIngressListParams) (*WatchNetworkingV1NamespacedIngressListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1NamespacedIngressListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1NamespacedIngressList",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1NamespacedIngressListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1NamespacedIngressListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1NamespacedIngressList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1NamespacedNetworkPolicy watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNetworkingV1NamespacedNetworkPolicy(params *WatchNetworkingV1NamespacedNetworkPolicyParams) (*WatchNetworkingV1NamespacedNetworkPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1NamespacedNetworkPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1NamespacedNetworkPolicy",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1NamespacedNetworkPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1NamespacedNetworkPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1NamespacedNetworkPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1NamespacedNetworkPolicyList watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1NamespacedNetworkPolicyList(params *WatchNetworkingV1NamespacedNetworkPolicyListParams) (*WatchNetworkingV1NamespacedNetworkPolicyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1NamespacedNetworkPolicyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1NamespacedNetworkPolicyList",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1NamespacedNetworkPolicyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1NamespacedNetworkPolicyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1NamespacedNetworkPolicyList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1NetworkPolicyListForAllNamespaces watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1NetworkPolicyListForAllNamespaces(params *WatchNetworkingV1NetworkPolicyListForAllNamespacesParams) (*WatchNetworkingV1NetworkPolicyListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1NetworkPolicyListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1NetworkPolicyListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1/watch/networkpolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1NetworkPolicyListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1NetworkPolicyListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1NetworkPolicyListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
