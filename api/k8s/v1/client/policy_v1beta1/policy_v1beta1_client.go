// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package policy_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePolicyV1beta1NamespacedPodDisruptionBudget(params *CreatePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*CreatePolicyV1beta1NamespacedPodDisruptionBudgetOK, *CreatePolicyV1beta1NamespacedPodDisruptionBudgetCreated, *CreatePolicyV1beta1NamespacedPodDisruptionBudgetAccepted, error)

	CreatePolicyV1beta1PodSecurityPolicy(params *CreatePolicyV1beta1PodSecurityPolicyParams) (*CreatePolicyV1beta1PodSecurityPolicyOK, *CreatePolicyV1beta1PodSecurityPolicyCreated, *CreatePolicyV1beta1PodSecurityPolicyAccepted, error)

	DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(params *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetParams) (*DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOK, error)

	DeletePolicyV1beta1CollectionPodSecurityPolicy(params *DeletePolicyV1beta1CollectionPodSecurityPolicyParams) (*DeletePolicyV1beta1CollectionPodSecurityPolicyOK, error)

	DeletePolicyV1beta1NamespacedPodDisruptionBudget(params *DeletePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*DeletePolicyV1beta1NamespacedPodDisruptionBudgetOK, *DeletePolicyV1beta1NamespacedPodDisruptionBudgetAccepted, error)

	DeletePolicyV1beta1PodSecurityPolicy(params *DeletePolicyV1beta1PodSecurityPolicyParams) (*DeletePolicyV1beta1PodSecurityPolicyOK, *DeletePolicyV1beta1PodSecurityPolicyAccepted, error)

	GetPolicyV1beta1APIResources(params *GetPolicyV1beta1APIResourcesParams) (*GetPolicyV1beta1APIResourcesOK, error)

	ListPolicyV1beta1NamespacedPodDisruptionBudget(params *ListPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ListPolicyV1beta1NamespacedPodDisruptionBudgetOK, error)

	ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces(params *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams) (*ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOK, error)

	ListPolicyV1beta1PodSecurityPolicy(params *ListPolicyV1beta1PodSecurityPolicyParams) (*ListPolicyV1beta1PodSecurityPolicyOK, error)

	PatchPolicyV1beta1NamespacedPodDisruptionBudget(params *PatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*PatchPolicyV1beta1NamespacedPodDisruptionBudgetOK, error)

	PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, error)

	PatchPolicyV1beta1PodSecurityPolicy(params *PatchPolicyV1beta1PodSecurityPolicyParams) (*PatchPolicyV1beta1PodSecurityPolicyOK, error)

	ReadPolicyV1beta1NamespacedPodDisruptionBudget(params *ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetOK, error)

	ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, error)

	ReadPolicyV1beta1PodSecurityPolicy(params *ReadPolicyV1beta1PodSecurityPolicyParams) (*ReadPolicyV1beta1PodSecurityPolicyOK, error)

	ReplacePolicyV1beta1NamespacedPodDisruptionBudget(params *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ReplacePolicyV1beta1NamespacedPodDisruptionBudgetOK, *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetCreated, error)

	ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusCreated, error)

	ReplacePolicyV1beta1PodSecurityPolicy(params *ReplacePolicyV1beta1PodSecurityPolicyParams) (*ReplacePolicyV1beta1PodSecurityPolicyOK, *ReplacePolicyV1beta1PodSecurityPolicyCreated, error)

	WatchPolicyV1beta1NamespacedPodDisruptionBudget(params *WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetOK, error)

	WatchPolicyV1beta1NamespacedPodDisruptionBudgetList(params *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams) (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetListOK, error)

	WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(params *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams) (*WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOK, error)

	WatchPolicyV1beta1PodSecurityPolicy(params *WatchPolicyV1beta1PodSecurityPolicyParams) (*WatchPolicyV1beta1PodSecurityPolicyOK, error)

	WatchPolicyV1beta1PodSecurityPolicyList(params *WatchPolicyV1beta1PodSecurityPolicyListParams) (*WatchPolicyV1beta1PodSecurityPolicyListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePolicyV1beta1NamespacedPodDisruptionBudget create a PodDisruptionBudget
*/
func (a *Client) CreatePolicyV1beta1NamespacedPodDisruptionBudget(params *CreatePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*CreatePolicyV1beta1NamespacedPodDisruptionBudgetOK, *CreatePolicyV1beta1NamespacedPodDisruptionBudgetCreated, *CreatePolicyV1beta1NamespacedPodDisruptionBudgetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "POST",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetOK:
		return value, nil, nil, nil
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetCreated:
		return nil, value, nil, nil
	case *CreatePolicyV1beta1NamespacedPodDisruptionBudgetAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePolicyV1beta1PodSecurityPolicy create a PodSecurityPolicy
*/
func (a *Client) CreatePolicyV1beta1PodSecurityPolicy(params *CreatePolicyV1beta1PodSecurityPolicyParams) (*CreatePolicyV1beta1PodSecurityPolicyOK, *CreatePolicyV1beta1PodSecurityPolicyCreated, *CreatePolicyV1beta1PodSecurityPolicyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPolicyV1beta1PodSecurityPolicy",
		Method:             "POST",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePolicyV1beta1PodSecurityPolicyOK:
		return value, nil, nil, nil
	case *CreatePolicyV1beta1PodSecurityPolicyCreated:
		return nil, value, nil, nil
	case *CreatePolicyV1beta1PodSecurityPolicyAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget delete collection of PodDisruptionBudget
*/
func (a *Client) DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(params *DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetParams) (*DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget",
		Method:             "DELETE",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicyV1beta1CollectionPodSecurityPolicy delete collection of PodSecurityPolicy
*/
func (a *Client) DeletePolicyV1beta1CollectionPodSecurityPolicy(params *DeletePolicyV1beta1CollectionPodSecurityPolicyParams) (*DeletePolicyV1beta1CollectionPodSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyV1beta1CollectionPodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicyV1beta1CollectionPodSecurityPolicy",
		Method:             "DELETE",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyV1beta1CollectionPodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyV1beta1CollectionPodSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyV1beta1CollectionPodSecurityPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicyV1beta1NamespacedPodDisruptionBudget delete a PodDisruptionBudget
*/
func (a *Client) DeletePolicyV1beta1NamespacedPodDisruptionBudget(params *DeletePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*DeletePolicyV1beta1NamespacedPodDisruptionBudgetOK, *DeletePolicyV1beta1NamespacedPodDisruptionBudgetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "DELETE",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetOK:
		return value, nil, nil
	case *DeletePolicyV1beta1NamespacedPodDisruptionBudgetAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePolicyV1beta1PodSecurityPolicy delete a PodSecurityPolicy
*/
func (a *Client) DeletePolicyV1beta1PodSecurityPolicy(params *DeletePolicyV1beta1PodSecurityPolicyParams) (*DeletePolicyV1beta1PodSecurityPolicyOK, *DeletePolicyV1beta1PodSecurityPolicyAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePolicyV1beta1PodSecurityPolicy",
		Method:             "DELETE",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePolicyV1beta1PodSecurityPolicyOK:
		return value, nil, nil
	case *DeletePolicyV1beta1PodSecurityPolicyAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPolicyV1beta1APIResources get available resources
*/
func (a *Client) GetPolicyV1beta1APIResources(params *GetPolicyV1beta1APIResourcesParams) (*GetPolicyV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPolicyV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPolicyV1beta1NamespacedPodDisruptionBudget list or watch objects of kind PodDisruptionBudget
*/
func (a *Client) ListPolicyV1beta1NamespacedPodDisruptionBudget(params *ListPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ListPolicyV1beta1NamespacedPodDisruptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPolicyV1beta1NamespacedPodDisruptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPolicyV1beta1NamespacedPodDisruptionBudget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces list or watch objects of kind PodDisruptionBudget
*/
func (a *Client) ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces(params *ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams) (*ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPolicyV1beta1PodDisruptionBudgetForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPolicyV1beta1PodSecurityPolicy list or watch objects of kind PodSecurityPolicy
*/
func (a *Client) ListPolicyV1beta1PodSecurityPolicy(params *ListPolicyV1beta1PodSecurityPolicyParams) (*ListPolicyV1beta1PodSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPolicyV1beta1PodSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPolicyV1beta1PodSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPolicyV1beta1PodSecurityPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPolicyV1beta1NamespacedPodDisruptionBudget partially update the specified PodDisruptionBudget
*/
func (a *Client) PatchPolicyV1beta1NamespacedPodDisruptionBudget(params *PatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*PatchPolicyV1beta1NamespacedPodDisruptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "PATCH",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyV1beta1NamespacedPodDisruptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchPolicyV1beta1NamespacedPodDisruptionBudget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus partially update status of the specified PodDisruptionBudget
*/
func (a *Client) PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchPolicyV1beta1PodSecurityPolicy partially update the specified PodSecurityPolicy
*/
func (a *Client) PatchPolicyV1beta1PodSecurityPolicy(params *PatchPolicyV1beta1PodSecurityPolicyParams) (*PatchPolicyV1beta1PodSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchPolicyV1beta1PodSecurityPolicy",
		Method:             "PATCH",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPolicyV1beta1PodSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchPolicyV1beta1PodSecurityPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadPolicyV1beta1NamespacedPodDisruptionBudget read the specified PodDisruptionBudget
*/
func (a *Client) ReadPolicyV1beta1NamespacedPodDisruptionBudget(params *ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readPolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadPolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPolicyV1beta1NamespacedPodDisruptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readPolicyV1beta1NamespacedPodDisruptionBudget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus read status of the specified PodDisruptionBudget
*/
func (a *Client) ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readPolicyV1beta1NamespacedPodDisruptionBudgetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadPolicyV1beta1PodSecurityPolicy read the specified PodSecurityPolicy
*/
func (a *Client) ReadPolicyV1beta1PodSecurityPolicy(params *ReadPolicyV1beta1PodSecurityPolicyParams) (*ReadPolicyV1beta1PodSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadPolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readPolicyV1beta1PodSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadPolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadPolicyV1beta1PodSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readPolicyV1beta1PodSecurityPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplacePolicyV1beta1NamespacedPodDisruptionBudget replace the specified PodDisruptionBudget
*/
func (a *Client) ReplacePolicyV1beta1NamespacedPodDisruptionBudget(params *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetParams) (*ReplacePolicyV1beta1NamespacedPodDisruptionBudgetOK, *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplacePolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replacePolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "PUT",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplacePolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetOK:
		return value, nil, nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus replace status of the specified PodDisruptionBudget
*/
func (a *Client) ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(params *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) (*ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOK, *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus",
		Method:             "PUT",
		PathPattern:        "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusOK:
		return value, nil, nil
	case *ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplacePolicyV1beta1PodSecurityPolicy replace the specified PodSecurityPolicy
*/
func (a *Client) ReplacePolicyV1beta1PodSecurityPolicy(params *ReplacePolicyV1beta1PodSecurityPolicyParams) (*ReplacePolicyV1beta1PodSecurityPolicyOK, *ReplacePolicyV1beta1PodSecurityPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplacePolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replacePolicyV1beta1PodSecurityPolicy",
		Method:             "PUT",
		PathPattern:        "/apis/policy/v1beta1/podsecuritypolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplacePolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplacePolicyV1beta1PodSecurityPolicyOK:
		return value, nil, nil
	case *ReplacePolicyV1beta1PodSecurityPolicyCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchPolicyV1beta1NamespacedPodDisruptionBudget watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchPolicyV1beta1NamespacedPodDisruptionBudget(params *WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchPolicyV1beta1NamespacedPodDisruptionBudgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchPolicyV1beta1NamespacedPodDisruptionBudget",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchPolicyV1beta1NamespacedPodDisruptionBudgetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchPolicyV1beta1NamespacedPodDisruptionBudgetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchPolicyV1beta1NamespacedPodDisruptionBudget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchPolicyV1beta1NamespacedPodDisruptionBudgetList watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchPolicyV1beta1NamespacedPodDisruptionBudgetList(params *WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams) (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchPolicyV1beta1NamespacedPodDisruptionBudgetList",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchPolicyV1beta1NamespacedPodDisruptionBudgetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchPolicyV1beta1NamespacedPodDisruptionBudgetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchPolicyV1beta1NamespacedPodDisruptionBudgetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(params *WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams) (*WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/watch/poddisruptionbudgets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchPolicyV1beta1PodSecurityPolicy watch changes to an object of kind PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchPolicyV1beta1PodSecurityPolicy(params *WatchPolicyV1beta1PodSecurityPolicyParams) (*WatchPolicyV1beta1PodSecurityPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchPolicyV1beta1PodSecurityPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchPolicyV1beta1PodSecurityPolicy",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/watch/podsecuritypolicies/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchPolicyV1beta1PodSecurityPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchPolicyV1beta1PodSecurityPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchPolicyV1beta1PodSecurityPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchPolicyV1beta1PodSecurityPolicyList watch individual changes to a list of PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchPolicyV1beta1PodSecurityPolicyList(params *WatchPolicyV1beta1PodSecurityPolicyListParams) (*WatchPolicyV1beta1PodSecurityPolicyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchPolicyV1beta1PodSecurityPolicyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchPolicyV1beta1PodSecurityPolicyList",
		Method:             "GET",
		PathPattern:        "/apis/policy/v1beta1/watch/podsecuritypolicies",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchPolicyV1beta1PodSecurityPolicyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchPolicyV1beta1PodSecurityPolicyListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchPolicyV1beta1PodSecurityPolicyList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
