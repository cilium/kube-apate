// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rbac authorization v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rbac authorization v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRbacAuthorizationV1beta1ClusterRole(params *CreateRbacAuthorizationV1beta1ClusterRoleParams) (*CreateRbacAuthorizationV1beta1ClusterRoleOK, *CreateRbacAuthorizationV1beta1ClusterRoleCreated, *CreateRbacAuthorizationV1beta1ClusterRoleAccepted, error)

	CreateRbacAuthorizationV1beta1ClusterRoleBinding(params *CreateRbacAuthorizationV1beta1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1beta1ClusterRoleBindingOK, *CreateRbacAuthorizationV1beta1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1beta1ClusterRoleBindingAccepted, error)

	CreateRbacAuthorizationV1beta1NamespacedRole(params *CreateRbacAuthorizationV1beta1NamespacedRoleParams) (*CreateRbacAuthorizationV1beta1NamespacedRoleOK, *CreateRbacAuthorizationV1beta1NamespacedRoleCreated, *CreateRbacAuthorizationV1beta1NamespacedRoleAccepted, error)

	CreateRbacAuthorizationV1beta1NamespacedRoleBinding(params *CreateRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1beta1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1beta1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1beta1NamespacedRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1beta1ClusterRole(params *DeleteRbacAuthorizationV1beta1ClusterRoleParams) (*DeleteRbacAuthorizationV1beta1ClusterRoleOK, *DeleteRbacAuthorizationV1beta1ClusterRoleAccepted, error)

	DeleteRbacAuthorizationV1beta1ClusterRoleBinding(params *DeleteRbacAuthorizationV1beta1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1beta1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1beta1ClusterRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1beta1CollectionClusterRole(params *DeleteRbacAuthorizationV1beta1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1beta1CollectionClusterRoleOK, error)

	DeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOK, error)

	DeleteRbacAuthorizationV1beta1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOK, error)

	DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOK, error)

	DeleteRbacAuthorizationV1beta1NamespacedRole(params *DeleteRbacAuthorizationV1beta1NamespacedRoleParams) (*DeleteRbacAuthorizationV1beta1NamespacedRoleOK, *DeleteRbacAuthorizationV1beta1NamespacedRoleAccepted, error)

	DeleteRbacAuthorizationV1beta1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1beta1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingAccepted, error)

	GetRbacAuthorizationV1beta1APIResources(params *GetRbacAuthorizationV1beta1APIResourcesParams) (*GetRbacAuthorizationV1beta1APIResourcesOK, error)

	ListRbacAuthorizationV1beta1ClusterRole(params *ListRbacAuthorizationV1beta1ClusterRoleParams) (*ListRbacAuthorizationV1beta1ClusterRoleOK, error)

	ListRbacAuthorizationV1beta1ClusterRoleBinding(params *ListRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ListRbacAuthorizationV1beta1ClusterRoleBindingOK, error)

	ListRbacAuthorizationV1beta1NamespacedRole(params *ListRbacAuthorizationV1beta1NamespacedRoleParams) (*ListRbacAuthorizationV1beta1NamespacedRoleOK, error)

	ListRbacAuthorizationV1beta1NamespacedRoleBinding(params *ListRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1beta1NamespacedRoleBindingOK, error)

	ListRbacAuthorizationV1beta1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOK, error)

	ListRbacAuthorizationV1beta1RoleForAllNamespaces(params *ListRbacAuthorizationV1beta1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1beta1RoleForAllNamespacesOK, error)

	PatchRbacAuthorizationV1beta1ClusterRole(params *PatchRbacAuthorizationV1beta1ClusterRoleParams) (*PatchRbacAuthorizationV1beta1ClusterRoleOK, error)

	PatchRbacAuthorizationV1beta1ClusterRoleBinding(params *PatchRbacAuthorizationV1beta1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1beta1ClusterRoleBindingOK, error)

	PatchRbacAuthorizationV1beta1NamespacedRole(params *PatchRbacAuthorizationV1beta1NamespacedRoleParams) (*PatchRbacAuthorizationV1beta1NamespacedRoleOK, error)

	PatchRbacAuthorizationV1beta1NamespacedRoleBinding(params *PatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1beta1NamespacedRoleBindingOK, error)

	ReadRbacAuthorizationV1beta1ClusterRole(params *ReadRbacAuthorizationV1beta1ClusterRoleParams) (*ReadRbacAuthorizationV1beta1ClusterRoleOK, error)

	ReadRbacAuthorizationV1beta1ClusterRoleBinding(params *ReadRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1beta1ClusterRoleBindingOK, error)

	ReadRbacAuthorizationV1beta1NamespacedRole(params *ReadRbacAuthorizationV1beta1NamespacedRoleParams) (*ReadRbacAuthorizationV1beta1NamespacedRoleOK, error)

	ReadRbacAuthorizationV1beta1NamespacedRoleBinding(params *ReadRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1beta1NamespacedRoleBindingOK, error)

	ReplaceRbacAuthorizationV1beta1ClusterRole(params *ReplaceRbacAuthorizationV1beta1ClusterRoleParams) (*ReplaceRbacAuthorizationV1beta1ClusterRoleOK, *ReplaceRbacAuthorizationV1beta1ClusterRoleCreated, error)

	ReplaceRbacAuthorizationV1beta1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1beta1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingCreated, error)

	ReplaceRbacAuthorizationV1beta1NamespacedRole(params *ReplaceRbacAuthorizationV1beta1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1beta1NamespacedRoleOK, *ReplaceRbacAuthorizationV1beta1NamespacedRoleCreated, error)

	ReplaceRbacAuthorizationV1beta1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingCreated, error)

	WatchRbacAuthorizationV1beta1ClusterRole(params *WatchRbacAuthorizationV1beta1ClusterRoleParams) (*WatchRbacAuthorizationV1beta1ClusterRoleOK, error)

	WatchRbacAuthorizationV1beta1ClusterRoleBinding(params *WatchRbacAuthorizationV1beta1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1beta1ClusterRoleBindingOK, error)

	WatchRbacAuthorizationV1beta1ClusterRoleBindingList(params *WatchRbacAuthorizationV1beta1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1beta1ClusterRoleBindingListOK, error)

	WatchRbacAuthorizationV1beta1ClusterRoleList(params *WatchRbacAuthorizationV1beta1ClusterRoleListParams) (*WatchRbacAuthorizationV1beta1ClusterRoleListOK, error)

	WatchRbacAuthorizationV1beta1NamespacedRole(params *WatchRbacAuthorizationV1beta1NamespacedRoleParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleOK, error)

	WatchRbacAuthorizationV1beta1NamespacedRoleBinding(params *WatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleBindingOK, error)

	WatchRbacAuthorizationV1beta1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1beta1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleBindingListOK, error)

	WatchRbacAuthorizationV1beta1NamespacedRoleList(params *WatchRbacAuthorizationV1beta1NamespacedRoleListParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleListOK, error)

	WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOK, error)

	WatchRbacAuthorizationV1beta1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1beta1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1beta1RoleListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRbacAuthorizationV1beta1ClusterRole create a ClusterRole
*/
func (a *Client) CreateRbacAuthorizationV1beta1ClusterRole(params *CreateRbacAuthorizationV1beta1ClusterRoleParams) (*CreateRbacAuthorizationV1beta1ClusterRoleOK, *CreateRbacAuthorizationV1beta1ClusterRoleCreated, *CreateRbacAuthorizationV1beta1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1beta1ClusterRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1beta1ClusterRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1beta1ClusterRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1beta1ClusterRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1beta1ClusterRoleBinding create a ClusterRoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1beta1ClusterRoleBinding(params *CreateRbacAuthorizationV1beta1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1beta1ClusterRoleBindingOK, *CreateRbacAuthorizationV1beta1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1beta1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1beta1ClusterRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1beta1ClusterRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1beta1ClusterRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1beta1NamespacedRole create a Role
*/
func (a *Client) CreateRbacAuthorizationV1beta1NamespacedRole(params *CreateRbacAuthorizationV1beta1NamespacedRoleParams) (*CreateRbacAuthorizationV1beta1NamespacedRoleOK, *CreateRbacAuthorizationV1beta1NamespacedRoleCreated, *CreateRbacAuthorizationV1beta1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1beta1NamespacedRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1beta1NamespacedRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1beta1NamespacedRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1beta1NamespacedRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1beta1NamespacedRoleBinding create a RoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1beta1NamespacedRoleBinding(params *CreateRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1beta1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1beta1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1beta1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1beta1NamespacedRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1beta1NamespacedRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1beta1NamespacedRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1ClusterRole delete a ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1beta1ClusterRole(params *DeleteRbacAuthorizationV1beta1ClusterRoleParams) (*DeleteRbacAuthorizationV1beta1ClusterRoleOK, *DeleteRbacAuthorizationV1beta1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1ClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1beta1ClusterRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1beta1ClusterRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1ClusterRoleBinding delete a ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1beta1ClusterRoleBinding(params *DeleteRbacAuthorizationV1beta1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1beta1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1beta1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1beta1ClusterRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1beta1ClusterRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1CollectionClusterRole delete collection of ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1beta1CollectionClusterRole(params *DeleteRbacAuthorizationV1beta1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1beta1CollectionClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1CollectionClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1CollectionClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1CollectionClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1beta1CollectionClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1beta1CollectionClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding delete collection of ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1CollectionNamespacedRole delete collection of Role
*/
func (a *Client) DeleteRbacAuthorizationV1beta1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1CollectionNamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1beta1CollectionNamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding delete collection of RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1NamespacedRole delete a Role
*/
func (a *Client) DeleteRbacAuthorizationV1beta1NamespacedRole(params *DeleteRbacAuthorizationV1beta1NamespacedRoleParams) (*DeleteRbacAuthorizationV1beta1NamespacedRoleOK, *DeleteRbacAuthorizationV1beta1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1NamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1beta1NamespacedRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1beta1NamespacedRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1beta1NamespacedRoleBinding delete a RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1beta1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1beta1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1beta1NamespacedRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRbacAuthorizationV1beta1APIResources get available resources
*/
func (a *Client) GetRbacAuthorizationV1beta1APIResources(params *GetRbacAuthorizationV1beta1APIResourcesParams) (*GetRbacAuthorizationV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRbacAuthorizationV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRbacAuthorizationV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRbacAuthorizationV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRbacAuthorizationV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRbacAuthorizationV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1ClusterRole list or watch objects of kind ClusterRole
*/
func (a *Client) ListRbacAuthorizationV1beta1ClusterRole(params *ListRbacAuthorizationV1beta1ClusterRoleParams) (*ListRbacAuthorizationV1beta1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1ClusterRoleBinding list or watch objects of kind ClusterRoleBinding
*/
func (a *Client) ListRbacAuthorizationV1beta1ClusterRoleBinding(params *ListRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ListRbacAuthorizationV1beta1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1NamespacedRole list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1beta1NamespacedRole(params *ListRbacAuthorizationV1beta1NamespacedRoleParams) (*ListRbacAuthorizationV1beta1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1NamespacedRoleBinding list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1beta1NamespacedRoleBinding(params *ListRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1beta1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1RoleBindingForAllNamespaces list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1beta1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1RoleBindingForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1RoleBindingForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1RoleBindingForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1beta1RoleForAllNamespaces list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1beta1RoleForAllNamespaces(params *ListRbacAuthorizationV1beta1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1beta1RoleForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1beta1RoleForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1beta1RoleForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1beta1RoleForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1beta1RoleForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1beta1RoleForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1beta1ClusterRole partially update the specified ClusterRole
*/
func (a *Client) PatchRbacAuthorizationV1beta1ClusterRole(params *PatchRbacAuthorizationV1beta1ClusterRoleParams) (*PatchRbacAuthorizationV1beta1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1beta1ClusterRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1beta1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1beta1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1beta1ClusterRoleBinding partially update the specified ClusterRoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1beta1ClusterRoleBinding(params *PatchRbacAuthorizationV1beta1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1beta1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1beta1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1beta1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1beta1NamespacedRole partially update the specified Role
*/
func (a *Client) PatchRbacAuthorizationV1beta1NamespacedRole(params *PatchRbacAuthorizationV1beta1NamespacedRoleParams) (*PatchRbacAuthorizationV1beta1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1beta1NamespacedRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1beta1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1beta1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1beta1NamespacedRoleBinding partially update the specified RoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1beta1NamespacedRoleBinding(params *PatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1beta1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1beta1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1beta1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1beta1ClusterRole read the specified ClusterRole
*/
func (a *Client) ReadRbacAuthorizationV1beta1ClusterRole(params *ReadRbacAuthorizationV1beta1ClusterRoleParams) (*ReadRbacAuthorizationV1beta1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1beta1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1beta1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1beta1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1beta1ClusterRoleBinding read the specified ClusterRoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1beta1ClusterRoleBinding(params *ReadRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1beta1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1beta1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1beta1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1beta1NamespacedRole read the specified Role
*/
func (a *Client) ReadRbacAuthorizationV1beta1NamespacedRole(params *ReadRbacAuthorizationV1beta1NamespacedRoleParams) (*ReadRbacAuthorizationV1beta1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1beta1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1beta1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1beta1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1beta1NamespacedRoleBinding read the specified RoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1beta1NamespacedRoleBinding(params *ReadRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1beta1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1beta1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1beta1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1beta1ClusterRole replace the specified ClusterRole
*/
func (a *Client) ReplaceRbacAuthorizationV1beta1ClusterRole(params *ReplaceRbacAuthorizationV1beta1ClusterRoleParams) (*ReplaceRbacAuthorizationV1beta1ClusterRoleOK, *ReplaceRbacAuthorizationV1beta1ClusterRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1beta1ClusterRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1beta1ClusterRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1beta1ClusterRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1beta1ClusterRoleBinding replace the specified ClusterRoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1beta1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1beta1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1beta1ClusterRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1beta1NamespacedRole replace the specified Role
*/
func (a *Client) ReplaceRbacAuthorizationV1beta1NamespacedRole(params *ReplaceRbacAuthorizationV1beta1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1beta1NamespacedRoleOK, *ReplaceRbacAuthorizationV1beta1NamespacedRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1beta1NamespacedRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1beta1NamespacedRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1beta1NamespacedRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1beta1NamespacedRoleBinding replace the specified RoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1beta1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1ClusterRole watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1beta1ClusterRole(params *WatchRbacAuthorizationV1beta1ClusterRoleParams) (*WatchRbacAuthorizationV1beta1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1ClusterRoleBinding watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1beta1ClusterRoleBinding(params *WatchRbacAuthorizationV1beta1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1beta1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1ClusterRoleBindingList watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1ClusterRoleBindingList(params *WatchRbacAuthorizationV1beta1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1beta1ClusterRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1ClusterRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1ClusterRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1ClusterRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1ClusterRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1ClusterRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1ClusterRoleList watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1ClusterRoleList(params *WatchRbacAuthorizationV1beta1ClusterRoleListParams) (*WatchRbacAuthorizationV1beta1ClusterRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1ClusterRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1ClusterRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1ClusterRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1ClusterRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1ClusterRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1NamespacedRole watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1beta1NamespacedRole(params *WatchRbacAuthorizationV1beta1NamespacedRoleParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1NamespacedRoleBinding watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1beta1NamespacedRoleBinding(params *WatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1NamespacedRoleBindingList watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1beta1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1NamespacedRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1NamespacedRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1NamespacedRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1NamespacedRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1NamespacedRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1NamespacedRoleList watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1NamespacedRoleList(params *WatchRbacAuthorizationV1beta1NamespacedRoleListParams) (*WatchRbacAuthorizationV1beta1NamespacedRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1NamespacedRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1NamespacedRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1NamespacedRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1NamespacedRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1NamespacedRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1beta1RoleListForAllNamespaces watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1beta1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1beta1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1beta1RoleListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1beta1RoleListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1beta1RoleListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1beta1/watch/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1beta1RoleListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1beta1RoleListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1beta1RoleListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
