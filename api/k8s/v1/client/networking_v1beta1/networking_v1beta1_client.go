// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networking v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networking v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetworkingV1beta1IngressClass(params *CreateNetworkingV1beta1IngressClassParams) (*CreateNetworkingV1beta1IngressClassOK, *CreateNetworkingV1beta1IngressClassCreated, *CreateNetworkingV1beta1IngressClassAccepted, error)

	CreateNetworkingV1beta1NamespacedIngress(params *CreateNetworkingV1beta1NamespacedIngressParams) (*CreateNetworkingV1beta1NamespacedIngressOK, *CreateNetworkingV1beta1NamespacedIngressCreated, *CreateNetworkingV1beta1NamespacedIngressAccepted, error)

	DeleteNetworkingV1beta1CollectionIngressClass(params *DeleteNetworkingV1beta1CollectionIngressClassParams) (*DeleteNetworkingV1beta1CollectionIngressClassOK, error)

	DeleteNetworkingV1beta1CollectionNamespacedIngress(params *DeleteNetworkingV1beta1CollectionNamespacedIngressParams) (*DeleteNetworkingV1beta1CollectionNamespacedIngressOK, error)

	DeleteNetworkingV1beta1IngressClass(params *DeleteNetworkingV1beta1IngressClassParams) (*DeleteNetworkingV1beta1IngressClassOK, *DeleteNetworkingV1beta1IngressClassAccepted, error)

	DeleteNetworkingV1beta1NamespacedIngress(params *DeleteNetworkingV1beta1NamespacedIngressParams) (*DeleteNetworkingV1beta1NamespacedIngressOK, *DeleteNetworkingV1beta1NamespacedIngressAccepted, error)

	GetNetworkingV1beta1APIResources(params *GetNetworkingV1beta1APIResourcesParams) (*GetNetworkingV1beta1APIResourcesOK, error)

	ListNetworkingV1beta1IngressClass(params *ListNetworkingV1beta1IngressClassParams) (*ListNetworkingV1beta1IngressClassOK, error)

	ListNetworkingV1beta1IngressForAllNamespaces(params *ListNetworkingV1beta1IngressForAllNamespacesParams) (*ListNetworkingV1beta1IngressForAllNamespacesOK, error)

	ListNetworkingV1beta1NamespacedIngress(params *ListNetworkingV1beta1NamespacedIngressParams) (*ListNetworkingV1beta1NamespacedIngressOK, error)

	PatchNetworkingV1beta1IngressClass(params *PatchNetworkingV1beta1IngressClassParams) (*PatchNetworkingV1beta1IngressClassOK, error)

	PatchNetworkingV1beta1NamespacedIngress(params *PatchNetworkingV1beta1NamespacedIngressParams) (*PatchNetworkingV1beta1NamespacedIngressOK, error)

	PatchNetworkingV1beta1NamespacedIngressStatus(params *PatchNetworkingV1beta1NamespacedIngressStatusParams) (*PatchNetworkingV1beta1NamespacedIngressStatusOK, error)

	ReadNetworkingV1beta1IngressClass(params *ReadNetworkingV1beta1IngressClassParams) (*ReadNetworkingV1beta1IngressClassOK, error)

	ReadNetworkingV1beta1NamespacedIngress(params *ReadNetworkingV1beta1NamespacedIngressParams) (*ReadNetworkingV1beta1NamespacedIngressOK, error)

	ReadNetworkingV1beta1NamespacedIngressStatus(params *ReadNetworkingV1beta1NamespacedIngressStatusParams) (*ReadNetworkingV1beta1NamespacedIngressStatusOK, error)

	ReplaceNetworkingV1beta1IngressClass(params *ReplaceNetworkingV1beta1IngressClassParams) (*ReplaceNetworkingV1beta1IngressClassOK, *ReplaceNetworkingV1beta1IngressClassCreated, error)

	ReplaceNetworkingV1beta1NamespacedIngress(params *ReplaceNetworkingV1beta1NamespacedIngressParams) (*ReplaceNetworkingV1beta1NamespacedIngressOK, *ReplaceNetworkingV1beta1NamespacedIngressCreated, error)

	ReplaceNetworkingV1beta1NamespacedIngressStatus(params *ReplaceNetworkingV1beta1NamespacedIngressStatusParams) (*ReplaceNetworkingV1beta1NamespacedIngressStatusOK, *ReplaceNetworkingV1beta1NamespacedIngressStatusCreated, error)

	WatchNetworkingV1beta1IngressClass(params *WatchNetworkingV1beta1IngressClassParams) (*WatchNetworkingV1beta1IngressClassOK, error)

	WatchNetworkingV1beta1IngressClassList(params *WatchNetworkingV1beta1IngressClassListParams) (*WatchNetworkingV1beta1IngressClassListOK, error)

	WatchNetworkingV1beta1IngressListForAllNamespaces(params *WatchNetworkingV1beta1IngressListForAllNamespacesParams) (*WatchNetworkingV1beta1IngressListForAllNamespacesOK, error)

	WatchNetworkingV1beta1NamespacedIngress(params *WatchNetworkingV1beta1NamespacedIngressParams) (*WatchNetworkingV1beta1NamespacedIngressOK, error)

	WatchNetworkingV1beta1NamespacedIngressList(params *WatchNetworkingV1beta1NamespacedIngressListParams) (*WatchNetworkingV1beta1NamespacedIngressListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNetworkingV1beta1IngressClass create an IngressClass
*/
func (a *Client) CreateNetworkingV1beta1IngressClass(params *CreateNetworkingV1beta1IngressClassParams) (*CreateNetworkingV1beta1IngressClassOK, *CreateNetworkingV1beta1IngressClassCreated, *CreateNetworkingV1beta1IngressClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkingV1beta1IngressClass",
		Method:             "POST",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkingV1beta1IngressClassOK:
		return value, nil, nil, nil
	case *CreateNetworkingV1beta1IngressClassCreated:
		return nil, value, nil, nil
	case *CreateNetworkingV1beta1IngressClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNetworkingV1beta1NamespacedIngress create an Ingress
*/
func (a *Client) CreateNetworkingV1beta1NamespacedIngress(params *CreateNetworkingV1beta1NamespacedIngressParams) (*CreateNetworkingV1beta1NamespacedIngressOK, *CreateNetworkingV1beta1NamespacedIngressCreated, *CreateNetworkingV1beta1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkingV1beta1NamespacedIngress",
		Method:             "POST",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetworkingV1beta1NamespacedIngressOK:
		return value, nil, nil, nil
	case *CreateNetworkingV1beta1NamespacedIngressCreated:
		return nil, value, nil, nil
	case *CreateNetworkingV1beta1NamespacedIngressAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1beta1CollectionIngressClass delete collection of IngressClass
*/
func (a *Client) DeleteNetworkingV1beta1CollectionIngressClass(params *DeleteNetworkingV1beta1CollectionIngressClassParams) (*DeleteNetworkingV1beta1CollectionIngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1beta1CollectionIngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1beta1CollectionIngressClass",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1beta1CollectionIngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkingV1beta1CollectionIngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkingV1beta1CollectionIngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1beta1CollectionNamespacedIngress delete collection of Ingress
*/
func (a *Client) DeleteNetworkingV1beta1CollectionNamespacedIngress(params *DeleteNetworkingV1beta1CollectionNamespacedIngressParams) (*DeleteNetworkingV1beta1CollectionNamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1beta1CollectionNamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1beta1CollectionNamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1beta1CollectionNamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkingV1beta1CollectionNamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNetworkingV1beta1CollectionNamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1beta1IngressClass delete an IngressClass
*/
func (a *Client) DeleteNetworkingV1beta1IngressClass(params *DeleteNetworkingV1beta1IngressClassParams) (*DeleteNetworkingV1beta1IngressClassOK, *DeleteNetworkingV1beta1IngressClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1beta1IngressClass",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNetworkingV1beta1IngressClassOK:
		return value, nil, nil
	case *DeleteNetworkingV1beta1IngressClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNetworkingV1beta1NamespacedIngress delete an Ingress
*/
func (a *Client) DeleteNetworkingV1beta1NamespacedIngress(params *DeleteNetworkingV1beta1NamespacedIngressParams) (*DeleteNetworkingV1beta1NamespacedIngressOK, *DeleteNetworkingV1beta1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkingV1beta1NamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNetworkingV1beta1NamespacedIngressOK:
		return value, nil, nil
	case *DeleteNetworkingV1beta1NamespacedIngressAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNetworkingV1beta1APIResources get available resources
*/
func (a *Client) GetNetworkingV1beta1APIResources(params *GetNetworkingV1beta1APIResourcesParams) (*GetNetworkingV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkingV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkingV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkingV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkingV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNetworkingV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1beta1IngressClass list or watch objects of kind IngressClass
*/
func (a *Client) ListNetworkingV1beta1IngressClass(params *ListNetworkingV1beta1IngressClassParams) (*ListNetworkingV1beta1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1beta1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1beta1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1beta1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1beta1IngressForAllNamespaces list or watch objects of kind Ingress
*/
func (a *Client) ListNetworkingV1beta1IngressForAllNamespaces(params *ListNetworkingV1beta1IngressForAllNamespacesParams) (*ListNetworkingV1beta1IngressForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1beta1IngressForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1beta1IngressForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1beta1IngressForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1beta1IngressForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1beta1IngressForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNetworkingV1beta1NamespacedIngress list or watch objects of kind Ingress
*/
func (a *Client) ListNetworkingV1beta1NamespacedIngress(params *ListNetworkingV1beta1NamespacedIngressParams) (*ListNetworkingV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkingV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNetworkingV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNetworkingV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1beta1IngressClass partially update the specified IngressClass
*/
func (a *Client) PatchNetworkingV1beta1IngressClass(params *PatchNetworkingV1beta1IngressClassParams) (*PatchNetworkingV1beta1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1beta1IngressClass",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1beta1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1beta1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1beta1NamespacedIngress partially update the specified Ingress
*/
func (a *Client) PatchNetworkingV1beta1NamespacedIngress(params *PatchNetworkingV1beta1NamespacedIngressParams) (*PatchNetworkingV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1beta1NamespacedIngress",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNetworkingV1beta1NamespacedIngressStatus partially update status of the specified Ingress
*/
func (a *Client) PatchNetworkingV1beta1NamespacedIngressStatus(params *PatchNetworkingV1beta1NamespacedIngressStatusParams) (*PatchNetworkingV1beta1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNetworkingV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNetworkingV1beta1NamespacedIngressStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNetworkingV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNetworkingV1beta1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNetworkingV1beta1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1beta1IngressClass read the specified IngressClass
*/
func (a *Client) ReadNetworkingV1beta1IngressClass(params *ReadNetworkingV1beta1IngressClassParams) (*ReadNetworkingV1beta1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1beta1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1beta1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1beta1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1beta1NamespacedIngress read the specified Ingress
*/
func (a *Client) ReadNetworkingV1beta1NamespacedIngress(params *ReadNetworkingV1beta1NamespacedIngressParams) (*ReadNetworkingV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNetworkingV1beta1NamespacedIngressStatus read status of the specified Ingress
*/
func (a *Client) ReadNetworkingV1beta1NamespacedIngressStatus(params *ReadNetworkingV1beta1NamespacedIngressStatusParams) (*ReadNetworkingV1beta1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNetworkingV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNetworkingV1beta1NamespacedIngressStatus",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNetworkingV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNetworkingV1beta1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNetworkingV1beta1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1beta1IngressClass replace the specified IngressClass
*/
func (a *Client) ReplaceNetworkingV1beta1IngressClass(params *ReplaceNetworkingV1beta1IngressClassParams) (*ReplaceNetworkingV1beta1IngressClassOK, *ReplaceNetworkingV1beta1IngressClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1beta1IngressClass",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1beta1IngressClassOK:
		return value, nil, nil
	case *ReplaceNetworkingV1beta1IngressClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1beta1NamespacedIngress replace the specified Ingress
*/
func (a *Client) ReplaceNetworkingV1beta1NamespacedIngress(params *ReplaceNetworkingV1beta1NamespacedIngressParams) (*ReplaceNetworkingV1beta1NamespacedIngressOK, *ReplaceNetworkingV1beta1NamespacedIngressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1beta1NamespacedIngress",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1beta1NamespacedIngressOK:
		return value, nil, nil
	case *ReplaceNetworkingV1beta1NamespacedIngressCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNetworkingV1beta1NamespacedIngressStatus replace status of the specified Ingress
*/
func (a *Client) ReplaceNetworkingV1beta1NamespacedIngressStatus(params *ReplaceNetworkingV1beta1NamespacedIngressStatusParams) (*ReplaceNetworkingV1beta1NamespacedIngressStatusOK, *ReplaceNetworkingV1beta1NamespacedIngressStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNetworkingV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNetworkingV1beta1NamespacedIngressStatus",
		Method:             "PUT",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNetworkingV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNetworkingV1beta1NamespacedIngressStatusOK:
		return value, nil, nil
	case *ReplaceNetworkingV1beta1NamespacedIngressStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for networking_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1beta1IngressClass watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNetworkingV1beta1IngressClass(params *WatchNetworkingV1beta1IngressClassParams) (*WatchNetworkingV1beta1IngressClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1beta1IngressClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1beta1IngressClass",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/watch/ingressclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1beta1IngressClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1beta1IngressClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1beta1IngressClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1beta1IngressClassList watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1beta1IngressClassList(params *WatchNetworkingV1beta1IngressClassListParams) (*WatchNetworkingV1beta1IngressClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1beta1IngressClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1beta1IngressClassList",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/watch/ingressclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1beta1IngressClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1beta1IngressClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1beta1IngressClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1beta1IngressListForAllNamespaces watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1beta1IngressListForAllNamespaces(params *WatchNetworkingV1beta1IngressListForAllNamespacesParams) (*WatchNetworkingV1beta1IngressListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1beta1IngressListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1beta1IngressListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/watch/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1beta1IngressListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1beta1IngressListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1beta1IngressListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1beta1NamespacedIngress watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNetworkingV1beta1NamespacedIngress(params *WatchNetworkingV1beta1NamespacedIngressParams) (*WatchNetworkingV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNetworkingV1beta1NamespacedIngressList watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNetworkingV1beta1NamespacedIngressList(params *WatchNetworkingV1beta1NamespacedIngressListParams) (*WatchNetworkingV1beta1NamespacedIngressListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNetworkingV1beta1NamespacedIngressListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNetworkingV1beta1NamespacedIngressList",
		Method:             "GET",
		PathPattern:        "/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNetworkingV1beta1NamespacedIngressListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNetworkingV1beta1NamespacedIngressListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNetworkingV1beta1NamespacedIngressList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
