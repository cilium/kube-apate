// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package extensions_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new extensions v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for extensions v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateExtensionsV1beta1NamespacedIngress(params *CreateExtensionsV1beta1NamespacedIngressParams) (*CreateExtensionsV1beta1NamespacedIngressOK, *CreateExtensionsV1beta1NamespacedIngressCreated, *CreateExtensionsV1beta1NamespacedIngressAccepted, error)

	DeleteExtensionsV1beta1CollectionNamespacedIngress(params *DeleteExtensionsV1beta1CollectionNamespacedIngressParams) (*DeleteExtensionsV1beta1CollectionNamespacedIngressOK, error)

	DeleteExtensionsV1beta1NamespacedIngress(params *DeleteExtensionsV1beta1NamespacedIngressParams) (*DeleteExtensionsV1beta1NamespacedIngressOK, *DeleteExtensionsV1beta1NamespacedIngressAccepted, error)

	GetExtensionsV1beta1APIResources(params *GetExtensionsV1beta1APIResourcesParams) (*GetExtensionsV1beta1APIResourcesOK, error)

	ListExtensionsV1beta1IngressForAllNamespaces(params *ListExtensionsV1beta1IngressForAllNamespacesParams) (*ListExtensionsV1beta1IngressForAllNamespacesOK, error)

	ListExtensionsV1beta1NamespacedIngress(params *ListExtensionsV1beta1NamespacedIngressParams) (*ListExtensionsV1beta1NamespacedIngressOK, error)

	PatchExtensionsV1beta1NamespacedIngress(params *PatchExtensionsV1beta1NamespacedIngressParams) (*PatchExtensionsV1beta1NamespacedIngressOK, error)

	PatchExtensionsV1beta1NamespacedIngressStatus(params *PatchExtensionsV1beta1NamespacedIngressStatusParams) (*PatchExtensionsV1beta1NamespacedIngressStatusOK, error)

	ReadExtensionsV1beta1NamespacedIngress(params *ReadExtensionsV1beta1NamespacedIngressParams) (*ReadExtensionsV1beta1NamespacedIngressOK, error)

	ReadExtensionsV1beta1NamespacedIngressStatus(params *ReadExtensionsV1beta1NamespacedIngressStatusParams) (*ReadExtensionsV1beta1NamespacedIngressStatusOK, error)

	ReplaceExtensionsV1beta1NamespacedIngress(params *ReplaceExtensionsV1beta1NamespacedIngressParams) (*ReplaceExtensionsV1beta1NamespacedIngressOK, *ReplaceExtensionsV1beta1NamespacedIngressCreated, error)

	ReplaceExtensionsV1beta1NamespacedIngressStatus(params *ReplaceExtensionsV1beta1NamespacedIngressStatusParams) (*ReplaceExtensionsV1beta1NamespacedIngressStatusOK, *ReplaceExtensionsV1beta1NamespacedIngressStatusCreated, error)

	WatchExtensionsV1beta1IngressListForAllNamespaces(params *WatchExtensionsV1beta1IngressListForAllNamespacesParams) (*WatchExtensionsV1beta1IngressListForAllNamespacesOK, error)

	WatchExtensionsV1beta1NamespacedIngress(params *WatchExtensionsV1beta1NamespacedIngressParams) (*WatchExtensionsV1beta1NamespacedIngressOK, error)

	WatchExtensionsV1beta1NamespacedIngressList(params *WatchExtensionsV1beta1NamespacedIngressListParams) (*WatchExtensionsV1beta1NamespacedIngressListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateExtensionsV1beta1NamespacedIngress create an Ingress
*/
func (a *Client) CreateExtensionsV1beta1NamespacedIngress(params *CreateExtensionsV1beta1NamespacedIngressParams) (*CreateExtensionsV1beta1NamespacedIngressOK, *CreateExtensionsV1beta1NamespacedIngressCreated, *CreateExtensionsV1beta1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createExtensionsV1beta1NamespacedIngress",
		Method:             "POST",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateExtensionsV1beta1NamespacedIngressOK:
		return value, nil, nil, nil
	case *CreateExtensionsV1beta1NamespacedIngressCreated:
		return nil, value, nil, nil
	case *CreateExtensionsV1beta1NamespacedIngressAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extensions_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteExtensionsV1beta1CollectionNamespacedIngress delete collection of Ingress
*/
func (a *Client) DeleteExtensionsV1beta1CollectionNamespacedIngress(params *DeleteExtensionsV1beta1CollectionNamespacedIngressParams) (*DeleteExtensionsV1beta1CollectionNamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExtensionsV1beta1CollectionNamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExtensionsV1beta1CollectionNamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteExtensionsV1beta1CollectionNamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExtensionsV1beta1CollectionNamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExtensionsV1beta1CollectionNamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteExtensionsV1beta1NamespacedIngress delete an Ingress
*/
func (a *Client) DeleteExtensionsV1beta1NamespacedIngress(params *DeleteExtensionsV1beta1NamespacedIngressParams) (*DeleteExtensionsV1beta1NamespacedIngressOK, *DeleteExtensionsV1beta1NamespacedIngressAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteExtensionsV1beta1NamespacedIngress",
		Method:             "DELETE",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteExtensionsV1beta1NamespacedIngressOK:
		return value, nil, nil
	case *DeleteExtensionsV1beta1NamespacedIngressAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extensions_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetExtensionsV1beta1APIResources get available resources
*/
func (a *Client) GetExtensionsV1beta1APIResources(params *GetExtensionsV1beta1APIResourcesParams) (*GetExtensionsV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExtensionsV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExtensionsV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExtensionsV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExtensionsV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListExtensionsV1beta1IngressForAllNamespaces list or watch objects of kind Ingress
*/
func (a *Client) ListExtensionsV1beta1IngressForAllNamespaces(params *ListExtensionsV1beta1IngressForAllNamespacesParams) (*ListExtensionsV1beta1IngressForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExtensionsV1beta1IngressForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listExtensionsV1beta1IngressForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListExtensionsV1beta1IngressForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExtensionsV1beta1IngressForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExtensionsV1beta1IngressForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListExtensionsV1beta1NamespacedIngress list or watch objects of kind Ingress
*/
func (a *Client) ListExtensionsV1beta1NamespacedIngress(params *ListExtensionsV1beta1NamespacedIngressParams) (*ListExtensionsV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listExtensionsV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExtensionsV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listExtensionsV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchExtensionsV1beta1NamespacedIngress partially update the specified Ingress
*/
func (a *Client) PatchExtensionsV1beta1NamespacedIngress(params *PatchExtensionsV1beta1NamespacedIngressParams) (*PatchExtensionsV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchExtensionsV1beta1NamespacedIngress",
		Method:             "PATCH",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchExtensionsV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchExtensionsV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchExtensionsV1beta1NamespacedIngressStatus partially update status of the specified Ingress
*/
func (a *Client) PatchExtensionsV1beta1NamespacedIngressStatus(params *PatchExtensionsV1beta1NamespacedIngressStatusParams) (*PatchExtensionsV1beta1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchExtensionsV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchExtensionsV1beta1NamespacedIngressStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchExtensionsV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchExtensionsV1beta1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchExtensionsV1beta1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadExtensionsV1beta1NamespacedIngress read the specified Ingress
*/
func (a *Client) ReadExtensionsV1beta1NamespacedIngress(params *ReadExtensionsV1beta1NamespacedIngressParams) (*ReadExtensionsV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readExtensionsV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadExtensionsV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readExtensionsV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadExtensionsV1beta1NamespacedIngressStatus read status of the specified Ingress
*/
func (a *Client) ReadExtensionsV1beta1NamespacedIngressStatus(params *ReadExtensionsV1beta1NamespacedIngressStatusParams) (*ReadExtensionsV1beta1NamespacedIngressStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadExtensionsV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readExtensionsV1beta1NamespacedIngressStatus",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadExtensionsV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadExtensionsV1beta1NamespacedIngressStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readExtensionsV1beta1NamespacedIngressStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceExtensionsV1beta1NamespacedIngress replace the specified Ingress
*/
func (a *Client) ReplaceExtensionsV1beta1NamespacedIngress(params *ReplaceExtensionsV1beta1NamespacedIngressParams) (*ReplaceExtensionsV1beta1NamespacedIngressOK, *ReplaceExtensionsV1beta1NamespacedIngressCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceExtensionsV1beta1NamespacedIngress",
		Method:             "PUT",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceExtensionsV1beta1NamespacedIngressOK:
		return value, nil, nil
	case *ReplaceExtensionsV1beta1NamespacedIngressCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extensions_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceExtensionsV1beta1NamespacedIngressStatus replace status of the specified Ingress
*/
func (a *Client) ReplaceExtensionsV1beta1NamespacedIngressStatus(params *ReplaceExtensionsV1beta1NamespacedIngressStatusParams) (*ReplaceExtensionsV1beta1NamespacedIngressStatusOK, *ReplaceExtensionsV1beta1NamespacedIngressStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceExtensionsV1beta1NamespacedIngressStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceExtensionsV1beta1NamespacedIngressStatus",
		Method:             "PUT",
		PathPattern:        "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceExtensionsV1beta1NamespacedIngressStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceExtensionsV1beta1NamespacedIngressStatusOK:
		return value, nil, nil
	case *ReplaceExtensionsV1beta1NamespacedIngressStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extensions_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchExtensionsV1beta1IngressListForAllNamespaces watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchExtensionsV1beta1IngressListForAllNamespaces(params *WatchExtensionsV1beta1IngressListForAllNamespacesParams) (*WatchExtensionsV1beta1IngressListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchExtensionsV1beta1IngressListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchExtensionsV1beta1IngressListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/watch/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchExtensionsV1beta1IngressListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchExtensionsV1beta1IngressListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchExtensionsV1beta1IngressListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchExtensionsV1beta1NamespacedIngress watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchExtensionsV1beta1NamespacedIngress(params *WatchExtensionsV1beta1NamespacedIngressParams) (*WatchExtensionsV1beta1NamespacedIngressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchExtensionsV1beta1NamespacedIngressParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchExtensionsV1beta1NamespacedIngress",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchExtensionsV1beta1NamespacedIngressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchExtensionsV1beta1NamespacedIngressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchExtensionsV1beta1NamespacedIngress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchExtensionsV1beta1NamespacedIngressList watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchExtensionsV1beta1NamespacedIngressList(params *WatchExtensionsV1beta1NamespacedIngressListParams) (*WatchExtensionsV1beta1NamespacedIngressListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchExtensionsV1beta1NamespacedIngressListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchExtensionsV1beta1NamespacedIngressList",
		Method:             "GET",
		PathPattern:        "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchExtensionsV1beta1NamespacedIngressListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchExtensionsV1beta1NamespacedIngressListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchExtensionsV1beta1NamespacedIngressList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
