// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStorageV1beta1CSIDriver(params *CreateStorageV1beta1CSIDriverParams) (*CreateStorageV1beta1CSIDriverOK, *CreateStorageV1beta1CSIDriverCreated, *CreateStorageV1beta1CSIDriverAccepted, error)

	CreateStorageV1beta1CSINode(params *CreateStorageV1beta1CSINodeParams) (*CreateStorageV1beta1CSINodeOK, *CreateStorageV1beta1CSINodeCreated, *CreateStorageV1beta1CSINodeAccepted, error)

	CreateStorageV1beta1StorageClass(params *CreateStorageV1beta1StorageClassParams) (*CreateStorageV1beta1StorageClassOK, *CreateStorageV1beta1StorageClassCreated, *CreateStorageV1beta1StorageClassAccepted, error)

	CreateStorageV1beta1VolumeAttachment(params *CreateStorageV1beta1VolumeAttachmentParams) (*CreateStorageV1beta1VolumeAttachmentOK, *CreateStorageV1beta1VolumeAttachmentCreated, *CreateStorageV1beta1VolumeAttachmentAccepted, error)

	DeleteStorageV1beta1CSIDriver(params *DeleteStorageV1beta1CSIDriverParams) (*DeleteStorageV1beta1CSIDriverOK, *DeleteStorageV1beta1CSIDriverAccepted, error)

	DeleteStorageV1beta1CSINode(params *DeleteStorageV1beta1CSINodeParams) (*DeleteStorageV1beta1CSINodeOK, *DeleteStorageV1beta1CSINodeAccepted, error)

	DeleteStorageV1beta1CollectionCSIDriver(params *DeleteStorageV1beta1CollectionCSIDriverParams) (*DeleteStorageV1beta1CollectionCSIDriverOK, error)

	DeleteStorageV1beta1CollectionCSINode(params *DeleteStorageV1beta1CollectionCSINodeParams) (*DeleteStorageV1beta1CollectionCSINodeOK, error)

	DeleteStorageV1beta1CollectionStorageClass(params *DeleteStorageV1beta1CollectionStorageClassParams) (*DeleteStorageV1beta1CollectionStorageClassOK, error)

	DeleteStorageV1beta1CollectionVolumeAttachment(params *DeleteStorageV1beta1CollectionVolumeAttachmentParams) (*DeleteStorageV1beta1CollectionVolumeAttachmentOK, error)

	DeleteStorageV1beta1StorageClass(params *DeleteStorageV1beta1StorageClassParams) (*DeleteStorageV1beta1StorageClassOK, *DeleteStorageV1beta1StorageClassAccepted, error)

	DeleteStorageV1beta1VolumeAttachment(params *DeleteStorageV1beta1VolumeAttachmentParams) (*DeleteStorageV1beta1VolumeAttachmentOK, *DeleteStorageV1beta1VolumeAttachmentAccepted, error)

	GetStorageV1beta1APIResources(params *GetStorageV1beta1APIResourcesParams) (*GetStorageV1beta1APIResourcesOK, error)

	ListStorageV1beta1CSIDriver(params *ListStorageV1beta1CSIDriverParams) (*ListStorageV1beta1CSIDriverOK, error)

	ListStorageV1beta1CSINode(params *ListStorageV1beta1CSINodeParams) (*ListStorageV1beta1CSINodeOK, error)

	ListStorageV1beta1StorageClass(params *ListStorageV1beta1StorageClassParams) (*ListStorageV1beta1StorageClassOK, error)

	ListStorageV1beta1VolumeAttachment(params *ListStorageV1beta1VolumeAttachmentParams) (*ListStorageV1beta1VolumeAttachmentOK, error)

	PatchStorageV1beta1CSIDriver(params *PatchStorageV1beta1CSIDriverParams) (*PatchStorageV1beta1CSIDriverOK, error)

	PatchStorageV1beta1CSINode(params *PatchStorageV1beta1CSINodeParams) (*PatchStorageV1beta1CSINodeOK, error)

	PatchStorageV1beta1StorageClass(params *PatchStorageV1beta1StorageClassParams) (*PatchStorageV1beta1StorageClassOK, error)

	PatchStorageV1beta1VolumeAttachment(params *PatchStorageV1beta1VolumeAttachmentParams) (*PatchStorageV1beta1VolumeAttachmentOK, error)

	ReadStorageV1beta1CSIDriver(params *ReadStorageV1beta1CSIDriverParams) (*ReadStorageV1beta1CSIDriverOK, error)

	ReadStorageV1beta1CSINode(params *ReadStorageV1beta1CSINodeParams) (*ReadStorageV1beta1CSINodeOK, error)

	ReadStorageV1beta1StorageClass(params *ReadStorageV1beta1StorageClassParams) (*ReadStorageV1beta1StorageClassOK, error)

	ReadStorageV1beta1VolumeAttachment(params *ReadStorageV1beta1VolumeAttachmentParams) (*ReadStorageV1beta1VolumeAttachmentOK, error)

	ReplaceStorageV1beta1CSIDriver(params *ReplaceStorageV1beta1CSIDriverParams) (*ReplaceStorageV1beta1CSIDriverOK, *ReplaceStorageV1beta1CSIDriverCreated, error)

	ReplaceStorageV1beta1CSINode(params *ReplaceStorageV1beta1CSINodeParams) (*ReplaceStorageV1beta1CSINodeOK, *ReplaceStorageV1beta1CSINodeCreated, error)

	ReplaceStorageV1beta1StorageClass(params *ReplaceStorageV1beta1StorageClassParams) (*ReplaceStorageV1beta1StorageClassOK, *ReplaceStorageV1beta1StorageClassCreated, error)

	ReplaceStorageV1beta1VolumeAttachment(params *ReplaceStorageV1beta1VolumeAttachmentParams) (*ReplaceStorageV1beta1VolumeAttachmentOK, *ReplaceStorageV1beta1VolumeAttachmentCreated, error)

	WatchStorageV1beta1CSIDriver(params *WatchStorageV1beta1CSIDriverParams) (*WatchStorageV1beta1CSIDriverOK, error)

	WatchStorageV1beta1CSIDriverList(params *WatchStorageV1beta1CSIDriverListParams) (*WatchStorageV1beta1CSIDriverListOK, error)

	WatchStorageV1beta1CSINode(params *WatchStorageV1beta1CSINodeParams) (*WatchStorageV1beta1CSINodeOK, error)

	WatchStorageV1beta1CSINodeList(params *WatchStorageV1beta1CSINodeListParams) (*WatchStorageV1beta1CSINodeListOK, error)

	WatchStorageV1beta1StorageClass(params *WatchStorageV1beta1StorageClassParams) (*WatchStorageV1beta1StorageClassOK, error)

	WatchStorageV1beta1StorageClassList(params *WatchStorageV1beta1StorageClassListParams) (*WatchStorageV1beta1StorageClassListOK, error)

	WatchStorageV1beta1VolumeAttachment(params *WatchStorageV1beta1VolumeAttachmentParams) (*WatchStorageV1beta1VolumeAttachmentOK, error)

	WatchStorageV1beta1VolumeAttachmentList(params *WatchStorageV1beta1VolumeAttachmentListParams) (*WatchStorageV1beta1VolumeAttachmentListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateStorageV1beta1CSIDriver create a CSIDriver
*/
func (a *Client) CreateStorageV1beta1CSIDriver(params *CreateStorageV1beta1CSIDriverParams) (*CreateStorageV1beta1CSIDriverOK, *CreateStorageV1beta1CSIDriverCreated, *CreateStorageV1beta1CSIDriverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1beta1CSIDriver",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1beta1CSIDriverOK:
		return value, nil, nil, nil
	case *CreateStorageV1beta1CSIDriverCreated:
		return nil, value, nil, nil
	case *CreateStorageV1beta1CSIDriverAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1beta1CSINode create a CSINode
*/
func (a *Client) CreateStorageV1beta1CSINode(params *CreateStorageV1beta1CSINodeParams) (*CreateStorageV1beta1CSINodeOK, *CreateStorageV1beta1CSINodeCreated, *CreateStorageV1beta1CSINodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1beta1CSINode",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1beta1CSINodeOK:
		return value, nil, nil, nil
	case *CreateStorageV1beta1CSINodeCreated:
		return nil, value, nil, nil
	case *CreateStorageV1beta1CSINodeAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1beta1StorageClass create a StorageClass
*/
func (a *Client) CreateStorageV1beta1StorageClass(params *CreateStorageV1beta1StorageClassParams) (*CreateStorageV1beta1StorageClassOK, *CreateStorageV1beta1StorageClassCreated, *CreateStorageV1beta1StorageClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1beta1StorageClass",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1beta1StorageClassOK:
		return value, nil, nil, nil
	case *CreateStorageV1beta1StorageClassCreated:
		return nil, value, nil, nil
	case *CreateStorageV1beta1StorageClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1beta1VolumeAttachment create a VolumeAttachment
*/
func (a *Client) CreateStorageV1beta1VolumeAttachment(params *CreateStorageV1beta1VolumeAttachmentParams) (*CreateStorageV1beta1VolumeAttachmentOK, *CreateStorageV1beta1VolumeAttachmentCreated, *CreateStorageV1beta1VolumeAttachmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1beta1VolumeAttachment",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1beta1VolumeAttachmentOK:
		return value, nil, nil, nil
	case *CreateStorageV1beta1VolumeAttachmentCreated:
		return nil, value, nil, nil
	case *CreateStorageV1beta1VolumeAttachmentAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CSIDriver delete a CSIDriver
*/
func (a *Client) DeleteStorageV1beta1CSIDriver(params *DeleteStorageV1beta1CSIDriverParams) (*DeleteStorageV1beta1CSIDriverOK, *DeleteStorageV1beta1CSIDriverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CSIDriver",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1beta1CSIDriverOK:
		return value, nil, nil
	case *DeleteStorageV1beta1CSIDriverAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CSINode delete a CSINode
*/
func (a *Client) DeleteStorageV1beta1CSINode(params *DeleteStorageV1beta1CSINodeParams) (*DeleteStorageV1beta1CSINodeOK, *DeleteStorageV1beta1CSINodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CSINode",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1beta1CSINodeOK:
		return value, nil, nil
	case *DeleteStorageV1beta1CSINodeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CollectionCSIDriver delete collection of CSIDriver
*/
func (a *Client) DeleteStorageV1beta1CollectionCSIDriver(params *DeleteStorageV1beta1CollectionCSIDriverParams) (*DeleteStorageV1beta1CollectionCSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CollectionCSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CollectionCSIDriver",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CollectionCSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1beta1CollectionCSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1beta1CollectionCSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CollectionCSINode delete collection of CSINode
*/
func (a *Client) DeleteStorageV1beta1CollectionCSINode(params *DeleteStorageV1beta1CollectionCSINodeParams) (*DeleteStorageV1beta1CollectionCSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CollectionCSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CollectionCSINode",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CollectionCSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1beta1CollectionCSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1beta1CollectionCSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CollectionStorageClass delete collection of StorageClass
*/
func (a *Client) DeleteStorageV1beta1CollectionStorageClass(params *DeleteStorageV1beta1CollectionStorageClassParams) (*DeleteStorageV1beta1CollectionStorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CollectionStorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CollectionStorageClass",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CollectionStorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1beta1CollectionStorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1beta1CollectionStorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1CollectionVolumeAttachment delete collection of VolumeAttachment
*/
func (a *Client) DeleteStorageV1beta1CollectionVolumeAttachment(params *DeleteStorageV1beta1CollectionVolumeAttachmentParams) (*DeleteStorageV1beta1CollectionVolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1CollectionVolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1CollectionVolumeAttachment",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1CollectionVolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1beta1CollectionVolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1beta1CollectionVolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1StorageClass delete a StorageClass
*/
func (a *Client) DeleteStorageV1beta1StorageClass(params *DeleteStorageV1beta1StorageClassParams) (*DeleteStorageV1beta1StorageClassOK, *DeleteStorageV1beta1StorageClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1StorageClass",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1beta1StorageClassOK:
		return value, nil, nil
	case *DeleteStorageV1beta1StorageClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1beta1VolumeAttachment delete a VolumeAttachment
*/
func (a *Client) DeleteStorageV1beta1VolumeAttachment(params *DeleteStorageV1beta1VolumeAttachmentParams) (*DeleteStorageV1beta1VolumeAttachmentOK, *DeleteStorageV1beta1VolumeAttachmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1beta1VolumeAttachment",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1beta1VolumeAttachmentOK:
		return value, nil, nil
	case *DeleteStorageV1beta1VolumeAttachmentAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStorageV1beta1APIResources get available resources
*/
func (a *Client) GetStorageV1beta1APIResources(params *GetStorageV1beta1APIResourcesParams) (*GetStorageV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorageV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStorageV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1beta1CSIDriver list or watch objects of kind CSIDriver
*/
func (a *Client) ListStorageV1beta1CSIDriver(params *ListStorageV1beta1CSIDriverParams) (*ListStorageV1beta1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1beta1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1beta1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1beta1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1beta1CSINode list or watch objects of kind CSINode
*/
func (a *Client) ListStorageV1beta1CSINode(params *ListStorageV1beta1CSINodeParams) (*ListStorageV1beta1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1beta1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1beta1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1beta1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1beta1StorageClass list or watch objects of kind StorageClass
*/
func (a *Client) ListStorageV1beta1StorageClass(params *ListStorageV1beta1StorageClassParams) (*ListStorageV1beta1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1beta1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1beta1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1beta1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1beta1VolumeAttachment list or watch objects of kind VolumeAttachment
*/
func (a *Client) ListStorageV1beta1VolumeAttachment(params *ListStorageV1beta1VolumeAttachmentParams) (*ListStorageV1beta1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1beta1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1beta1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1beta1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1beta1CSIDriver partially update the specified CSIDriver
*/
func (a *Client) PatchStorageV1beta1CSIDriver(params *PatchStorageV1beta1CSIDriverParams) (*PatchStorageV1beta1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1beta1CSIDriver",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1beta1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1beta1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1beta1CSINode partially update the specified CSINode
*/
func (a *Client) PatchStorageV1beta1CSINode(params *PatchStorageV1beta1CSINodeParams) (*PatchStorageV1beta1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1beta1CSINode",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1beta1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1beta1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1beta1StorageClass partially update the specified StorageClass
*/
func (a *Client) PatchStorageV1beta1StorageClass(params *PatchStorageV1beta1StorageClassParams) (*PatchStorageV1beta1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1beta1StorageClass",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1beta1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1beta1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1beta1VolumeAttachment partially update the specified VolumeAttachment
*/
func (a *Client) PatchStorageV1beta1VolumeAttachment(params *PatchStorageV1beta1VolumeAttachmentParams) (*PatchStorageV1beta1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1beta1VolumeAttachment",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1beta1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1beta1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1beta1CSIDriver read the specified CSIDriver
*/
func (a *Client) ReadStorageV1beta1CSIDriver(params *ReadStorageV1beta1CSIDriverParams) (*ReadStorageV1beta1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1beta1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1beta1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1beta1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1beta1CSINode read the specified CSINode
*/
func (a *Client) ReadStorageV1beta1CSINode(params *ReadStorageV1beta1CSINodeParams) (*ReadStorageV1beta1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1beta1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1beta1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1beta1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1beta1StorageClass read the specified StorageClass
*/
func (a *Client) ReadStorageV1beta1StorageClass(params *ReadStorageV1beta1StorageClassParams) (*ReadStorageV1beta1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1beta1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1beta1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1beta1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1beta1VolumeAttachment read the specified VolumeAttachment
*/
func (a *Client) ReadStorageV1beta1VolumeAttachment(params *ReadStorageV1beta1VolumeAttachmentParams) (*ReadStorageV1beta1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1beta1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1beta1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1beta1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1beta1CSIDriver replace the specified CSIDriver
*/
func (a *Client) ReplaceStorageV1beta1CSIDriver(params *ReplaceStorageV1beta1CSIDriverParams) (*ReplaceStorageV1beta1CSIDriverOK, *ReplaceStorageV1beta1CSIDriverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1beta1CSIDriver",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1beta1CSIDriverOK:
		return value, nil, nil
	case *ReplaceStorageV1beta1CSIDriverCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1beta1CSINode replace the specified CSINode
*/
func (a *Client) ReplaceStorageV1beta1CSINode(params *ReplaceStorageV1beta1CSINodeParams) (*ReplaceStorageV1beta1CSINodeOK, *ReplaceStorageV1beta1CSINodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1beta1CSINode",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1beta1CSINodeOK:
		return value, nil, nil
	case *ReplaceStorageV1beta1CSINodeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1beta1StorageClass replace the specified StorageClass
*/
func (a *Client) ReplaceStorageV1beta1StorageClass(params *ReplaceStorageV1beta1StorageClassParams) (*ReplaceStorageV1beta1StorageClassOK, *ReplaceStorageV1beta1StorageClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1beta1StorageClass",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1beta1StorageClassOK:
		return value, nil, nil
	case *ReplaceStorageV1beta1StorageClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1beta1VolumeAttachment replace the specified VolumeAttachment
*/
func (a *Client) ReplaceStorageV1beta1VolumeAttachment(params *ReplaceStorageV1beta1VolumeAttachmentParams) (*ReplaceStorageV1beta1VolumeAttachmentOK, *ReplaceStorageV1beta1VolumeAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1beta1VolumeAttachment",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1beta1VolumeAttachmentOK:
		return value, nil, nil
	case *ReplaceStorageV1beta1VolumeAttachmentCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1CSIDriver watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1beta1CSIDriver(params *WatchStorageV1beta1CSIDriverParams) (*WatchStorageV1beta1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1CSIDriverList watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1beta1CSIDriverList(params *WatchStorageV1beta1CSIDriverListParams) (*WatchStorageV1beta1CSIDriverListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1CSIDriverListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1CSIDriverList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1CSIDriverListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1CSIDriverListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1CSIDriverList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1CSINode watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1beta1CSINode(params *WatchStorageV1beta1CSINodeParams) (*WatchStorageV1beta1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1CSINodeList watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1beta1CSINodeList(params *WatchStorageV1beta1CSINodeListParams) (*WatchStorageV1beta1CSINodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1CSINodeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1CSINodeList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1CSINodeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1CSINodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1CSINodeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1StorageClass watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1beta1StorageClass(params *WatchStorageV1beta1StorageClassParams) (*WatchStorageV1beta1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1StorageClassList watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1beta1StorageClassList(params *WatchStorageV1beta1StorageClassListParams) (*WatchStorageV1beta1StorageClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1StorageClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1StorageClassList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1StorageClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1StorageClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1StorageClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1VolumeAttachment watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1beta1VolumeAttachment(params *WatchStorageV1beta1VolumeAttachmentParams) (*WatchStorageV1beta1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1beta1VolumeAttachmentList watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1beta1VolumeAttachmentList(params *WatchStorageV1beta1VolumeAttachmentListParams) (*WatchStorageV1beta1VolumeAttachmentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1beta1VolumeAttachmentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1beta1VolumeAttachmentList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1beta1/watch/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1beta1VolumeAttachmentListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1beta1VolumeAttachmentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1beta1VolumeAttachmentList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
