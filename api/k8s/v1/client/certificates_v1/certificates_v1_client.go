// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificates v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificates v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCertificatesV1CertificateSigningRequest(params *CreateCertificatesV1CertificateSigningRequestParams) (*CreateCertificatesV1CertificateSigningRequestOK, *CreateCertificatesV1CertificateSigningRequestCreated, *CreateCertificatesV1CertificateSigningRequestAccepted, error)

	DeleteCertificatesV1CertificateSigningRequest(params *DeleteCertificatesV1CertificateSigningRequestParams) (*DeleteCertificatesV1CertificateSigningRequestOK, *DeleteCertificatesV1CertificateSigningRequestAccepted, error)

	DeleteCertificatesV1CollectionCertificateSigningRequest(params *DeleteCertificatesV1CollectionCertificateSigningRequestParams) (*DeleteCertificatesV1CollectionCertificateSigningRequestOK, error)

	GetCertificatesV1APIResources(params *GetCertificatesV1APIResourcesParams) (*GetCertificatesV1APIResourcesOK, error)

	ListCertificatesV1CertificateSigningRequest(params *ListCertificatesV1CertificateSigningRequestParams) (*ListCertificatesV1CertificateSigningRequestOK, error)

	PatchCertificatesV1CertificateSigningRequest(params *PatchCertificatesV1CertificateSigningRequestParams) (*PatchCertificatesV1CertificateSigningRequestOK, error)

	PatchCertificatesV1CertificateSigningRequestApproval(params *PatchCertificatesV1CertificateSigningRequestApprovalParams) (*PatchCertificatesV1CertificateSigningRequestApprovalOK, error)

	PatchCertificatesV1CertificateSigningRequestStatus(params *PatchCertificatesV1CertificateSigningRequestStatusParams) (*PatchCertificatesV1CertificateSigningRequestStatusOK, error)

	ReadCertificatesV1CertificateSigningRequest(params *ReadCertificatesV1CertificateSigningRequestParams) (*ReadCertificatesV1CertificateSigningRequestOK, error)

	ReadCertificatesV1CertificateSigningRequestApproval(params *ReadCertificatesV1CertificateSigningRequestApprovalParams) (*ReadCertificatesV1CertificateSigningRequestApprovalOK, error)

	ReadCertificatesV1CertificateSigningRequestStatus(params *ReadCertificatesV1CertificateSigningRequestStatusParams) (*ReadCertificatesV1CertificateSigningRequestStatusOK, error)

	ReplaceCertificatesV1CertificateSigningRequest(params *ReplaceCertificatesV1CertificateSigningRequestParams) (*ReplaceCertificatesV1CertificateSigningRequestOK, *ReplaceCertificatesV1CertificateSigningRequestCreated, error)

	ReplaceCertificatesV1CertificateSigningRequestApproval(params *ReplaceCertificatesV1CertificateSigningRequestApprovalParams) (*ReplaceCertificatesV1CertificateSigningRequestApprovalOK, *ReplaceCertificatesV1CertificateSigningRequestApprovalCreated, error)

	ReplaceCertificatesV1CertificateSigningRequestStatus(params *ReplaceCertificatesV1CertificateSigningRequestStatusParams) (*ReplaceCertificatesV1CertificateSigningRequestStatusOK, *ReplaceCertificatesV1CertificateSigningRequestStatusCreated, error)

	WatchCertificatesV1CertificateSigningRequest(params *WatchCertificatesV1CertificateSigningRequestParams) (*WatchCertificatesV1CertificateSigningRequestOK, error)

	WatchCertificatesV1CertificateSigningRequestList(params *WatchCertificatesV1CertificateSigningRequestListParams) (*WatchCertificatesV1CertificateSigningRequestListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCertificatesV1CertificateSigningRequest create a CertificateSigningRequest
*/
func (a *Client) CreateCertificatesV1CertificateSigningRequest(params *CreateCertificatesV1CertificateSigningRequestParams) (*CreateCertificatesV1CertificateSigningRequestOK, *CreateCertificatesV1CertificateSigningRequestCreated, *CreateCertificatesV1CertificateSigningRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificatesV1CertificateSigningRequest",
		Method:             "POST",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCertificatesV1CertificateSigningRequestOK:
		return value, nil, nil, nil
	case *CreateCertificatesV1CertificateSigningRequestCreated:
		return nil, value, nil, nil
	case *CreateCertificatesV1CertificateSigningRequestAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificatesV1CertificateSigningRequest delete a CertificateSigningRequest
*/
func (a *Client) DeleteCertificatesV1CertificateSigningRequest(params *DeleteCertificatesV1CertificateSigningRequestParams) (*DeleteCertificatesV1CertificateSigningRequestOK, *DeleteCertificatesV1CertificateSigningRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificatesV1CertificateSigningRequest",
		Method:             "DELETE",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCertificatesV1CertificateSigningRequestOK:
		return value, nil, nil
	case *DeleteCertificatesV1CertificateSigningRequestAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificatesV1CollectionCertificateSigningRequest delete collection of CertificateSigningRequest
*/
func (a *Client) DeleteCertificatesV1CollectionCertificateSigningRequest(params *DeleteCertificatesV1CollectionCertificateSigningRequestParams) (*DeleteCertificatesV1CollectionCertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificatesV1CollectionCertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificatesV1CollectionCertificateSigningRequest",
		Method:             "DELETE",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificatesV1CollectionCertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificatesV1CollectionCertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCertificatesV1CollectionCertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificatesV1APIResources get available resources
*/
func (a *Client) GetCertificatesV1APIResources(params *GetCertificatesV1APIResourcesParams) (*GetCertificatesV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificatesV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificatesV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificatesV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCertificatesV1CertificateSigningRequest list or watch objects of kind CertificateSigningRequest
*/
func (a *Client) ListCertificatesV1CertificateSigningRequest(params *ListCertificatesV1CertificateSigningRequestParams) (*ListCertificatesV1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCertificatesV1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCertificatesV1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCertificatesV1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1CertificateSigningRequest partially update the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1CertificateSigningRequest(params *PatchCertificatesV1CertificateSigningRequestParams) (*PatchCertificatesV1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1CertificateSigningRequest",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1CertificateSigningRequestApproval partially update approval of the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1CertificateSigningRequestApproval(params *PatchCertificatesV1CertificateSigningRequestApprovalParams) (*PatchCertificatesV1CertificateSigningRequestApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1CertificateSigningRequestApproval",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1CertificateSigningRequestApprovalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1CertificateSigningRequestApproval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1CertificateSigningRequestStatus partially update status of the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1CertificateSigningRequestStatus(params *PatchCertificatesV1CertificateSigningRequestStatusParams) (*PatchCertificatesV1CertificateSigningRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1CertificateSigningRequestStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1CertificateSigningRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1CertificateSigningRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1CertificateSigningRequest read the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1CertificateSigningRequest(params *ReadCertificatesV1CertificateSigningRequestParams) (*ReadCertificatesV1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1CertificateSigningRequestApproval read approval of the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1CertificateSigningRequestApproval(params *ReadCertificatesV1CertificateSigningRequestApprovalParams) (*ReadCertificatesV1CertificateSigningRequestApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1CertificateSigningRequestApproval",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1CertificateSigningRequestApprovalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1CertificateSigningRequestApproval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1CertificateSigningRequestStatus read status of the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1CertificateSigningRequestStatus(params *ReadCertificatesV1CertificateSigningRequestStatusParams) (*ReadCertificatesV1CertificateSigningRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1CertificateSigningRequestStatus",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1CertificateSigningRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1CertificateSigningRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1CertificateSigningRequest replace the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1CertificateSigningRequest(params *ReplaceCertificatesV1CertificateSigningRequestParams) (*ReplaceCertificatesV1CertificateSigningRequestOK, *ReplaceCertificatesV1CertificateSigningRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1CertificateSigningRequest",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestOK:
		return value, nil, nil
	case *ReplaceCertificatesV1CertificateSigningRequestCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1CertificateSigningRequestApproval replace approval of the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1CertificateSigningRequestApproval(params *ReplaceCertificatesV1CertificateSigningRequestApprovalParams) (*ReplaceCertificatesV1CertificateSigningRequestApprovalOK, *ReplaceCertificatesV1CertificateSigningRequestApprovalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1CertificateSigningRequestApproval",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalOK:
		return value, nil, nil
	case *ReplaceCertificatesV1CertificateSigningRequestApprovalCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1CertificateSigningRequestStatus replace status of the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1CertificateSigningRequestStatus(params *ReplaceCertificatesV1CertificateSigningRequestStatusParams) (*ReplaceCertificatesV1CertificateSigningRequestStatusOK, *ReplaceCertificatesV1CertificateSigningRequestStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1CertificateSigningRequestStatus",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1CertificateSigningRequestStatusOK:
		return value, nil, nil
	case *ReplaceCertificatesV1CertificateSigningRequestStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCertificatesV1CertificateSigningRequest watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCertificatesV1CertificateSigningRequest(params *WatchCertificatesV1CertificateSigningRequestParams) (*WatchCertificatesV1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCertificatesV1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCertificatesV1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCertificatesV1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCertificatesV1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCertificatesV1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCertificatesV1CertificateSigningRequestList watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCertificatesV1CertificateSigningRequestList(params *WatchCertificatesV1CertificateSigningRequestListParams) (*WatchCertificatesV1CertificateSigningRequestListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCertificatesV1CertificateSigningRequestListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCertificatesV1CertificateSigningRequestList",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1/watch/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCertificatesV1CertificateSigningRequestListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCertificatesV1CertificateSigningRequestListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCertificatesV1CertificateSigningRequestList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
