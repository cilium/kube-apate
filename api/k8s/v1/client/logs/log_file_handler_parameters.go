// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLogFileHandlerParams creates a new LogFileHandlerParams object
// with the default values initialized.
func NewLogFileHandlerParams() *LogFileHandlerParams {
	var ()
	return &LogFileHandlerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLogFileHandlerParamsWithTimeout creates a new LogFileHandlerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLogFileHandlerParamsWithTimeout(timeout time.Duration) *LogFileHandlerParams {
	var ()
	return &LogFileHandlerParams{

		timeout: timeout,
	}
}

// NewLogFileHandlerParamsWithContext creates a new LogFileHandlerParams object
// with the default values initialized, and the ability to set a context for a request
func NewLogFileHandlerParamsWithContext(ctx context.Context) *LogFileHandlerParams {
	var ()
	return &LogFileHandlerParams{

		Context: ctx,
	}
}

// NewLogFileHandlerParamsWithHTTPClient creates a new LogFileHandlerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLogFileHandlerParamsWithHTTPClient(client *http.Client) *LogFileHandlerParams {
	var ()
	return &LogFileHandlerParams{
		HTTPClient: client,
	}
}

/*LogFileHandlerParams contains all the parameters to send to the API endpoint
for the log file handler operation typically these are written to a http.Request
*/
type LogFileHandlerParams struct {

	/*Logpath
	  path to the log

	*/
	Logpath string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the log file handler params
func (o *LogFileHandlerParams) WithTimeout(timeout time.Duration) *LogFileHandlerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the log file handler params
func (o *LogFileHandlerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the log file handler params
func (o *LogFileHandlerParams) WithContext(ctx context.Context) *LogFileHandlerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the log file handler params
func (o *LogFileHandlerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the log file handler params
func (o *LogFileHandlerParams) WithHTTPClient(client *http.Client) *LogFileHandlerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the log file handler params
func (o *LogFileHandlerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogpath adds the logpath to the log file handler params
func (o *LogFileHandlerParams) WithLogpath(logpath string) *LogFileHandlerParams {
	o.SetLogpath(logpath)
	return o
}

// SetLogpath adds the logpath to the log file handler params
func (o *LogFileHandlerParams) SetLogpath(logpath string) {
	o.Logpath = logpath
}

// WriteToRequest writes these params to a swagger request
func (o *LogFileHandlerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param logpath
	if err := r.SetPathParam("logpath", o.Logpath); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
