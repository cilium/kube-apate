// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apiregistration_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apiregistration v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apiregistration v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateApiregistrationV1APIService(params *CreateApiregistrationV1APIServiceParams) (*CreateApiregistrationV1APIServiceOK, *CreateApiregistrationV1APIServiceCreated, *CreateApiregistrationV1APIServiceAccepted, error)

	DeleteApiregistrationV1APIService(params *DeleteApiregistrationV1APIServiceParams) (*DeleteApiregistrationV1APIServiceOK, *DeleteApiregistrationV1APIServiceAccepted, error)

	DeleteApiregistrationV1CollectionAPIService(params *DeleteApiregistrationV1CollectionAPIServiceParams) (*DeleteApiregistrationV1CollectionAPIServiceOK, error)

	GetApiregistrationV1APIResources(params *GetApiregistrationV1APIResourcesParams) (*GetApiregistrationV1APIResourcesOK, error)

	ListApiregistrationV1APIService(params *ListApiregistrationV1APIServiceParams) (*ListApiregistrationV1APIServiceOK, error)

	PatchApiregistrationV1APIService(params *PatchApiregistrationV1APIServiceParams) (*PatchApiregistrationV1APIServiceOK, error)

	PatchApiregistrationV1APIServiceStatus(params *PatchApiregistrationV1APIServiceStatusParams) (*PatchApiregistrationV1APIServiceStatusOK, error)

	ReadApiregistrationV1APIService(params *ReadApiregistrationV1APIServiceParams) (*ReadApiregistrationV1APIServiceOK, error)

	ReadApiregistrationV1APIServiceStatus(params *ReadApiregistrationV1APIServiceStatusParams) (*ReadApiregistrationV1APIServiceStatusOK, error)

	ReplaceApiregistrationV1APIService(params *ReplaceApiregistrationV1APIServiceParams) (*ReplaceApiregistrationV1APIServiceOK, *ReplaceApiregistrationV1APIServiceCreated, error)

	ReplaceApiregistrationV1APIServiceStatus(params *ReplaceApiregistrationV1APIServiceStatusParams) (*ReplaceApiregistrationV1APIServiceStatusOK, *ReplaceApiregistrationV1APIServiceStatusCreated, error)

	WatchApiregistrationV1APIService(params *WatchApiregistrationV1APIServiceParams) (*WatchApiregistrationV1APIServiceOK, error)

	WatchApiregistrationV1APIServiceList(params *WatchApiregistrationV1APIServiceListParams) (*WatchApiregistrationV1APIServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateApiregistrationV1APIService create an APIService
*/
func (a *Client) CreateApiregistrationV1APIService(params *CreateApiregistrationV1APIServiceParams) (*CreateApiregistrationV1APIServiceOK, *CreateApiregistrationV1APIServiceCreated, *CreateApiregistrationV1APIServiceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createApiregistrationV1APIService",
		Method:             "POST",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateApiregistrationV1APIServiceOK:
		return value, nil, nil, nil
	case *CreateApiregistrationV1APIServiceCreated:
		return nil, value, nil, nil
	case *CreateApiregistrationV1APIServiceAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apiregistration_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApiregistrationV1APIService delete an APIService
*/
func (a *Client) DeleteApiregistrationV1APIService(params *DeleteApiregistrationV1APIServiceParams) (*DeleteApiregistrationV1APIServiceOK, *DeleteApiregistrationV1APIServiceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiregistrationV1APIService",
		Method:             "DELETE",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteApiregistrationV1APIServiceOK:
		return value, nil, nil
	case *DeleteApiregistrationV1APIServiceAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apiregistration_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteApiregistrationV1CollectionAPIService delete collection of APIService
*/
func (a *Client) DeleteApiregistrationV1CollectionAPIService(params *DeleteApiregistrationV1CollectionAPIServiceParams) (*DeleteApiregistrationV1CollectionAPIServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteApiregistrationV1CollectionAPIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteApiregistrationV1CollectionAPIService",
		Method:             "DELETE",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteApiregistrationV1CollectionAPIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteApiregistrationV1CollectionAPIServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteApiregistrationV1CollectionAPIService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApiregistrationV1APIResources get available resources
*/
func (a *Client) GetApiregistrationV1APIResources(params *GetApiregistrationV1APIResourcesParams) (*GetApiregistrationV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApiregistrationV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiregistrationV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApiregistrationV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApiregistrationV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getApiregistrationV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListApiregistrationV1APIService list or watch objects of kind APIService
*/
func (a *Client) ListApiregistrationV1APIService(params *ListApiregistrationV1APIServiceParams) (*ListApiregistrationV1APIServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listApiregistrationV1APIService",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListApiregistrationV1APIServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listApiregistrationV1APIService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchApiregistrationV1APIService partially update the specified APIService
*/
func (a *Client) PatchApiregistrationV1APIService(params *PatchApiregistrationV1APIServiceParams) (*PatchApiregistrationV1APIServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchApiregistrationV1APIService",
		Method:             "PATCH",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApiregistrationV1APIServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchApiregistrationV1APIService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchApiregistrationV1APIServiceStatus partially update status of the specified APIService
*/
func (a *Client) PatchApiregistrationV1APIServiceStatus(params *PatchApiregistrationV1APIServiceStatusParams) (*PatchApiregistrationV1APIServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchApiregistrationV1APIServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchApiregistrationV1APIServiceStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchApiregistrationV1APIServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchApiregistrationV1APIServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchApiregistrationV1APIServiceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadApiregistrationV1APIService read the specified APIService
*/
func (a *Client) ReadApiregistrationV1APIService(params *ReadApiregistrationV1APIServiceParams) (*ReadApiregistrationV1APIServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readApiregistrationV1APIService",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadApiregistrationV1APIServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readApiregistrationV1APIService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadApiregistrationV1APIServiceStatus read status of the specified APIService
*/
func (a *Client) ReadApiregistrationV1APIServiceStatus(params *ReadApiregistrationV1APIServiceStatusParams) (*ReadApiregistrationV1APIServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadApiregistrationV1APIServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readApiregistrationV1APIServiceStatus",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadApiregistrationV1APIServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadApiregistrationV1APIServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readApiregistrationV1APIServiceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceApiregistrationV1APIService replace the specified APIService
*/
func (a *Client) ReplaceApiregistrationV1APIService(params *ReplaceApiregistrationV1APIServiceParams) (*ReplaceApiregistrationV1APIServiceOK, *ReplaceApiregistrationV1APIServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceApiregistrationV1APIService",
		Method:             "PUT",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceApiregistrationV1APIServiceOK:
		return value, nil, nil
	case *ReplaceApiregistrationV1APIServiceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apiregistration_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceApiregistrationV1APIServiceStatus replace status of the specified APIService
*/
func (a *Client) ReplaceApiregistrationV1APIServiceStatus(params *ReplaceApiregistrationV1APIServiceStatusParams) (*ReplaceApiregistrationV1APIServiceStatusOK, *ReplaceApiregistrationV1APIServiceStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceApiregistrationV1APIServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceApiregistrationV1APIServiceStatus",
		Method:             "PUT",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceApiregistrationV1APIServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceApiregistrationV1APIServiceStatusOK:
		return value, nil, nil
	case *ReplaceApiregistrationV1APIServiceStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apiregistration_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchApiregistrationV1APIService watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchApiregistrationV1APIService(params *WatchApiregistrationV1APIServiceParams) (*WatchApiregistrationV1APIServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchApiregistrationV1APIServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchApiregistrationV1APIService",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchApiregistrationV1APIServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchApiregistrationV1APIServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchApiregistrationV1APIService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchApiregistrationV1APIServiceList watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchApiregistrationV1APIServiceList(params *WatchApiregistrationV1APIServiceListParams) (*WatchApiregistrationV1APIServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchApiregistrationV1APIServiceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchApiregistrationV1APIServiceList",
		Method:             "GET",
		PathPattern:        "/apis/apiregistration.k8s.io/v1/watch/apiservices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchApiregistrationV1APIServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchApiregistrationV1APIServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchApiregistrationV1APIServiceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
