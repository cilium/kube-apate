// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rbac authorization v1alpha1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rbac authorization v1alpha1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRbacAuthorizationV1alpha1ClusterRole(params *CreateRbacAuthorizationV1alpha1ClusterRoleParams) (*CreateRbacAuthorizationV1alpha1ClusterRoleOK, *CreateRbacAuthorizationV1alpha1ClusterRoleCreated, *CreateRbacAuthorizationV1alpha1ClusterRoleAccepted, error)

	CreateRbacAuthorizationV1alpha1ClusterRoleBinding(params *CreateRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1alpha1ClusterRoleBindingOK, *CreateRbacAuthorizationV1alpha1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1alpha1ClusterRoleBindingAccepted, error)

	CreateRbacAuthorizationV1alpha1NamespacedRole(params *CreateRbacAuthorizationV1alpha1NamespacedRoleParams) (*CreateRbacAuthorizationV1alpha1NamespacedRoleOK, *CreateRbacAuthorizationV1alpha1NamespacedRoleCreated, *CreateRbacAuthorizationV1alpha1NamespacedRoleAccepted, error)

	CreateRbacAuthorizationV1alpha1NamespacedRoleBinding(params *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1alpha1ClusterRole(params *DeleteRbacAuthorizationV1alpha1ClusterRoleParams) (*DeleteRbacAuthorizationV1alpha1ClusterRoleOK, *DeleteRbacAuthorizationV1alpha1ClusterRoleAccepted, error)

	DeleteRbacAuthorizationV1alpha1ClusterRoleBinding(params *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingAccepted, error)

	DeleteRbacAuthorizationV1alpha1CollectionClusterRole(params *DeleteRbacAuthorizationV1alpha1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleOK, error)

	DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingOK, error)

	DeleteRbacAuthorizationV1alpha1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleOK, error)

	DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingOK, error)

	DeleteRbacAuthorizationV1alpha1NamespacedRole(params *DeleteRbacAuthorizationV1alpha1NamespacedRoleParams) (*DeleteRbacAuthorizationV1alpha1NamespacedRoleOK, *DeleteRbacAuthorizationV1alpha1NamespacedRoleAccepted, error)

	DeleteRbacAuthorizationV1alpha1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted, error)

	GetRbacAuthorizationV1alpha1APIResources(params *GetRbacAuthorizationV1alpha1APIResourcesParams) (*GetRbacAuthorizationV1alpha1APIResourcesOK, error)

	ListRbacAuthorizationV1alpha1ClusterRole(params *ListRbacAuthorizationV1alpha1ClusterRoleParams) (*ListRbacAuthorizationV1alpha1ClusterRoleOK, error)

	ListRbacAuthorizationV1alpha1ClusterRoleBinding(params *ListRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ListRbacAuthorizationV1alpha1ClusterRoleBindingOK, error)

	ListRbacAuthorizationV1alpha1NamespacedRole(params *ListRbacAuthorizationV1alpha1NamespacedRoleParams) (*ListRbacAuthorizationV1alpha1NamespacedRoleOK, error)

	ListRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ListRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error)

	ListRbacAuthorizationV1alpha1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesOK, error)

	ListRbacAuthorizationV1alpha1RoleForAllNamespaces(params *ListRbacAuthorizationV1alpha1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1alpha1RoleForAllNamespacesOK, error)

	PatchRbacAuthorizationV1alpha1ClusterRole(params *PatchRbacAuthorizationV1alpha1ClusterRoleParams) (*PatchRbacAuthorizationV1alpha1ClusterRoleOK, error)

	PatchRbacAuthorizationV1alpha1ClusterRoleBinding(params *PatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1alpha1ClusterRoleBindingOK, error)

	PatchRbacAuthorizationV1alpha1NamespacedRole(params *PatchRbacAuthorizationV1alpha1NamespacedRoleParams) (*PatchRbacAuthorizationV1alpha1NamespacedRoleOK, error)

	PatchRbacAuthorizationV1alpha1NamespacedRoleBinding(params *PatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error)

	ReadRbacAuthorizationV1alpha1ClusterRole(params *ReadRbacAuthorizationV1alpha1ClusterRoleParams) (*ReadRbacAuthorizationV1alpha1ClusterRoleOK, error)

	ReadRbacAuthorizationV1alpha1ClusterRoleBinding(params *ReadRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1alpha1ClusterRoleBindingOK, error)

	ReadRbacAuthorizationV1alpha1NamespacedRole(params *ReadRbacAuthorizationV1alpha1NamespacedRoleParams) (*ReadRbacAuthorizationV1alpha1NamespacedRoleOK, error)

	ReadRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ReadRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error)

	ReplaceRbacAuthorizationV1alpha1ClusterRole(params *ReplaceRbacAuthorizationV1alpha1ClusterRoleParams) (*ReplaceRbacAuthorizationV1alpha1ClusterRoleOK, *ReplaceRbacAuthorizationV1alpha1ClusterRoleCreated, error)

	ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingCreated, error)

	ReplaceRbacAuthorizationV1alpha1NamespacedRole(params *ReplaceRbacAuthorizationV1alpha1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1alpha1NamespacedRoleOK, *ReplaceRbacAuthorizationV1alpha1NamespacedRoleCreated, error)

	ReplaceRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingCreated, error)

	WatchRbacAuthorizationV1alpha1ClusterRole(params *WatchRbacAuthorizationV1alpha1ClusterRoleParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleOK, error)

	WatchRbacAuthorizationV1alpha1ClusterRoleBinding(params *WatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleBindingOK, error)

	WatchRbacAuthorizationV1alpha1ClusterRoleBindingList(params *WatchRbacAuthorizationV1alpha1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleBindingListOK, error)

	WatchRbacAuthorizationV1alpha1ClusterRoleList(params *WatchRbacAuthorizationV1alpha1ClusterRoleListParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleListOK, error)

	WatchRbacAuthorizationV1alpha1NamespacedRole(params *WatchRbacAuthorizationV1alpha1NamespacedRoleParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleOK, error)

	WatchRbacAuthorizationV1alpha1NamespacedRoleBinding(params *WatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error)

	WatchRbacAuthorizationV1alpha1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListOK, error)

	WatchRbacAuthorizationV1alpha1NamespacedRoleList(params *WatchRbacAuthorizationV1alpha1NamespacedRoleListParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleListOK, error)

	WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesOK, error)

	WatchRbacAuthorizationV1alpha1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRbacAuthorizationV1alpha1ClusterRole create a ClusterRole
*/
func (a *Client) CreateRbacAuthorizationV1alpha1ClusterRole(params *CreateRbacAuthorizationV1alpha1ClusterRoleParams) (*CreateRbacAuthorizationV1alpha1ClusterRoleOK, *CreateRbacAuthorizationV1alpha1ClusterRoleCreated, *CreateRbacAuthorizationV1alpha1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1alpha1ClusterRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1alpha1ClusterRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1alpha1ClusterRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1alpha1ClusterRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1alpha1ClusterRoleBinding create a ClusterRoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1alpha1ClusterRoleBinding(params *CreateRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*CreateRbacAuthorizationV1alpha1ClusterRoleBindingOK, *CreateRbacAuthorizationV1alpha1ClusterRoleBindingCreated, *CreateRbacAuthorizationV1alpha1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1alpha1ClusterRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1alpha1ClusterRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1alpha1ClusterRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1alpha1NamespacedRole create a Role
*/
func (a *Client) CreateRbacAuthorizationV1alpha1NamespacedRole(params *CreateRbacAuthorizationV1alpha1NamespacedRoleParams) (*CreateRbacAuthorizationV1alpha1NamespacedRoleOK, *CreateRbacAuthorizationV1alpha1NamespacedRoleCreated, *CreateRbacAuthorizationV1alpha1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRbacAuthorizationV1alpha1NamespacedRoleBinding create a RoleBinding
*/
func (a *Client) CreateRbacAuthorizationV1alpha1NamespacedRoleBinding(params *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*CreateRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingCreated, *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "POST",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingOK:
		return value, nil, nil, nil
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingCreated:
		return nil, value, nil, nil
	case *CreateRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1ClusterRole delete a ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1ClusterRole(params *DeleteRbacAuthorizationV1alpha1ClusterRoleParams) (*DeleteRbacAuthorizationV1alpha1ClusterRoleOK, *DeleteRbacAuthorizationV1alpha1ClusterRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1ClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1alpha1ClusterRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1alpha1ClusterRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1ClusterRoleBinding delete a ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1ClusterRoleBinding(params *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1ClusterRoleBindingOK, *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1alpha1ClusterRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1CollectionClusterRole delete collection of ClusterRole
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1CollectionClusterRole(params *DeleteRbacAuthorizationV1alpha1CollectionClusterRoleParams) (*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1CollectionClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1CollectionClusterRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1CollectionClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1alpha1CollectionClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding delete collection of ClusterRoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding(params *DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1CollectionNamespacedRole delete collection of Role
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1CollectionNamespacedRole(params *DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleParams) (*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1CollectionNamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1alpha1CollectionNamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding delete collection of RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding(params *DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1NamespacedRole delete a Role
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1NamespacedRole(params *DeleteRbacAuthorizationV1alpha1NamespacedRoleParams) (*DeleteRbacAuthorizationV1alpha1NamespacedRoleOK, *DeleteRbacAuthorizationV1alpha1NamespacedRoleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1alpha1NamespacedRoleOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1alpha1NamespacedRoleAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRbacAuthorizationV1alpha1NamespacedRoleBinding delete a RoleBinding
*/
func (a *Client) DeleteRbacAuthorizationV1alpha1NamespacedRoleBinding(params *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingOK:
		return value, nil, nil
	case *DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRbacAuthorizationV1alpha1APIResources get available resources
*/
func (a *Client) GetRbacAuthorizationV1alpha1APIResources(params *GetRbacAuthorizationV1alpha1APIResourcesParams) (*GetRbacAuthorizationV1alpha1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRbacAuthorizationV1alpha1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRbacAuthorizationV1alpha1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRbacAuthorizationV1alpha1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRbacAuthorizationV1alpha1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRbacAuthorizationV1alpha1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1ClusterRole list or watch objects of kind ClusterRole
*/
func (a *Client) ListRbacAuthorizationV1alpha1ClusterRole(params *ListRbacAuthorizationV1alpha1ClusterRoleParams) (*ListRbacAuthorizationV1alpha1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1ClusterRoleBinding list or watch objects of kind ClusterRoleBinding
*/
func (a *Client) ListRbacAuthorizationV1alpha1ClusterRoleBinding(params *ListRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ListRbacAuthorizationV1alpha1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1NamespacedRole list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1alpha1NamespacedRole(params *ListRbacAuthorizationV1alpha1NamespacedRoleParams) (*ListRbacAuthorizationV1alpha1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1NamespacedRoleBinding list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ListRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ListRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1RoleBindingForAllNamespaces list or watch objects of kind RoleBinding
*/
func (a *Client) ListRbacAuthorizationV1alpha1RoleBindingForAllNamespaces(params *ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesParams) (*ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRbacAuthorizationV1alpha1RoleForAllNamespaces list or watch objects of kind Role
*/
func (a *Client) ListRbacAuthorizationV1alpha1RoleForAllNamespaces(params *ListRbacAuthorizationV1alpha1RoleForAllNamespacesParams) (*ListRbacAuthorizationV1alpha1RoleForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRbacAuthorizationV1alpha1RoleForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRbacAuthorizationV1alpha1RoleForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRbacAuthorizationV1alpha1RoleForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRbacAuthorizationV1alpha1RoleForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRbacAuthorizationV1alpha1RoleForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1alpha1ClusterRole partially update the specified ClusterRole
*/
func (a *Client) PatchRbacAuthorizationV1alpha1ClusterRole(params *PatchRbacAuthorizationV1alpha1ClusterRoleParams) (*PatchRbacAuthorizationV1alpha1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1alpha1ClusterRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1alpha1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1alpha1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1alpha1ClusterRoleBinding partially update the specified ClusterRoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1alpha1ClusterRoleBinding(params *PatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*PatchRbacAuthorizationV1alpha1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1alpha1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1alpha1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1alpha1NamespacedRole partially update the specified Role
*/
func (a *Client) PatchRbacAuthorizationV1alpha1NamespacedRole(params *PatchRbacAuthorizationV1alpha1NamespacedRoleParams) (*PatchRbacAuthorizationV1alpha1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1alpha1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1alpha1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchRbacAuthorizationV1alpha1NamespacedRoleBinding partially update the specified RoleBinding
*/
func (a *Client) PatchRbacAuthorizationV1alpha1NamespacedRoleBinding(params *PatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*PatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "PATCH",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchRbacAuthorizationV1alpha1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1alpha1ClusterRole read the specified ClusterRole
*/
func (a *Client) ReadRbacAuthorizationV1alpha1ClusterRole(params *ReadRbacAuthorizationV1alpha1ClusterRoleParams) (*ReadRbacAuthorizationV1alpha1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1alpha1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1alpha1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1alpha1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1alpha1ClusterRoleBinding read the specified ClusterRoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1alpha1ClusterRoleBinding(params *ReadRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ReadRbacAuthorizationV1alpha1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1alpha1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1alpha1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1alpha1NamespacedRole read the specified Role
*/
func (a *Client) ReadRbacAuthorizationV1alpha1NamespacedRole(params *ReadRbacAuthorizationV1alpha1NamespacedRoleParams) (*ReadRbacAuthorizationV1alpha1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1alpha1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1alpha1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadRbacAuthorizationV1alpha1NamespacedRoleBinding read the specified RoleBinding
*/
func (a *Client) ReadRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ReadRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ReadRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadRbacAuthorizationV1alpha1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readRbacAuthorizationV1alpha1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1alpha1ClusterRole replace the specified ClusterRole
*/
func (a *Client) ReplaceRbacAuthorizationV1alpha1ClusterRole(params *ReplaceRbacAuthorizationV1alpha1ClusterRoleParams) (*ReplaceRbacAuthorizationV1alpha1ClusterRoleOK, *ReplaceRbacAuthorizationV1alpha1ClusterRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1alpha1ClusterRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1alpha1ClusterRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1alpha1ClusterRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding replace the specified ClusterRoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding(params *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingOK, *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1alpha1NamespacedRole replace the specified Role
*/
func (a *Client) ReplaceRbacAuthorizationV1alpha1NamespacedRole(params *ReplaceRbacAuthorizationV1alpha1NamespacedRoleParams) (*ReplaceRbacAuthorizationV1alpha1NamespacedRoleOK, *ReplaceRbacAuthorizationV1alpha1NamespacedRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1alpha1NamespacedRoleOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1alpha1NamespacedRoleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceRbacAuthorizationV1alpha1NamespacedRoleBinding replace the specified RoleBinding
*/
func (a *Client) ReplaceRbacAuthorizationV1alpha1NamespacedRoleBinding(params *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingOK, *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "PUT",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingOK:
		return value, nil, nil
	case *ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rbac_authorization_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1ClusterRole watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1ClusterRole(params *WatchRbacAuthorizationV1alpha1ClusterRoleParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1ClusterRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1ClusterRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1ClusterRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1ClusterRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1ClusterRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1ClusterRoleBinding watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1ClusterRoleBinding(params *WatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1ClusterRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1ClusterRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1ClusterRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1ClusterRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1ClusterRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1ClusterRoleBindingList watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1ClusterRoleBindingList(params *WatchRbacAuthorizationV1alpha1ClusterRoleBindingListParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1ClusterRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1ClusterRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1ClusterRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1ClusterRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1ClusterRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1ClusterRoleList watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1ClusterRoleList(params *WatchRbacAuthorizationV1alpha1ClusterRoleListParams) (*WatchRbacAuthorizationV1alpha1ClusterRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1ClusterRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1ClusterRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1ClusterRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1ClusterRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1ClusterRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1NamespacedRole watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1NamespacedRole(params *WatchRbacAuthorizationV1alpha1NamespacedRoleParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1NamespacedRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1NamespacedRole",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1NamespacedRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1NamespacedRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1NamespacedRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1NamespacedRoleBinding watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1NamespacedRoleBinding(params *WatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1NamespacedRoleBinding",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1NamespacedRoleBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1NamespacedRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1NamespacedRoleBindingList watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1NamespacedRoleBindingList(params *WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1NamespacedRoleBindingListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1NamespacedRoleBindingList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1NamespacedRoleBindingList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1NamespacedRoleList watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1NamespacedRoleList(params *WatchRbacAuthorizationV1alpha1NamespacedRoleListParams) (*WatchRbacAuthorizationV1alpha1NamespacedRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1NamespacedRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1NamespacedRoleList",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1NamespacedRoleListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1NamespacedRoleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1NamespacedRoleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces(params *WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesParams) (*WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchRbacAuthorizationV1alpha1RoleListForAllNamespaces watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchRbacAuthorizationV1alpha1RoleListForAllNamespaces(params *WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesParams) (*WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchRbacAuthorizationV1alpha1RoleListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchRbacAuthorizationV1alpha1RoleListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchRbacAuthorizationV1alpha1RoleListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
