// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package flowcontrol_apiserver_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new flowcontrol apiserver v1alpha1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flowcontrol apiserver v1alpha1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFlowcontrolApiserverV1alpha1FlowSchema(params *CreateFlowcontrolApiserverV1alpha1FlowSchemaParams) (*CreateFlowcontrolApiserverV1alpha1FlowSchemaOK, *CreateFlowcontrolApiserverV1alpha1FlowSchemaCreated, *CreateFlowcontrolApiserverV1alpha1FlowSchemaAccepted, error)

	CreateFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated, *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted, error)

	DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchema(params *DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaParams) (*DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaOK, error)

	DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration(params *DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationParams) (*DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationOK, error)

	DeleteFlowcontrolApiserverV1alpha1FlowSchema(params *DeleteFlowcontrolApiserverV1alpha1FlowSchemaParams) (*DeleteFlowcontrolApiserverV1alpha1FlowSchemaOK, *DeleteFlowcontrolApiserverV1alpha1FlowSchemaAccepted, error)

	DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted, error)

	GetFlowcontrolApiserverV1alpha1APIResources(params *GetFlowcontrolApiserverV1alpha1APIResourcesParams) (*GetFlowcontrolApiserverV1alpha1APIResourcesOK, error)

	ListFlowcontrolApiserverV1alpha1FlowSchema(params *ListFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ListFlowcontrolApiserverV1alpha1FlowSchemaOK, error)

	ListFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error)

	PatchFlowcontrolApiserverV1alpha1FlowSchema(params *PatchFlowcontrolApiserverV1alpha1FlowSchemaParams) (*PatchFlowcontrolApiserverV1alpha1FlowSchemaOK, error)

	PatchFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, error)

	PatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error)

	PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, error)

	ReadFlowcontrolApiserverV1alpha1FlowSchema(params *ReadFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ReadFlowcontrolApiserverV1alpha1FlowSchemaOK, error)

	ReadFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, error)

	ReadFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error)

	ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, error)

	ReplaceFlowcontrolApiserverV1alpha1FlowSchema(params *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ReplaceFlowcontrolApiserverV1alpha1FlowSchemaOK, *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaCreated, error)

	ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusCreated, error)

	ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated, error)

	ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusCreated, error)

	WatchFlowcontrolApiserverV1alpha1FlowSchema(params *WatchFlowcontrolApiserverV1alpha1FlowSchemaParams) (*WatchFlowcontrolApiserverV1alpha1FlowSchemaOK, error)

	WatchFlowcontrolApiserverV1alpha1FlowSchemaList(params *WatchFlowcontrolApiserverV1alpha1FlowSchemaListParams) (*WatchFlowcontrolApiserverV1alpha1FlowSchemaListOK, error)

	WatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error)

	WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList(params *WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListParams) (*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFlowcontrolApiserverV1alpha1FlowSchema create a FlowSchema
*/
func (a *Client) CreateFlowcontrolApiserverV1alpha1FlowSchema(params *CreateFlowcontrolApiserverV1alpha1FlowSchemaParams) (*CreateFlowcontrolApiserverV1alpha1FlowSchemaOK, *CreateFlowcontrolApiserverV1alpha1FlowSchemaCreated, *CreateFlowcontrolApiserverV1alpha1FlowSchemaAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "POST",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateFlowcontrolApiserverV1alpha1FlowSchemaOK:
		return value, nil, nil, nil
	case *CreateFlowcontrolApiserverV1alpha1FlowSchemaCreated:
		return nil, value, nil, nil
	case *CreateFlowcontrolApiserverV1alpha1FlowSchemaAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFlowcontrolApiserverV1alpha1PriorityLevelConfiguration create a PriorityLevelConfiguration
*/
func (a *Client) CreateFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated, *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "POST",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK:
		return value, nil, nil, nil
	case *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated:
		return nil, value, nil, nil
	case *CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchema delete collection of FlowSchema
*/
func (a *Client) DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchema(params *DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaParams) (*DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowcontrolApiserverV1alpha1CollectionFlowSchema",
		Method:             "DELETE",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFlowcontrolApiserverV1alpha1CollectionFlowSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration delete collection of PriorityLevelConfiguration
*/
func (a *Client) DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration(params *DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationParams) (*DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration",
		Method:             "DELETE",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFlowcontrolApiserverV1alpha1FlowSchema delete a FlowSchema
*/
func (a *Client) DeleteFlowcontrolApiserverV1alpha1FlowSchema(params *DeleteFlowcontrolApiserverV1alpha1FlowSchemaParams) (*DeleteFlowcontrolApiserverV1alpha1FlowSchemaOK, *DeleteFlowcontrolApiserverV1alpha1FlowSchemaAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "DELETE",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFlowcontrolApiserverV1alpha1FlowSchemaOK:
		return value, nil, nil
	case *DeleteFlowcontrolApiserverV1alpha1FlowSchemaAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration delete a PriorityLevelConfiguration
*/
func (a *Client) DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "DELETE",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK:
		return value, nil, nil
	case *DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFlowcontrolApiserverV1alpha1APIResources get available resources
*/
func (a *Client) GetFlowcontrolApiserverV1alpha1APIResources(params *GetFlowcontrolApiserverV1alpha1APIResourcesParams) (*GetFlowcontrolApiserverV1alpha1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowcontrolApiserverV1alpha1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowcontrolApiserverV1alpha1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFlowcontrolApiserverV1alpha1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFlowcontrolApiserverV1alpha1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFlowcontrolApiserverV1alpha1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFlowcontrolApiserverV1alpha1FlowSchema list or watch objects of kind FlowSchema
*/
func (a *Client) ListFlowcontrolApiserverV1alpha1FlowSchema(params *ListFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ListFlowcontrolApiserverV1alpha1FlowSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFlowcontrolApiserverV1alpha1FlowSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFlowcontrolApiserverV1alpha1FlowSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListFlowcontrolApiserverV1alpha1PriorityLevelConfiguration list or watch objects of kind PriorityLevelConfiguration
*/
func (a *Client) ListFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFlowcontrolApiserverV1alpha1PriorityLevelConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFlowcontrolApiserverV1alpha1FlowSchema partially update the specified FlowSchema
*/
func (a *Client) PatchFlowcontrolApiserverV1alpha1FlowSchema(params *PatchFlowcontrolApiserverV1alpha1FlowSchemaParams) (*PatchFlowcontrolApiserverV1alpha1FlowSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "PATCH",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFlowcontrolApiserverV1alpha1FlowSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFlowcontrolApiserverV1alpha1FlowSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFlowcontrolApiserverV1alpha1FlowSchemaStatus partially update status of the specified FlowSchema
*/
func (a *Client) PatchFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFlowcontrolApiserverV1alpha1FlowSchemaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchFlowcontrolApiserverV1alpha1FlowSchemaStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFlowcontrolApiserverV1alpha1FlowSchemaStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration partially update the specified PriorityLevelConfiguration
*/
func (a *Client) PatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "PATCH",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus partially update status of the specified PriorityLevelConfiguration
*/
func (a *Client) PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadFlowcontrolApiserverV1alpha1FlowSchema read the specified FlowSchema
*/
func (a *Client) ReadFlowcontrolApiserverV1alpha1FlowSchema(params *ReadFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ReadFlowcontrolApiserverV1alpha1FlowSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlowcontrolApiserverV1alpha1FlowSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readFlowcontrolApiserverV1alpha1FlowSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadFlowcontrolApiserverV1alpha1FlowSchemaStatus read status of the specified FlowSchema
*/
func (a *Client) ReadFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlowcontrolApiserverV1alpha1FlowSchemaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readFlowcontrolApiserverV1alpha1FlowSchemaStatus",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readFlowcontrolApiserverV1alpha1FlowSchemaStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadFlowcontrolApiserverV1alpha1PriorityLevelConfiguration read the specified PriorityLevelConfiguration
*/
func (a *Client) ReadFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readFlowcontrolApiserverV1alpha1PriorityLevelConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus read status of the specified PriorityLevelConfiguration
*/
func (a *Client) ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFlowcontrolApiserverV1alpha1FlowSchema replace the specified FlowSchema
*/
func (a *Client) ReplaceFlowcontrolApiserverV1alpha1FlowSchema(params *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaParams) (*ReplaceFlowcontrolApiserverV1alpha1FlowSchemaOK, *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "PUT",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaOK:
		return value, nil, nil
	case *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatus replace status of the specified FlowSchema
*/
func (a *Client) ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatus(params *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) (*ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusOK, *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFlowcontrolApiserverV1alpha1FlowSchemaStatus",
		Method:             "PUT",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusOK:
		return value, nil, nil
	case *ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration replace the specified PriorityLevelConfiguration
*/
func (a *Client) ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "PUT",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK:
		return value, nil, nil
	case *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus replace status of the specified PriorityLevelConfiguration
*/
func (a *Client) ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(params *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) (*ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK, *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
		Method:             "PUT",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusOK:
		return value, nil, nil
	case *ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for flowcontrol_apiserver_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchFlowcontrolApiserverV1alpha1FlowSchema watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchFlowcontrolApiserverV1alpha1FlowSchema(params *WatchFlowcontrolApiserverV1alpha1FlowSchemaParams) (*WatchFlowcontrolApiserverV1alpha1FlowSchemaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchFlowcontrolApiserverV1alpha1FlowSchemaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchFlowcontrolApiserverV1alpha1FlowSchema",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchFlowcontrolApiserverV1alpha1FlowSchemaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchFlowcontrolApiserverV1alpha1FlowSchemaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchFlowcontrolApiserverV1alpha1FlowSchema: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchFlowcontrolApiserverV1alpha1FlowSchemaList watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchFlowcontrolApiserverV1alpha1FlowSchemaList(params *WatchFlowcontrolApiserverV1alpha1FlowSchemaListParams) (*WatchFlowcontrolApiserverV1alpha1FlowSchemaListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchFlowcontrolApiserverV1alpha1FlowSchemaListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchFlowcontrolApiserverV1alpha1FlowSchemaList",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchFlowcontrolApiserverV1alpha1FlowSchemaListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchFlowcontrolApiserverV1alpha1FlowSchemaListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchFlowcontrolApiserverV1alpha1FlowSchemaList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(params *WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) (*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList(params *WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListParams) (*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList",
		Method:             "GET",
		PathPattern:        "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
