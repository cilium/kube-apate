// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package authorization_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authorization v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authorization v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview(params *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewParams) (*CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOK, *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewCreated, *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewAccepted, error)

	CreateAuthorizationV1beta1SelfSubjectAccessReview(params *CreateAuthorizationV1beta1SelfSubjectAccessReviewParams) (*CreateAuthorizationV1beta1SelfSubjectAccessReviewOK, *CreateAuthorizationV1beta1SelfSubjectAccessReviewCreated, *CreateAuthorizationV1beta1SelfSubjectAccessReviewAccepted, error)

	CreateAuthorizationV1beta1SelfSubjectRulesReview(params *CreateAuthorizationV1beta1SelfSubjectRulesReviewParams) (*CreateAuthorizationV1beta1SelfSubjectRulesReviewOK, *CreateAuthorizationV1beta1SelfSubjectRulesReviewCreated, *CreateAuthorizationV1beta1SelfSubjectRulesReviewAccepted, error)

	CreateAuthorizationV1beta1SubjectAccessReview(params *CreateAuthorizationV1beta1SubjectAccessReviewParams) (*CreateAuthorizationV1beta1SubjectAccessReviewOK, *CreateAuthorizationV1beta1SubjectAccessReviewCreated, *CreateAuthorizationV1beta1SubjectAccessReviewAccepted, error)

	GetAuthorizationV1beta1APIResources(params *GetAuthorizationV1beta1APIResourcesParams) (*GetAuthorizationV1beta1APIResourcesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview create a LocalSubjectAccessReview
*/
func (a *Client) CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview(params *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewParams) (*CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOK, *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewCreated, *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthorizationV1beta1NamespacedLocalSubjectAccessReview",
		Method:             "POST",
		PathPattern:        "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewOK:
		return value, nil, nil, nil
	case *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewCreated:
		return nil, value, nil, nil
	case *CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAuthorizationV1beta1SelfSubjectAccessReview create a SelfSubjectAccessReview
*/
func (a *Client) CreateAuthorizationV1beta1SelfSubjectAccessReview(params *CreateAuthorizationV1beta1SelfSubjectAccessReviewParams) (*CreateAuthorizationV1beta1SelfSubjectAccessReviewOK, *CreateAuthorizationV1beta1SelfSubjectAccessReviewCreated, *CreateAuthorizationV1beta1SelfSubjectAccessReviewAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationV1beta1SelfSubjectAccessReviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthorizationV1beta1SelfSubjectAccessReview",
		Method:             "POST",
		PathPattern:        "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAuthorizationV1beta1SelfSubjectAccessReviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAuthorizationV1beta1SelfSubjectAccessReviewOK:
		return value, nil, nil, nil
	case *CreateAuthorizationV1beta1SelfSubjectAccessReviewCreated:
		return nil, value, nil, nil
	case *CreateAuthorizationV1beta1SelfSubjectAccessReviewAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAuthorizationV1beta1SelfSubjectRulesReview create a SelfSubjectRulesReview
*/
func (a *Client) CreateAuthorizationV1beta1SelfSubjectRulesReview(params *CreateAuthorizationV1beta1SelfSubjectRulesReviewParams) (*CreateAuthorizationV1beta1SelfSubjectRulesReviewOK, *CreateAuthorizationV1beta1SelfSubjectRulesReviewCreated, *CreateAuthorizationV1beta1SelfSubjectRulesReviewAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationV1beta1SelfSubjectRulesReviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthorizationV1beta1SelfSubjectRulesReview",
		Method:             "POST",
		PathPattern:        "/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAuthorizationV1beta1SelfSubjectRulesReviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAuthorizationV1beta1SelfSubjectRulesReviewOK:
		return value, nil, nil, nil
	case *CreateAuthorizationV1beta1SelfSubjectRulesReviewCreated:
		return nil, value, nil, nil
	case *CreateAuthorizationV1beta1SelfSubjectRulesReviewAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAuthorizationV1beta1SubjectAccessReview create a SubjectAccessReview
*/
func (a *Client) CreateAuthorizationV1beta1SubjectAccessReview(params *CreateAuthorizationV1beta1SubjectAccessReviewParams) (*CreateAuthorizationV1beta1SubjectAccessReviewOK, *CreateAuthorizationV1beta1SubjectAccessReviewCreated, *CreateAuthorizationV1beta1SubjectAccessReviewAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationV1beta1SubjectAccessReviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthorizationV1beta1SubjectAccessReview",
		Method:             "POST",
		PathPattern:        "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAuthorizationV1beta1SubjectAccessReviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAuthorizationV1beta1SubjectAccessReviewOK:
		return value, nil, nil, nil
	case *CreateAuthorizationV1beta1SubjectAccessReviewCreated:
		return nil, value, nil, nil
	case *CreateAuthorizationV1beta1SubjectAccessReviewAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthorizationV1beta1APIResources get available resources
*/
func (a *Client) GetAuthorizationV1beta1APIResources(params *GetAuthorizationV1beta1APIResourcesParams) (*GetAuthorizationV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorizationV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthorizationV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/authorization.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuthorizationV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorizationV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthorizationV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
