// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package discovery_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new discovery v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for discovery v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDiscoveryV1beta1NamespacedEndpointSlice(params *CreateDiscoveryV1beta1NamespacedEndpointSliceParams) (*CreateDiscoveryV1beta1NamespacedEndpointSliceOK, *CreateDiscoveryV1beta1NamespacedEndpointSliceCreated, *CreateDiscoveryV1beta1NamespacedEndpointSliceAccepted, error)

	DeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice(params *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceParams) (*DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceOK, error)

	DeleteDiscoveryV1beta1NamespacedEndpointSlice(params *DeleteDiscoveryV1beta1NamespacedEndpointSliceParams) (*DeleteDiscoveryV1beta1NamespacedEndpointSliceOK, *DeleteDiscoveryV1beta1NamespacedEndpointSliceAccepted, error)

	GetDiscoveryV1beta1APIResources(params *GetDiscoveryV1beta1APIResourcesParams) (*GetDiscoveryV1beta1APIResourcesOK, error)

	ListDiscoveryV1beta1EndpointSliceForAllNamespaces(params *ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams) (*ListDiscoveryV1beta1EndpointSliceForAllNamespacesOK, error)

	ListDiscoveryV1beta1NamespacedEndpointSlice(params *ListDiscoveryV1beta1NamespacedEndpointSliceParams) (*ListDiscoveryV1beta1NamespacedEndpointSliceOK, error)

	PatchDiscoveryV1beta1NamespacedEndpointSlice(params *PatchDiscoveryV1beta1NamespacedEndpointSliceParams) (*PatchDiscoveryV1beta1NamespacedEndpointSliceOK, error)

	ReadDiscoveryV1beta1NamespacedEndpointSlice(params *ReadDiscoveryV1beta1NamespacedEndpointSliceParams) (*ReadDiscoveryV1beta1NamespacedEndpointSliceOK, error)

	ReplaceDiscoveryV1beta1NamespacedEndpointSlice(params *ReplaceDiscoveryV1beta1NamespacedEndpointSliceParams) (*ReplaceDiscoveryV1beta1NamespacedEndpointSliceOK, *ReplaceDiscoveryV1beta1NamespacedEndpointSliceCreated, error)

	WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces(params *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams) (*WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesOK, error)

	WatchDiscoveryV1beta1NamespacedEndpointSlice(params *WatchDiscoveryV1beta1NamespacedEndpointSliceParams) (*WatchDiscoveryV1beta1NamespacedEndpointSliceOK, error)

	WatchDiscoveryV1beta1NamespacedEndpointSliceList(params *WatchDiscoveryV1beta1NamespacedEndpointSliceListParams) (*WatchDiscoveryV1beta1NamespacedEndpointSliceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDiscoveryV1beta1NamespacedEndpointSlice create an EndpointSlice
*/
func (a *Client) CreateDiscoveryV1beta1NamespacedEndpointSlice(params *CreateDiscoveryV1beta1NamespacedEndpointSliceParams) (*CreateDiscoveryV1beta1NamespacedEndpointSliceOK, *CreateDiscoveryV1beta1NamespacedEndpointSliceCreated, *CreateDiscoveryV1beta1NamespacedEndpointSliceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "POST",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceOK:
		return value, nil, nil, nil
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceCreated:
		return nil, value, nil, nil
	case *CreateDiscoveryV1beta1NamespacedEndpointSliceAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for discovery_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice delete collection of EndpointSlice
*/
func (a *Client) DeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice(params *DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceParams) (*DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDiscoveryV1beta1CollectionNamespacedEndpointSlice",
		Method:             "DELETE",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDiscoveryV1beta1CollectionNamespacedEndpointSlice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDiscoveryV1beta1NamespacedEndpointSlice delete an EndpointSlice
*/
func (a *Client) DeleteDiscoveryV1beta1NamespacedEndpointSlice(params *DeleteDiscoveryV1beta1NamespacedEndpointSliceParams) (*DeleteDiscoveryV1beta1NamespacedEndpointSliceOK, *DeleteDiscoveryV1beta1NamespacedEndpointSliceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "DELETE",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceOK:
		return value, nil, nil
	case *DeleteDiscoveryV1beta1NamespacedEndpointSliceAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for discovery_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiscoveryV1beta1APIResources get available resources
*/
func (a *Client) GetDiscoveryV1beta1APIResources(params *GetDiscoveryV1beta1APIResourcesParams) (*GetDiscoveryV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveryV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveryV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveryV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoveryV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDiscoveryV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDiscoveryV1beta1EndpointSliceForAllNamespaces list or watch objects of kind EndpointSlice
*/
func (a *Client) ListDiscoveryV1beta1EndpointSliceForAllNamespaces(params *ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams) (*ListDiscoveryV1beta1EndpointSliceForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDiscoveryV1beta1EndpointSliceForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDiscoveryV1beta1EndpointSliceForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDiscoveryV1beta1EndpointSliceForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDiscoveryV1beta1EndpointSliceForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDiscoveryV1beta1EndpointSliceForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDiscoveryV1beta1NamespacedEndpointSlice list or watch objects of kind EndpointSlice
*/
func (a *Client) ListDiscoveryV1beta1NamespacedEndpointSlice(params *ListDiscoveryV1beta1NamespacedEndpointSliceParams) (*ListDiscoveryV1beta1NamespacedEndpointSliceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDiscoveryV1beta1NamespacedEndpointSliceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDiscoveryV1beta1NamespacedEndpointSlice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchDiscoveryV1beta1NamespacedEndpointSlice partially update the specified EndpointSlice
*/
func (a *Client) PatchDiscoveryV1beta1NamespacedEndpointSlice(params *PatchDiscoveryV1beta1NamespacedEndpointSliceParams) (*PatchDiscoveryV1beta1NamespacedEndpointSliceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "PATCH",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDiscoveryV1beta1NamespacedEndpointSliceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDiscoveryV1beta1NamespacedEndpointSlice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadDiscoveryV1beta1NamespacedEndpointSlice read the specified EndpointSlice
*/
func (a *Client) ReadDiscoveryV1beta1NamespacedEndpointSlice(params *ReadDiscoveryV1beta1NamespacedEndpointSliceParams) (*ReadDiscoveryV1beta1NamespacedEndpointSliceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadDiscoveryV1beta1NamespacedEndpointSliceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readDiscoveryV1beta1NamespacedEndpointSlice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceDiscoveryV1beta1NamespacedEndpointSlice replace the specified EndpointSlice
*/
func (a *Client) ReplaceDiscoveryV1beta1NamespacedEndpointSlice(params *ReplaceDiscoveryV1beta1NamespacedEndpointSliceParams) (*ReplaceDiscoveryV1beta1NamespacedEndpointSliceOK, *ReplaceDiscoveryV1beta1NamespacedEndpointSliceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "PUT",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceOK:
		return value, nil, nil
	case *ReplaceDiscoveryV1beta1NamespacedEndpointSliceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for discovery_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces(params *WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams) (*WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchDiscoveryV1beta1EndpointSliceListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/watch/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchDiscoveryV1beta1EndpointSliceListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchDiscoveryV1beta1NamespacedEndpointSlice watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchDiscoveryV1beta1NamespacedEndpointSlice(params *WatchDiscoveryV1beta1NamespacedEndpointSliceParams) (*WatchDiscoveryV1beta1NamespacedEndpointSliceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchDiscoveryV1beta1NamespacedEndpointSliceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchDiscoveryV1beta1NamespacedEndpointSlice",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchDiscoveryV1beta1NamespacedEndpointSliceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchDiscoveryV1beta1NamespacedEndpointSliceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchDiscoveryV1beta1NamespacedEndpointSlice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchDiscoveryV1beta1NamespacedEndpointSliceList watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchDiscoveryV1beta1NamespacedEndpointSliceList(params *WatchDiscoveryV1beta1NamespacedEndpointSliceListParams) (*WatchDiscoveryV1beta1NamespacedEndpointSliceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchDiscoveryV1beta1NamespacedEndpointSliceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchDiscoveryV1beta1NamespacedEndpointSliceList",
		Method:             "GET",
		PathPattern:        "/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchDiscoveryV1beta1NamespacedEndpointSliceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchDiscoveryV1beta1NamespacedEndpointSliceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchDiscoveryV1beta1NamespacedEndpointSliceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
