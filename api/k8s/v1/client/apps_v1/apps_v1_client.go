// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apps v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apps v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAppsV1NamespacedControllerRevision(params *CreateAppsV1NamespacedControllerRevisionParams) (*CreateAppsV1NamespacedControllerRevisionOK, *CreateAppsV1NamespacedControllerRevisionCreated, *CreateAppsV1NamespacedControllerRevisionAccepted, error)

	CreateAppsV1NamespacedDaemonSet(params *CreateAppsV1NamespacedDaemonSetParams) (*CreateAppsV1NamespacedDaemonSetOK, *CreateAppsV1NamespacedDaemonSetCreated, *CreateAppsV1NamespacedDaemonSetAccepted, error)

	CreateAppsV1NamespacedDeployment(params *CreateAppsV1NamespacedDeploymentParams) (*CreateAppsV1NamespacedDeploymentOK, *CreateAppsV1NamespacedDeploymentCreated, *CreateAppsV1NamespacedDeploymentAccepted, error)

	CreateAppsV1NamespacedReplicaSet(params *CreateAppsV1NamespacedReplicaSetParams) (*CreateAppsV1NamespacedReplicaSetOK, *CreateAppsV1NamespacedReplicaSetCreated, *CreateAppsV1NamespacedReplicaSetAccepted, error)

	CreateAppsV1NamespacedStatefulSet(params *CreateAppsV1NamespacedStatefulSetParams) (*CreateAppsV1NamespacedStatefulSetOK, *CreateAppsV1NamespacedStatefulSetCreated, *CreateAppsV1NamespacedStatefulSetAccepted, error)

	DeleteAppsV1CollectionNamespacedControllerRevision(params *DeleteAppsV1CollectionNamespacedControllerRevisionParams) (*DeleteAppsV1CollectionNamespacedControllerRevisionOK, error)

	DeleteAppsV1CollectionNamespacedDaemonSet(params *DeleteAppsV1CollectionNamespacedDaemonSetParams) (*DeleteAppsV1CollectionNamespacedDaemonSetOK, error)

	DeleteAppsV1CollectionNamespacedDeployment(params *DeleteAppsV1CollectionNamespacedDeploymentParams) (*DeleteAppsV1CollectionNamespacedDeploymentOK, error)

	DeleteAppsV1CollectionNamespacedReplicaSet(params *DeleteAppsV1CollectionNamespacedReplicaSetParams) (*DeleteAppsV1CollectionNamespacedReplicaSetOK, error)

	DeleteAppsV1CollectionNamespacedStatefulSet(params *DeleteAppsV1CollectionNamespacedStatefulSetParams) (*DeleteAppsV1CollectionNamespacedStatefulSetOK, error)

	DeleteAppsV1NamespacedControllerRevision(params *DeleteAppsV1NamespacedControllerRevisionParams) (*DeleteAppsV1NamespacedControllerRevisionOK, *DeleteAppsV1NamespacedControllerRevisionAccepted, error)

	DeleteAppsV1NamespacedDaemonSet(params *DeleteAppsV1NamespacedDaemonSetParams) (*DeleteAppsV1NamespacedDaemonSetOK, *DeleteAppsV1NamespacedDaemonSetAccepted, error)

	DeleteAppsV1NamespacedDeployment(params *DeleteAppsV1NamespacedDeploymentParams) (*DeleteAppsV1NamespacedDeploymentOK, *DeleteAppsV1NamespacedDeploymentAccepted, error)

	DeleteAppsV1NamespacedReplicaSet(params *DeleteAppsV1NamespacedReplicaSetParams) (*DeleteAppsV1NamespacedReplicaSetOK, *DeleteAppsV1NamespacedReplicaSetAccepted, error)

	DeleteAppsV1NamespacedStatefulSet(params *DeleteAppsV1NamespacedStatefulSetParams) (*DeleteAppsV1NamespacedStatefulSetOK, *DeleteAppsV1NamespacedStatefulSetAccepted, error)

	GetAppsV1APIResources(params *GetAppsV1APIResourcesParams) (*GetAppsV1APIResourcesOK, error)

	ListAppsV1ControllerRevisionForAllNamespaces(params *ListAppsV1ControllerRevisionForAllNamespacesParams) (*ListAppsV1ControllerRevisionForAllNamespacesOK, error)

	ListAppsV1DaemonSetForAllNamespaces(params *ListAppsV1DaemonSetForAllNamespacesParams) (*ListAppsV1DaemonSetForAllNamespacesOK, error)

	ListAppsV1DeploymentForAllNamespaces(params *ListAppsV1DeploymentForAllNamespacesParams) (*ListAppsV1DeploymentForAllNamespacesOK, error)

	ListAppsV1NamespacedControllerRevision(params *ListAppsV1NamespacedControllerRevisionParams) (*ListAppsV1NamespacedControllerRevisionOK, error)

	ListAppsV1NamespacedDaemonSet(params *ListAppsV1NamespacedDaemonSetParams) (*ListAppsV1NamespacedDaemonSetOK, error)

	ListAppsV1NamespacedDeployment(params *ListAppsV1NamespacedDeploymentParams) (*ListAppsV1NamespacedDeploymentOK, error)

	ListAppsV1NamespacedReplicaSet(params *ListAppsV1NamespacedReplicaSetParams) (*ListAppsV1NamespacedReplicaSetOK, error)

	ListAppsV1NamespacedStatefulSet(params *ListAppsV1NamespacedStatefulSetParams) (*ListAppsV1NamespacedStatefulSetOK, error)

	ListAppsV1ReplicaSetForAllNamespaces(params *ListAppsV1ReplicaSetForAllNamespacesParams) (*ListAppsV1ReplicaSetForAllNamespacesOK, error)

	ListAppsV1StatefulSetForAllNamespaces(params *ListAppsV1StatefulSetForAllNamespacesParams) (*ListAppsV1StatefulSetForAllNamespacesOK, error)

	PatchAppsV1NamespacedControllerRevision(params *PatchAppsV1NamespacedControllerRevisionParams) (*PatchAppsV1NamespacedControllerRevisionOK, error)

	PatchAppsV1NamespacedDaemonSet(params *PatchAppsV1NamespacedDaemonSetParams) (*PatchAppsV1NamespacedDaemonSetOK, error)

	PatchAppsV1NamespacedDaemonSetStatus(params *PatchAppsV1NamespacedDaemonSetStatusParams) (*PatchAppsV1NamespacedDaemonSetStatusOK, error)

	PatchAppsV1NamespacedDeployment(params *PatchAppsV1NamespacedDeploymentParams) (*PatchAppsV1NamespacedDeploymentOK, error)

	PatchAppsV1NamespacedDeploymentScale(params *PatchAppsV1NamespacedDeploymentScaleParams) (*PatchAppsV1NamespacedDeploymentScaleOK, error)

	PatchAppsV1NamespacedDeploymentStatus(params *PatchAppsV1NamespacedDeploymentStatusParams) (*PatchAppsV1NamespacedDeploymentStatusOK, error)

	PatchAppsV1NamespacedReplicaSet(params *PatchAppsV1NamespacedReplicaSetParams) (*PatchAppsV1NamespacedReplicaSetOK, error)

	PatchAppsV1NamespacedReplicaSetScale(params *PatchAppsV1NamespacedReplicaSetScaleParams) (*PatchAppsV1NamespacedReplicaSetScaleOK, error)

	PatchAppsV1NamespacedReplicaSetStatus(params *PatchAppsV1NamespacedReplicaSetStatusParams) (*PatchAppsV1NamespacedReplicaSetStatusOK, error)

	PatchAppsV1NamespacedStatefulSet(params *PatchAppsV1NamespacedStatefulSetParams) (*PatchAppsV1NamespacedStatefulSetOK, error)

	PatchAppsV1NamespacedStatefulSetScale(params *PatchAppsV1NamespacedStatefulSetScaleParams) (*PatchAppsV1NamespacedStatefulSetScaleOK, error)

	PatchAppsV1NamespacedStatefulSetStatus(params *PatchAppsV1NamespacedStatefulSetStatusParams) (*PatchAppsV1NamespacedStatefulSetStatusOK, error)

	ReadAppsV1NamespacedControllerRevision(params *ReadAppsV1NamespacedControllerRevisionParams) (*ReadAppsV1NamespacedControllerRevisionOK, error)

	ReadAppsV1NamespacedDaemonSet(params *ReadAppsV1NamespacedDaemonSetParams) (*ReadAppsV1NamespacedDaemonSetOK, error)

	ReadAppsV1NamespacedDaemonSetStatus(params *ReadAppsV1NamespacedDaemonSetStatusParams) (*ReadAppsV1NamespacedDaemonSetStatusOK, error)

	ReadAppsV1NamespacedDeployment(params *ReadAppsV1NamespacedDeploymentParams) (*ReadAppsV1NamespacedDeploymentOK, error)

	ReadAppsV1NamespacedDeploymentScale(params *ReadAppsV1NamespacedDeploymentScaleParams) (*ReadAppsV1NamespacedDeploymentScaleOK, error)

	ReadAppsV1NamespacedDeploymentStatus(params *ReadAppsV1NamespacedDeploymentStatusParams) (*ReadAppsV1NamespacedDeploymentStatusOK, error)

	ReadAppsV1NamespacedReplicaSet(params *ReadAppsV1NamespacedReplicaSetParams) (*ReadAppsV1NamespacedReplicaSetOK, error)

	ReadAppsV1NamespacedReplicaSetScale(params *ReadAppsV1NamespacedReplicaSetScaleParams) (*ReadAppsV1NamespacedReplicaSetScaleOK, error)

	ReadAppsV1NamespacedReplicaSetStatus(params *ReadAppsV1NamespacedReplicaSetStatusParams) (*ReadAppsV1NamespacedReplicaSetStatusOK, error)

	ReadAppsV1NamespacedStatefulSet(params *ReadAppsV1NamespacedStatefulSetParams) (*ReadAppsV1NamespacedStatefulSetOK, error)

	ReadAppsV1NamespacedStatefulSetScale(params *ReadAppsV1NamespacedStatefulSetScaleParams) (*ReadAppsV1NamespacedStatefulSetScaleOK, error)

	ReadAppsV1NamespacedStatefulSetStatus(params *ReadAppsV1NamespacedStatefulSetStatusParams) (*ReadAppsV1NamespacedStatefulSetStatusOK, error)

	ReplaceAppsV1NamespacedControllerRevision(params *ReplaceAppsV1NamespacedControllerRevisionParams) (*ReplaceAppsV1NamespacedControllerRevisionOK, *ReplaceAppsV1NamespacedControllerRevisionCreated, error)

	ReplaceAppsV1NamespacedDaemonSet(params *ReplaceAppsV1NamespacedDaemonSetParams) (*ReplaceAppsV1NamespacedDaemonSetOK, *ReplaceAppsV1NamespacedDaemonSetCreated, error)

	ReplaceAppsV1NamespacedDaemonSetStatus(params *ReplaceAppsV1NamespacedDaemonSetStatusParams) (*ReplaceAppsV1NamespacedDaemonSetStatusOK, *ReplaceAppsV1NamespacedDaemonSetStatusCreated, error)

	ReplaceAppsV1NamespacedDeployment(params *ReplaceAppsV1NamespacedDeploymentParams) (*ReplaceAppsV1NamespacedDeploymentOK, *ReplaceAppsV1NamespacedDeploymentCreated, error)

	ReplaceAppsV1NamespacedDeploymentScale(params *ReplaceAppsV1NamespacedDeploymentScaleParams) (*ReplaceAppsV1NamespacedDeploymentScaleOK, *ReplaceAppsV1NamespacedDeploymentScaleCreated, error)

	ReplaceAppsV1NamespacedDeploymentStatus(params *ReplaceAppsV1NamespacedDeploymentStatusParams) (*ReplaceAppsV1NamespacedDeploymentStatusOK, *ReplaceAppsV1NamespacedDeploymentStatusCreated, error)

	ReplaceAppsV1NamespacedReplicaSet(params *ReplaceAppsV1NamespacedReplicaSetParams) (*ReplaceAppsV1NamespacedReplicaSetOK, *ReplaceAppsV1NamespacedReplicaSetCreated, error)

	ReplaceAppsV1NamespacedReplicaSetScale(params *ReplaceAppsV1NamespacedReplicaSetScaleParams) (*ReplaceAppsV1NamespacedReplicaSetScaleOK, *ReplaceAppsV1NamespacedReplicaSetScaleCreated, error)

	ReplaceAppsV1NamespacedReplicaSetStatus(params *ReplaceAppsV1NamespacedReplicaSetStatusParams) (*ReplaceAppsV1NamespacedReplicaSetStatusOK, *ReplaceAppsV1NamespacedReplicaSetStatusCreated, error)

	ReplaceAppsV1NamespacedStatefulSet(params *ReplaceAppsV1NamespacedStatefulSetParams) (*ReplaceAppsV1NamespacedStatefulSetOK, *ReplaceAppsV1NamespacedStatefulSetCreated, error)

	ReplaceAppsV1NamespacedStatefulSetScale(params *ReplaceAppsV1NamespacedStatefulSetScaleParams) (*ReplaceAppsV1NamespacedStatefulSetScaleOK, *ReplaceAppsV1NamespacedStatefulSetScaleCreated, error)

	ReplaceAppsV1NamespacedStatefulSetStatus(params *ReplaceAppsV1NamespacedStatefulSetStatusParams) (*ReplaceAppsV1NamespacedStatefulSetStatusOK, *ReplaceAppsV1NamespacedStatefulSetStatusCreated, error)

	WatchAppsV1ControllerRevisionListForAllNamespaces(params *WatchAppsV1ControllerRevisionListForAllNamespacesParams) (*WatchAppsV1ControllerRevisionListForAllNamespacesOK, error)

	WatchAppsV1DaemonSetListForAllNamespaces(params *WatchAppsV1DaemonSetListForAllNamespacesParams) (*WatchAppsV1DaemonSetListForAllNamespacesOK, error)

	WatchAppsV1DeploymentListForAllNamespaces(params *WatchAppsV1DeploymentListForAllNamespacesParams) (*WatchAppsV1DeploymentListForAllNamespacesOK, error)

	WatchAppsV1NamespacedControllerRevision(params *WatchAppsV1NamespacedControllerRevisionParams) (*WatchAppsV1NamespacedControllerRevisionOK, error)

	WatchAppsV1NamespacedControllerRevisionList(params *WatchAppsV1NamespacedControllerRevisionListParams) (*WatchAppsV1NamespacedControllerRevisionListOK, error)

	WatchAppsV1NamespacedDaemonSet(params *WatchAppsV1NamespacedDaemonSetParams) (*WatchAppsV1NamespacedDaemonSetOK, error)

	WatchAppsV1NamespacedDaemonSetList(params *WatchAppsV1NamespacedDaemonSetListParams) (*WatchAppsV1NamespacedDaemonSetListOK, error)

	WatchAppsV1NamespacedDeployment(params *WatchAppsV1NamespacedDeploymentParams) (*WatchAppsV1NamespacedDeploymentOK, error)

	WatchAppsV1NamespacedDeploymentList(params *WatchAppsV1NamespacedDeploymentListParams) (*WatchAppsV1NamespacedDeploymentListOK, error)

	WatchAppsV1NamespacedReplicaSet(params *WatchAppsV1NamespacedReplicaSetParams) (*WatchAppsV1NamespacedReplicaSetOK, error)

	WatchAppsV1NamespacedReplicaSetList(params *WatchAppsV1NamespacedReplicaSetListParams) (*WatchAppsV1NamespacedReplicaSetListOK, error)

	WatchAppsV1NamespacedStatefulSet(params *WatchAppsV1NamespacedStatefulSetParams) (*WatchAppsV1NamespacedStatefulSetOK, error)

	WatchAppsV1NamespacedStatefulSetList(params *WatchAppsV1NamespacedStatefulSetListParams) (*WatchAppsV1NamespacedStatefulSetListOK, error)

	WatchAppsV1ReplicaSetListForAllNamespaces(params *WatchAppsV1ReplicaSetListForAllNamespacesParams) (*WatchAppsV1ReplicaSetListForAllNamespacesOK, error)

	WatchAppsV1StatefulSetListForAllNamespaces(params *WatchAppsV1StatefulSetListForAllNamespacesParams) (*WatchAppsV1StatefulSetListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAppsV1NamespacedControllerRevision create a ControllerRevision
*/
func (a *Client) CreateAppsV1NamespacedControllerRevision(params *CreateAppsV1NamespacedControllerRevisionParams) (*CreateAppsV1NamespacedControllerRevisionOK, *CreateAppsV1NamespacedControllerRevisionCreated, *CreateAppsV1NamespacedControllerRevisionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAppsV1NamespacedControllerRevision",
		Method:             "POST",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAppsV1NamespacedControllerRevisionOK:
		return value, nil, nil, nil
	case *CreateAppsV1NamespacedControllerRevisionCreated:
		return nil, value, nil, nil
	case *CreateAppsV1NamespacedControllerRevisionAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAppsV1NamespacedDaemonSet create a DaemonSet
*/
func (a *Client) CreateAppsV1NamespacedDaemonSet(params *CreateAppsV1NamespacedDaemonSetParams) (*CreateAppsV1NamespacedDaemonSetOK, *CreateAppsV1NamespacedDaemonSetCreated, *CreateAppsV1NamespacedDaemonSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAppsV1NamespacedDaemonSet",
		Method:             "POST",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAppsV1NamespacedDaemonSetOK:
		return value, nil, nil, nil
	case *CreateAppsV1NamespacedDaemonSetCreated:
		return nil, value, nil, nil
	case *CreateAppsV1NamespacedDaemonSetAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAppsV1NamespacedDeployment create a Deployment
*/
func (a *Client) CreateAppsV1NamespacedDeployment(params *CreateAppsV1NamespacedDeploymentParams) (*CreateAppsV1NamespacedDeploymentOK, *CreateAppsV1NamespacedDeploymentCreated, *CreateAppsV1NamespacedDeploymentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAppsV1NamespacedDeployment",
		Method:             "POST",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAppsV1NamespacedDeploymentOK:
		return value, nil, nil, nil
	case *CreateAppsV1NamespacedDeploymentCreated:
		return nil, value, nil, nil
	case *CreateAppsV1NamespacedDeploymentAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAppsV1NamespacedReplicaSet create a ReplicaSet
*/
func (a *Client) CreateAppsV1NamespacedReplicaSet(params *CreateAppsV1NamespacedReplicaSetParams) (*CreateAppsV1NamespacedReplicaSetOK, *CreateAppsV1NamespacedReplicaSetCreated, *CreateAppsV1NamespacedReplicaSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAppsV1NamespacedReplicaSet",
		Method:             "POST",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAppsV1NamespacedReplicaSetOK:
		return value, nil, nil, nil
	case *CreateAppsV1NamespacedReplicaSetCreated:
		return nil, value, nil, nil
	case *CreateAppsV1NamespacedReplicaSetAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAppsV1NamespacedStatefulSet create a StatefulSet
*/
func (a *Client) CreateAppsV1NamespacedStatefulSet(params *CreateAppsV1NamespacedStatefulSetParams) (*CreateAppsV1NamespacedStatefulSetOK, *CreateAppsV1NamespacedStatefulSetCreated, *CreateAppsV1NamespacedStatefulSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAppsV1NamespacedStatefulSet",
		Method:             "POST",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAppsV1NamespacedStatefulSetOK:
		return value, nil, nil, nil
	case *CreateAppsV1NamespacedStatefulSetCreated:
		return nil, value, nil, nil
	case *CreateAppsV1NamespacedStatefulSetAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1CollectionNamespacedControllerRevision delete collection of ControllerRevision
*/
func (a *Client) DeleteAppsV1CollectionNamespacedControllerRevision(params *DeleteAppsV1CollectionNamespacedControllerRevisionParams) (*DeleteAppsV1CollectionNamespacedControllerRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1CollectionNamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1CollectionNamespacedControllerRevision",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1CollectionNamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsV1CollectionNamespacedControllerRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppsV1CollectionNamespacedControllerRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1CollectionNamespacedDaemonSet delete collection of DaemonSet
*/
func (a *Client) DeleteAppsV1CollectionNamespacedDaemonSet(params *DeleteAppsV1CollectionNamespacedDaemonSetParams) (*DeleteAppsV1CollectionNamespacedDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1CollectionNamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1CollectionNamespacedDaemonSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1CollectionNamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsV1CollectionNamespacedDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppsV1CollectionNamespacedDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1CollectionNamespacedDeployment delete collection of Deployment
*/
func (a *Client) DeleteAppsV1CollectionNamespacedDeployment(params *DeleteAppsV1CollectionNamespacedDeploymentParams) (*DeleteAppsV1CollectionNamespacedDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1CollectionNamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1CollectionNamespacedDeployment",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1CollectionNamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsV1CollectionNamespacedDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppsV1CollectionNamespacedDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1CollectionNamespacedReplicaSet delete collection of ReplicaSet
*/
func (a *Client) DeleteAppsV1CollectionNamespacedReplicaSet(params *DeleteAppsV1CollectionNamespacedReplicaSetParams) (*DeleteAppsV1CollectionNamespacedReplicaSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1CollectionNamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1CollectionNamespacedReplicaSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1CollectionNamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsV1CollectionNamespacedReplicaSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppsV1CollectionNamespacedReplicaSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1CollectionNamespacedStatefulSet delete collection of StatefulSet
*/
func (a *Client) DeleteAppsV1CollectionNamespacedStatefulSet(params *DeleteAppsV1CollectionNamespacedStatefulSetParams) (*DeleteAppsV1CollectionNamespacedStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1CollectionNamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1CollectionNamespacedStatefulSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1CollectionNamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAppsV1CollectionNamespacedStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAppsV1CollectionNamespacedStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1NamespacedControllerRevision delete a ControllerRevision
*/
func (a *Client) DeleteAppsV1NamespacedControllerRevision(params *DeleteAppsV1NamespacedControllerRevisionParams) (*DeleteAppsV1NamespacedControllerRevisionOK, *DeleteAppsV1NamespacedControllerRevisionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1NamespacedControllerRevision",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAppsV1NamespacedControllerRevisionOK:
		return value, nil, nil
	case *DeleteAppsV1NamespacedControllerRevisionAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1NamespacedDaemonSet delete a DaemonSet
*/
func (a *Client) DeleteAppsV1NamespacedDaemonSet(params *DeleteAppsV1NamespacedDaemonSetParams) (*DeleteAppsV1NamespacedDaemonSetOK, *DeleteAppsV1NamespacedDaemonSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1NamespacedDaemonSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAppsV1NamespacedDaemonSetOK:
		return value, nil, nil
	case *DeleteAppsV1NamespacedDaemonSetAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1NamespacedDeployment delete a Deployment
*/
func (a *Client) DeleteAppsV1NamespacedDeployment(params *DeleteAppsV1NamespacedDeploymentParams) (*DeleteAppsV1NamespacedDeploymentOK, *DeleteAppsV1NamespacedDeploymentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1NamespacedDeployment",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAppsV1NamespacedDeploymentOK:
		return value, nil, nil
	case *DeleteAppsV1NamespacedDeploymentAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1NamespacedReplicaSet delete a ReplicaSet
*/
func (a *Client) DeleteAppsV1NamespacedReplicaSet(params *DeleteAppsV1NamespacedReplicaSetParams) (*DeleteAppsV1NamespacedReplicaSetOK, *DeleteAppsV1NamespacedReplicaSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1NamespacedReplicaSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAppsV1NamespacedReplicaSetOK:
		return value, nil, nil
	case *DeleteAppsV1NamespacedReplicaSetAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAppsV1NamespacedStatefulSet delete a StatefulSet
*/
func (a *Client) DeleteAppsV1NamespacedStatefulSet(params *DeleteAppsV1NamespacedStatefulSetParams) (*DeleteAppsV1NamespacedStatefulSetOK, *DeleteAppsV1NamespacedStatefulSetAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAppsV1NamespacedStatefulSet",
		Method:             "DELETE",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAppsV1NamespacedStatefulSetOK:
		return value, nil, nil
	case *DeleteAppsV1NamespacedStatefulSetAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAppsV1APIResources get available resources
*/
func (a *Client) GetAppsV1APIResources(params *GetAppsV1APIResourcesParams) (*GetAppsV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppsV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppsV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppsV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppsV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppsV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1ControllerRevisionForAllNamespaces list or watch objects of kind ControllerRevision
*/
func (a *Client) ListAppsV1ControllerRevisionForAllNamespaces(params *ListAppsV1ControllerRevisionForAllNamespacesParams) (*ListAppsV1ControllerRevisionForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1ControllerRevisionForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1ControllerRevisionForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1ControllerRevisionForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1ControllerRevisionForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1ControllerRevisionForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1DaemonSetForAllNamespaces list or watch objects of kind DaemonSet
*/
func (a *Client) ListAppsV1DaemonSetForAllNamespaces(params *ListAppsV1DaemonSetForAllNamespacesParams) (*ListAppsV1DaemonSetForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1DaemonSetForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1DaemonSetForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1DaemonSetForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1DaemonSetForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1DaemonSetForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1DeploymentForAllNamespaces list or watch objects of kind Deployment
*/
func (a *Client) ListAppsV1DeploymentForAllNamespaces(params *ListAppsV1DeploymentForAllNamespacesParams) (*ListAppsV1DeploymentForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1DeploymentForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1DeploymentForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/deployments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1DeploymentForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1DeploymentForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1DeploymentForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1NamespacedControllerRevision list or watch objects of kind ControllerRevision
*/
func (a *Client) ListAppsV1NamespacedControllerRevision(params *ListAppsV1NamespacedControllerRevisionParams) (*ListAppsV1NamespacedControllerRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1NamespacedControllerRevision",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1NamespacedControllerRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1NamespacedControllerRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1NamespacedDaemonSet list or watch objects of kind DaemonSet
*/
func (a *Client) ListAppsV1NamespacedDaemonSet(params *ListAppsV1NamespacedDaemonSetParams) (*ListAppsV1NamespacedDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1NamespacedDaemonSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1NamespacedDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1NamespacedDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1NamespacedDeployment list or watch objects of kind Deployment
*/
func (a *Client) ListAppsV1NamespacedDeployment(params *ListAppsV1NamespacedDeploymentParams) (*ListAppsV1NamespacedDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1NamespacedDeployment",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1NamespacedDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1NamespacedDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1NamespacedReplicaSet list or watch objects of kind ReplicaSet
*/
func (a *Client) ListAppsV1NamespacedReplicaSet(params *ListAppsV1NamespacedReplicaSetParams) (*ListAppsV1NamespacedReplicaSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1NamespacedReplicaSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1NamespacedReplicaSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1NamespacedReplicaSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1NamespacedStatefulSet list or watch objects of kind StatefulSet
*/
func (a *Client) ListAppsV1NamespacedStatefulSet(params *ListAppsV1NamespacedStatefulSetParams) (*ListAppsV1NamespacedStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1NamespacedStatefulSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1NamespacedStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1NamespacedStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1ReplicaSetForAllNamespaces list or watch objects of kind ReplicaSet
*/
func (a *Client) ListAppsV1ReplicaSetForAllNamespaces(params *ListAppsV1ReplicaSetForAllNamespacesParams) (*ListAppsV1ReplicaSetForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1ReplicaSetForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1ReplicaSetForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1ReplicaSetForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1ReplicaSetForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1ReplicaSetForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAppsV1StatefulSetForAllNamespaces list or watch objects of kind StatefulSet
*/
func (a *Client) ListAppsV1StatefulSetForAllNamespaces(params *ListAppsV1StatefulSetForAllNamespacesParams) (*ListAppsV1StatefulSetForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAppsV1StatefulSetForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAppsV1StatefulSetForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAppsV1StatefulSetForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAppsV1StatefulSetForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAppsV1StatefulSetForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedControllerRevision partially update the specified ControllerRevision
*/
func (a *Client) PatchAppsV1NamespacedControllerRevision(params *PatchAppsV1NamespacedControllerRevisionParams) (*PatchAppsV1NamespacedControllerRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedControllerRevision",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedControllerRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedControllerRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedDaemonSet partially update the specified DaemonSet
*/
func (a *Client) PatchAppsV1NamespacedDaemonSet(params *PatchAppsV1NamespacedDaemonSetParams) (*PatchAppsV1NamespacedDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedDaemonSet",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedDaemonSetStatus partially update status of the specified DaemonSet
*/
func (a *Client) PatchAppsV1NamespacedDaemonSetStatus(params *PatchAppsV1NamespacedDaemonSetStatusParams) (*PatchAppsV1NamespacedDaemonSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedDaemonSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedDaemonSetStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedDaemonSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedDaemonSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedDaemonSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedDeployment partially update the specified Deployment
*/
func (a *Client) PatchAppsV1NamespacedDeployment(params *PatchAppsV1NamespacedDeploymentParams) (*PatchAppsV1NamespacedDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedDeployment",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedDeploymentScale partially update scale of the specified Deployment
*/
func (a *Client) PatchAppsV1NamespacedDeploymentScale(params *PatchAppsV1NamespacedDeploymentScaleParams) (*PatchAppsV1NamespacedDeploymentScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedDeploymentScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedDeploymentScale",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedDeploymentScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedDeploymentScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedDeploymentScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedDeploymentStatus partially update status of the specified Deployment
*/
func (a *Client) PatchAppsV1NamespacedDeploymentStatus(params *PatchAppsV1NamespacedDeploymentStatusParams) (*PatchAppsV1NamespacedDeploymentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedDeploymentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedDeploymentStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedDeploymentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedDeploymentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedDeploymentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedReplicaSet partially update the specified ReplicaSet
*/
func (a *Client) PatchAppsV1NamespacedReplicaSet(params *PatchAppsV1NamespacedReplicaSetParams) (*PatchAppsV1NamespacedReplicaSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedReplicaSet",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedReplicaSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedReplicaSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedReplicaSetScale partially update scale of the specified ReplicaSet
*/
func (a *Client) PatchAppsV1NamespacedReplicaSetScale(params *PatchAppsV1NamespacedReplicaSetScaleParams) (*PatchAppsV1NamespacedReplicaSetScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedReplicaSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedReplicaSetScale",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedReplicaSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedReplicaSetScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedReplicaSetScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedReplicaSetStatus partially update status of the specified ReplicaSet
*/
func (a *Client) PatchAppsV1NamespacedReplicaSetStatus(params *PatchAppsV1NamespacedReplicaSetStatusParams) (*PatchAppsV1NamespacedReplicaSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedReplicaSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedReplicaSetStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedReplicaSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedReplicaSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedReplicaSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedStatefulSet partially update the specified StatefulSet
*/
func (a *Client) PatchAppsV1NamespacedStatefulSet(params *PatchAppsV1NamespacedStatefulSetParams) (*PatchAppsV1NamespacedStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedStatefulSet",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedStatefulSetScale partially update scale of the specified StatefulSet
*/
func (a *Client) PatchAppsV1NamespacedStatefulSetScale(params *PatchAppsV1NamespacedStatefulSetScaleParams) (*PatchAppsV1NamespacedStatefulSetScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedStatefulSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedStatefulSetScale",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedStatefulSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedStatefulSetScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedStatefulSetScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAppsV1NamespacedStatefulSetStatus partially update status of the specified StatefulSet
*/
func (a *Client) PatchAppsV1NamespacedStatefulSetStatus(params *PatchAppsV1NamespacedStatefulSetStatusParams) (*PatchAppsV1NamespacedStatefulSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppsV1NamespacedStatefulSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppsV1NamespacedStatefulSetStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAppsV1NamespacedStatefulSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAppsV1NamespacedStatefulSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchAppsV1NamespacedStatefulSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedControllerRevision read the specified ControllerRevision
*/
func (a *Client) ReadAppsV1NamespacedControllerRevision(params *ReadAppsV1NamespacedControllerRevisionParams) (*ReadAppsV1NamespacedControllerRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedControllerRevision",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedControllerRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedControllerRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedDaemonSet read the specified DaemonSet
*/
func (a *Client) ReadAppsV1NamespacedDaemonSet(params *ReadAppsV1NamespacedDaemonSetParams) (*ReadAppsV1NamespacedDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedDaemonSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedDaemonSetStatus read status of the specified DaemonSet
*/
func (a *Client) ReadAppsV1NamespacedDaemonSetStatus(params *ReadAppsV1NamespacedDaemonSetStatusParams) (*ReadAppsV1NamespacedDaemonSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedDaemonSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedDaemonSetStatus",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedDaemonSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedDaemonSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedDaemonSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedDeployment read the specified Deployment
*/
func (a *Client) ReadAppsV1NamespacedDeployment(params *ReadAppsV1NamespacedDeploymentParams) (*ReadAppsV1NamespacedDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedDeployment",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedDeploymentScale read scale of the specified Deployment
*/
func (a *Client) ReadAppsV1NamespacedDeploymentScale(params *ReadAppsV1NamespacedDeploymentScaleParams) (*ReadAppsV1NamespacedDeploymentScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedDeploymentScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedDeploymentScale",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedDeploymentScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedDeploymentScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedDeploymentScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedDeploymentStatus read status of the specified Deployment
*/
func (a *Client) ReadAppsV1NamespacedDeploymentStatus(params *ReadAppsV1NamespacedDeploymentStatusParams) (*ReadAppsV1NamespacedDeploymentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedDeploymentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedDeploymentStatus",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedDeploymentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedDeploymentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedDeploymentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedReplicaSet read the specified ReplicaSet
*/
func (a *Client) ReadAppsV1NamespacedReplicaSet(params *ReadAppsV1NamespacedReplicaSetParams) (*ReadAppsV1NamespacedReplicaSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedReplicaSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedReplicaSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedReplicaSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedReplicaSetScale read scale of the specified ReplicaSet
*/
func (a *Client) ReadAppsV1NamespacedReplicaSetScale(params *ReadAppsV1NamespacedReplicaSetScaleParams) (*ReadAppsV1NamespacedReplicaSetScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedReplicaSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedReplicaSetScale",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedReplicaSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedReplicaSetScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedReplicaSetScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedReplicaSetStatus read status of the specified ReplicaSet
*/
func (a *Client) ReadAppsV1NamespacedReplicaSetStatus(params *ReadAppsV1NamespacedReplicaSetStatusParams) (*ReadAppsV1NamespacedReplicaSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedReplicaSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedReplicaSetStatus",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedReplicaSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedReplicaSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedReplicaSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedStatefulSet read the specified StatefulSet
*/
func (a *Client) ReadAppsV1NamespacedStatefulSet(params *ReadAppsV1NamespacedStatefulSetParams) (*ReadAppsV1NamespacedStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedStatefulSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedStatefulSetScale read scale of the specified StatefulSet
*/
func (a *Client) ReadAppsV1NamespacedStatefulSetScale(params *ReadAppsV1NamespacedStatefulSetScaleParams) (*ReadAppsV1NamespacedStatefulSetScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedStatefulSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedStatefulSetScale",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedStatefulSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedStatefulSetScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedStatefulSetScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadAppsV1NamespacedStatefulSetStatus read status of the specified StatefulSet
*/
func (a *Client) ReadAppsV1NamespacedStatefulSetStatus(params *ReadAppsV1NamespacedStatefulSetStatusParams) (*ReadAppsV1NamespacedStatefulSetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadAppsV1NamespacedStatefulSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readAppsV1NamespacedStatefulSetStatus",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadAppsV1NamespacedStatefulSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadAppsV1NamespacedStatefulSetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readAppsV1NamespacedStatefulSetStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedControllerRevision replace the specified ControllerRevision
*/
func (a *Client) ReplaceAppsV1NamespacedControllerRevision(params *ReplaceAppsV1NamespacedControllerRevisionParams) (*ReplaceAppsV1NamespacedControllerRevisionOK, *ReplaceAppsV1NamespacedControllerRevisionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedControllerRevision",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedControllerRevisionOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedControllerRevisionCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedDaemonSet replace the specified DaemonSet
*/
func (a *Client) ReplaceAppsV1NamespacedDaemonSet(params *ReplaceAppsV1NamespacedDaemonSetParams) (*ReplaceAppsV1NamespacedDaemonSetOK, *ReplaceAppsV1NamespacedDaemonSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedDaemonSet",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedDaemonSetOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedDaemonSetCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedDaemonSetStatus replace status of the specified DaemonSet
*/
func (a *Client) ReplaceAppsV1NamespacedDaemonSetStatus(params *ReplaceAppsV1NamespacedDaemonSetStatusParams) (*ReplaceAppsV1NamespacedDaemonSetStatusOK, *ReplaceAppsV1NamespacedDaemonSetStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedDaemonSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedDaemonSetStatus",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedDaemonSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedDaemonSetStatusOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedDaemonSetStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedDeployment replace the specified Deployment
*/
func (a *Client) ReplaceAppsV1NamespacedDeployment(params *ReplaceAppsV1NamespacedDeploymentParams) (*ReplaceAppsV1NamespacedDeploymentOK, *ReplaceAppsV1NamespacedDeploymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedDeployment",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedDeploymentOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedDeploymentCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedDeploymentScale replace scale of the specified Deployment
*/
func (a *Client) ReplaceAppsV1NamespacedDeploymentScale(params *ReplaceAppsV1NamespacedDeploymentScaleParams) (*ReplaceAppsV1NamespacedDeploymentScaleOK, *ReplaceAppsV1NamespacedDeploymentScaleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedDeploymentScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedDeploymentScale",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedDeploymentScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedDeploymentScaleOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedDeploymentScaleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedDeploymentStatus replace status of the specified Deployment
*/
func (a *Client) ReplaceAppsV1NamespacedDeploymentStatus(params *ReplaceAppsV1NamespacedDeploymentStatusParams) (*ReplaceAppsV1NamespacedDeploymentStatusOK, *ReplaceAppsV1NamespacedDeploymentStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedDeploymentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedDeploymentStatus",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedDeploymentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedDeploymentStatusOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedDeploymentStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedReplicaSet replace the specified ReplicaSet
*/
func (a *Client) ReplaceAppsV1NamespacedReplicaSet(params *ReplaceAppsV1NamespacedReplicaSetParams) (*ReplaceAppsV1NamespacedReplicaSetOK, *ReplaceAppsV1NamespacedReplicaSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedReplicaSet",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedReplicaSetCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedReplicaSetScale replace scale of the specified ReplicaSet
*/
func (a *Client) ReplaceAppsV1NamespacedReplicaSetScale(params *ReplaceAppsV1NamespacedReplicaSetScaleParams) (*ReplaceAppsV1NamespacedReplicaSetScaleOK, *ReplaceAppsV1NamespacedReplicaSetScaleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedReplicaSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedReplicaSetScale",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedReplicaSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetScaleOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedReplicaSetScaleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedReplicaSetStatus replace status of the specified ReplicaSet
*/
func (a *Client) ReplaceAppsV1NamespacedReplicaSetStatus(params *ReplaceAppsV1NamespacedReplicaSetStatusParams) (*ReplaceAppsV1NamespacedReplicaSetStatusOK, *ReplaceAppsV1NamespacedReplicaSetStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedReplicaSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedReplicaSetStatus",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedReplicaSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedReplicaSetStatusOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedReplicaSetStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedStatefulSet replace the specified StatefulSet
*/
func (a *Client) ReplaceAppsV1NamespacedStatefulSet(params *ReplaceAppsV1NamespacedStatefulSetParams) (*ReplaceAppsV1NamespacedStatefulSetOK, *ReplaceAppsV1NamespacedStatefulSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedStatefulSet",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedStatefulSetCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedStatefulSetScale replace scale of the specified StatefulSet
*/
func (a *Client) ReplaceAppsV1NamespacedStatefulSetScale(params *ReplaceAppsV1NamespacedStatefulSetScaleParams) (*ReplaceAppsV1NamespacedStatefulSetScaleOK, *ReplaceAppsV1NamespacedStatefulSetScaleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedStatefulSetScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedStatefulSetScale",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedStatefulSetScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetScaleOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedStatefulSetScaleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAppsV1NamespacedStatefulSetStatus replace status of the specified StatefulSet
*/
func (a *Client) ReplaceAppsV1NamespacedStatefulSetStatus(params *ReplaceAppsV1NamespacedStatefulSetStatusParams) (*ReplaceAppsV1NamespacedStatefulSetStatusOK, *ReplaceAppsV1NamespacedStatefulSetStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAppsV1NamespacedStatefulSetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceAppsV1NamespacedStatefulSetStatus",
		Method:             "PUT",
		PathPattern:        "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceAppsV1NamespacedStatefulSetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceAppsV1NamespacedStatefulSetStatusOK:
		return value, nil, nil
	case *ReplaceAppsV1NamespacedStatefulSetStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for apps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1ControllerRevisionListForAllNamespaces watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1ControllerRevisionListForAllNamespaces(params *WatchAppsV1ControllerRevisionListForAllNamespacesParams) (*WatchAppsV1ControllerRevisionListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1ControllerRevisionListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1ControllerRevisionListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1ControllerRevisionListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1ControllerRevisionListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1ControllerRevisionListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1DaemonSetListForAllNamespaces watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1DaemonSetListForAllNamespaces(params *WatchAppsV1DaemonSetListForAllNamespacesParams) (*WatchAppsV1DaemonSetListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1DaemonSetListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1DaemonSetListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1DaemonSetListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1DaemonSetListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1DaemonSetListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1DeploymentListForAllNamespaces watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1DeploymentListForAllNamespaces(params *WatchAppsV1DeploymentListForAllNamespacesParams) (*WatchAppsV1DeploymentListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1DeploymentListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1DeploymentListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/deployments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1DeploymentListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1DeploymentListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1DeploymentListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedControllerRevision watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchAppsV1NamespacedControllerRevision(params *WatchAppsV1NamespacedControllerRevisionParams) (*WatchAppsV1NamespacedControllerRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedControllerRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedControllerRevision",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedControllerRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedControllerRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedControllerRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedControllerRevisionList watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1NamespacedControllerRevisionList(params *WatchAppsV1NamespacedControllerRevisionListParams) (*WatchAppsV1NamespacedControllerRevisionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedControllerRevisionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedControllerRevisionList",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedControllerRevisionListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedControllerRevisionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedControllerRevisionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedDaemonSet watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchAppsV1NamespacedDaemonSet(params *WatchAppsV1NamespacedDaemonSetParams) (*WatchAppsV1NamespacedDaemonSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedDaemonSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedDaemonSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedDaemonSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedDaemonSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedDaemonSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedDaemonSetList watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1NamespacedDaemonSetList(params *WatchAppsV1NamespacedDaemonSetListParams) (*WatchAppsV1NamespacedDaemonSetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedDaemonSetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedDaemonSetList",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedDaemonSetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedDaemonSetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedDaemonSetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedDeployment watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchAppsV1NamespacedDeployment(params *WatchAppsV1NamespacedDeploymentParams) (*WatchAppsV1NamespacedDeploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedDeploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedDeployment",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedDeploymentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedDeploymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedDeployment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedDeploymentList watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1NamespacedDeploymentList(params *WatchAppsV1NamespacedDeploymentListParams) (*WatchAppsV1NamespacedDeploymentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedDeploymentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedDeploymentList",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/deployments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedDeploymentListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedDeploymentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedDeploymentList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedReplicaSet watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchAppsV1NamespacedReplicaSet(params *WatchAppsV1NamespacedReplicaSetParams) (*WatchAppsV1NamespacedReplicaSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedReplicaSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedReplicaSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedReplicaSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedReplicaSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedReplicaSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedReplicaSetList watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1NamespacedReplicaSetList(params *WatchAppsV1NamespacedReplicaSetListParams) (*WatchAppsV1NamespacedReplicaSetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedReplicaSetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedReplicaSetList",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedReplicaSetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedReplicaSetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedReplicaSetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedStatefulSet watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchAppsV1NamespacedStatefulSet(params *WatchAppsV1NamespacedStatefulSetParams) (*WatchAppsV1NamespacedStatefulSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedStatefulSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedStatefulSet",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedStatefulSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedStatefulSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedStatefulSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1NamespacedStatefulSetList watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1NamespacedStatefulSetList(params *WatchAppsV1NamespacedStatefulSetListParams) (*WatchAppsV1NamespacedStatefulSetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1NamespacedStatefulSetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1NamespacedStatefulSetList",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1NamespacedStatefulSetListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1NamespacedStatefulSetListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1NamespacedStatefulSetList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1ReplicaSetListForAllNamespaces watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1ReplicaSetListForAllNamespaces(params *WatchAppsV1ReplicaSetListForAllNamespacesParams) (*WatchAppsV1ReplicaSetListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1ReplicaSetListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1ReplicaSetListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/replicasets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1ReplicaSetListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1ReplicaSetListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1ReplicaSetListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchAppsV1StatefulSetListForAllNamespaces watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchAppsV1StatefulSetListForAllNamespaces(params *WatchAppsV1StatefulSetListForAllNamespacesParams) (*WatchAppsV1StatefulSetListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchAppsV1StatefulSetListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchAppsV1StatefulSetListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/apps/v1/watch/statefulsets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchAppsV1StatefulSetListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchAppsV1StatefulSetListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchAppsV1StatefulSetListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
