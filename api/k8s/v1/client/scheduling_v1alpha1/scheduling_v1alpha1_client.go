// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package scheduling_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scheduling v1alpha1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scheduling v1alpha1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSchedulingV1alpha1PriorityClass(params *CreateSchedulingV1alpha1PriorityClassParams) (*CreateSchedulingV1alpha1PriorityClassOK, *CreateSchedulingV1alpha1PriorityClassCreated, *CreateSchedulingV1alpha1PriorityClassAccepted, error)

	DeleteSchedulingV1alpha1CollectionPriorityClass(params *DeleteSchedulingV1alpha1CollectionPriorityClassParams) (*DeleteSchedulingV1alpha1CollectionPriorityClassOK, error)

	DeleteSchedulingV1alpha1PriorityClass(params *DeleteSchedulingV1alpha1PriorityClassParams) (*DeleteSchedulingV1alpha1PriorityClassOK, *DeleteSchedulingV1alpha1PriorityClassAccepted, error)

	GetSchedulingV1alpha1APIResources(params *GetSchedulingV1alpha1APIResourcesParams) (*GetSchedulingV1alpha1APIResourcesOK, error)

	ListSchedulingV1alpha1PriorityClass(params *ListSchedulingV1alpha1PriorityClassParams) (*ListSchedulingV1alpha1PriorityClassOK, error)

	PatchSchedulingV1alpha1PriorityClass(params *PatchSchedulingV1alpha1PriorityClassParams) (*PatchSchedulingV1alpha1PriorityClassOK, error)

	ReadSchedulingV1alpha1PriorityClass(params *ReadSchedulingV1alpha1PriorityClassParams) (*ReadSchedulingV1alpha1PriorityClassOK, error)

	ReplaceSchedulingV1alpha1PriorityClass(params *ReplaceSchedulingV1alpha1PriorityClassParams) (*ReplaceSchedulingV1alpha1PriorityClassOK, *ReplaceSchedulingV1alpha1PriorityClassCreated, error)

	WatchSchedulingV1alpha1PriorityClass(params *WatchSchedulingV1alpha1PriorityClassParams) (*WatchSchedulingV1alpha1PriorityClassOK, error)

	WatchSchedulingV1alpha1PriorityClassList(params *WatchSchedulingV1alpha1PriorityClassListParams) (*WatchSchedulingV1alpha1PriorityClassListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSchedulingV1alpha1PriorityClass create a PriorityClass
*/
func (a *Client) CreateSchedulingV1alpha1PriorityClass(params *CreateSchedulingV1alpha1PriorityClassParams) (*CreateSchedulingV1alpha1PriorityClassOK, *CreateSchedulingV1alpha1PriorityClassCreated, *CreateSchedulingV1alpha1PriorityClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSchedulingV1alpha1PriorityClass",
		Method:             "POST",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSchedulingV1alpha1PriorityClassOK:
		return value, nil, nil, nil
	case *CreateSchedulingV1alpha1PriorityClassCreated:
		return nil, value, nil, nil
	case *CreateSchedulingV1alpha1PriorityClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduling_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSchedulingV1alpha1CollectionPriorityClass delete collection of PriorityClass
*/
func (a *Client) DeleteSchedulingV1alpha1CollectionPriorityClass(params *DeleteSchedulingV1alpha1CollectionPriorityClassParams) (*DeleteSchedulingV1alpha1CollectionPriorityClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchedulingV1alpha1CollectionPriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSchedulingV1alpha1CollectionPriorityClass",
		Method:             "DELETE",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSchedulingV1alpha1CollectionPriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSchedulingV1alpha1CollectionPriorityClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSchedulingV1alpha1CollectionPriorityClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSchedulingV1alpha1PriorityClass delete a PriorityClass
*/
func (a *Client) DeleteSchedulingV1alpha1PriorityClass(params *DeleteSchedulingV1alpha1PriorityClassParams) (*DeleteSchedulingV1alpha1PriorityClassOK, *DeleteSchedulingV1alpha1PriorityClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSchedulingV1alpha1PriorityClass",
		Method:             "DELETE",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSchedulingV1alpha1PriorityClassOK:
		return value, nil, nil
	case *DeleteSchedulingV1alpha1PriorityClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduling_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchedulingV1alpha1APIResources get available resources
*/
func (a *Client) GetSchedulingV1alpha1APIResources(params *GetSchedulingV1alpha1APIResourcesParams) (*GetSchedulingV1alpha1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulingV1alpha1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchedulingV1alpha1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSchedulingV1alpha1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchedulingV1alpha1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchedulingV1alpha1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSchedulingV1alpha1PriorityClass list or watch objects of kind PriorityClass
*/
func (a *Client) ListSchedulingV1alpha1PriorityClass(params *ListSchedulingV1alpha1PriorityClassParams) (*ListSchedulingV1alpha1PriorityClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSchedulingV1alpha1PriorityClass",
		Method:             "GET",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSchedulingV1alpha1PriorityClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSchedulingV1alpha1PriorityClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchSchedulingV1alpha1PriorityClass partially update the specified PriorityClass
*/
func (a *Client) PatchSchedulingV1alpha1PriorityClass(params *PatchSchedulingV1alpha1PriorityClassParams) (*PatchSchedulingV1alpha1PriorityClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSchedulingV1alpha1PriorityClass",
		Method:             "PATCH",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSchedulingV1alpha1PriorityClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSchedulingV1alpha1PriorityClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadSchedulingV1alpha1PriorityClass read the specified PriorityClass
*/
func (a *Client) ReadSchedulingV1alpha1PriorityClass(params *ReadSchedulingV1alpha1PriorityClassParams) (*ReadSchedulingV1alpha1PriorityClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readSchedulingV1alpha1PriorityClass",
		Method:             "GET",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSchedulingV1alpha1PriorityClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readSchedulingV1alpha1PriorityClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSchedulingV1alpha1PriorityClass replace the specified PriorityClass
*/
func (a *Client) ReplaceSchedulingV1alpha1PriorityClass(params *ReplaceSchedulingV1alpha1PriorityClassParams) (*ReplaceSchedulingV1alpha1PriorityClassOK, *ReplaceSchedulingV1alpha1PriorityClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceSchedulingV1alpha1PriorityClass",
		Method:             "PUT",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceSchedulingV1alpha1PriorityClassOK:
		return value, nil, nil
	case *ReplaceSchedulingV1alpha1PriorityClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduling_v1alpha1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchSchedulingV1alpha1PriorityClass watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchSchedulingV1alpha1PriorityClass(params *WatchSchedulingV1alpha1PriorityClassParams) (*WatchSchedulingV1alpha1PriorityClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchSchedulingV1alpha1PriorityClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchSchedulingV1alpha1PriorityClass",
		Method:             "GET",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchSchedulingV1alpha1PriorityClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchSchedulingV1alpha1PriorityClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchSchedulingV1alpha1PriorityClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchSchedulingV1alpha1PriorityClassList watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchSchedulingV1alpha1PriorityClassList(params *WatchSchedulingV1alpha1PriorityClassListParams) (*WatchSchedulingV1alpha1PriorityClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchSchedulingV1alpha1PriorityClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchSchedulingV1alpha1PriorityClassList",
		Method:             "GET",
		PathPattern:        "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchSchedulingV1alpha1PriorityClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchSchedulingV1alpha1PriorityClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchSchedulingV1alpha1PriorityClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
