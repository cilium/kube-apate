// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package events_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new events v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for events v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEventsV1beta1NamespacedEvent(params *CreateEventsV1beta1NamespacedEventParams) (*CreateEventsV1beta1NamespacedEventOK, *CreateEventsV1beta1NamespacedEventCreated, *CreateEventsV1beta1NamespacedEventAccepted, error)

	DeleteEventsV1beta1CollectionNamespacedEvent(params *DeleteEventsV1beta1CollectionNamespacedEventParams) (*DeleteEventsV1beta1CollectionNamespacedEventOK, error)

	DeleteEventsV1beta1NamespacedEvent(params *DeleteEventsV1beta1NamespacedEventParams) (*DeleteEventsV1beta1NamespacedEventOK, *DeleteEventsV1beta1NamespacedEventAccepted, error)

	GetEventsV1beta1APIResources(params *GetEventsV1beta1APIResourcesParams) (*GetEventsV1beta1APIResourcesOK, error)

	ListEventsV1beta1EventForAllNamespaces(params *ListEventsV1beta1EventForAllNamespacesParams) (*ListEventsV1beta1EventForAllNamespacesOK, error)

	ListEventsV1beta1NamespacedEvent(params *ListEventsV1beta1NamespacedEventParams) (*ListEventsV1beta1NamespacedEventOK, error)

	PatchEventsV1beta1NamespacedEvent(params *PatchEventsV1beta1NamespacedEventParams) (*PatchEventsV1beta1NamespacedEventOK, error)

	ReadEventsV1beta1NamespacedEvent(params *ReadEventsV1beta1NamespacedEventParams) (*ReadEventsV1beta1NamespacedEventOK, error)

	ReplaceEventsV1beta1NamespacedEvent(params *ReplaceEventsV1beta1NamespacedEventParams) (*ReplaceEventsV1beta1NamespacedEventOK, *ReplaceEventsV1beta1NamespacedEventCreated, error)

	WatchEventsV1beta1EventListForAllNamespaces(params *WatchEventsV1beta1EventListForAllNamespacesParams) (*WatchEventsV1beta1EventListForAllNamespacesOK, error)

	WatchEventsV1beta1NamespacedEvent(params *WatchEventsV1beta1NamespacedEventParams) (*WatchEventsV1beta1NamespacedEventOK, error)

	WatchEventsV1beta1NamespacedEventList(params *WatchEventsV1beta1NamespacedEventListParams) (*WatchEventsV1beta1NamespacedEventListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEventsV1beta1NamespacedEvent create an Event
*/
func (a *Client) CreateEventsV1beta1NamespacedEvent(params *CreateEventsV1beta1NamespacedEventParams) (*CreateEventsV1beta1NamespacedEventOK, *CreateEventsV1beta1NamespacedEventCreated, *CreateEventsV1beta1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventsV1beta1NamespacedEvent",
		Method:             "POST",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEventsV1beta1NamespacedEventOK:
		return value, nil, nil, nil
	case *CreateEventsV1beta1NamespacedEventCreated:
		return nil, value, nil, nil
	case *CreateEventsV1beta1NamespacedEventAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEventsV1beta1CollectionNamespacedEvent delete collection of Event
*/
func (a *Client) DeleteEventsV1beta1CollectionNamespacedEvent(params *DeleteEventsV1beta1CollectionNamespacedEventParams) (*DeleteEventsV1beta1CollectionNamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsV1beta1CollectionNamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventsV1beta1CollectionNamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventsV1beta1CollectionNamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEventsV1beta1CollectionNamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEventsV1beta1CollectionNamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEventsV1beta1NamespacedEvent delete an Event
*/
func (a *Client) DeleteEventsV1beta1NamespacedEvent(params *DeleteEventsV1beta1NamespacedEventParams) (*DeleteEventsV1beta1NamespacedEventOK, *DeleteEventsV1beta1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventsV1beta1NamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteEventsV1beta1NamespacedEventOK:
		return value, nil, nil
	case *DeleteEventsV1beta1NamespacedEventAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEventsV1beta1APIResources get available resources
*/
func (a *Client) GetEventsV1beta1APIResources(params *GetEventsV1beta1APIResourcesParams) (*GetEventsV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventsV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEventsV1beta1EventForAllNamespaces list or watch objects of kind Event
*/
func (a *Client) ListEventsV1beta1EventForAllNamespaces(params *ListEventsV1beta1EventForAllNamespacesParams) (*ListEventsV1beta1EventForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsV1beta1EventForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventsV1beta1EventForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsV1beta1EventForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsV1beta1EventForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsV1beta1EventForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEventsV1beta1NamespacedEvent list or watch objects of kind Event
*/
func (a *Client) ListEventsV1beta1NamespacedEvent(params *ListEventsV1beta1NamespacedEventParams) (*ListEventsV1beta1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventsV1beta1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsV1beta1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listEventsV1beta1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchEventsV1beta1NamespacedEvent partially update the specified Event
*/
func (a *Client) PatchEventsV1beta1NamespacedEvent(params *PatchEventsV1beta1NamespacedEventParams) (*PatchEventsV1beta1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEventsV1beta1NamespacedEvent",
		Method:             "PATCH",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEventsV1beta1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchEventsV1beta1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadEventsV1beta1NamespacedEvent read the specified Event
*/
func (a *Client) ReadEventsV1beta1NamespacedEvent(params *ReadEventsV1beta1NamespacedEventParams) (*ReadEventsV1beta1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readEventsV1beta1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadEventsV1beta1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readEventsV1beta1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceEventsV1beta1NamespacedEvent replace the specified Event
*/
func (a *Client) ReplaceEventsV1beta1NamespacedEvent(params *ReplaceEventsV1beta1NamespacedEventParams) (*ReplaceEventsV1beta1NamespacedEventOK, *ReplaceEventsV1beta1NamespacedEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceEventsV1beta1NamespacedEvent",
		Method:             "PUT",
		PathPattern:        "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceEventsV1beta1NamespacedEventOK:
		return value, nil, nil
	case *ReplaceEventsV1beta1NamespacedEventCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for events_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1beta1EventListForAllNamespaces watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchEventsV1beta1EventListForAllNamespaces(params *WatchEventsV1beta1EventListForAllNamespacesParams) (*WatchEventsV1beta1EventListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1beta1EventListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1beta1EventListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/watch/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1beta1EventListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1beta1EventListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1beta1EventListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1beta1NamespacedEvent watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchEventsV1beta1NamespacedEvent(params *WatchEventsV1beta1NamespacedEventParams) (*WatchEventsV1beta1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1beta1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1beta1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1beta1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1beta1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1beta1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchEventsV1beta1NamespacedEventList watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchEventsV1beta1NamespacedEventList(params *WatchEventsV1beta1NamespacedEventListParams) (*WatchEventsV1beta1NamespacedEventListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchEventsV1beta1NamespacedEventListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchEventsV1beta1NamespacedEventList",
		Method:             "GET",
		PathPattern:        "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchEventsV1beta1NamespacedEventListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchEventsV1beta1NamespacedEventListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchEventsV1beta1NamespacedEventList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
