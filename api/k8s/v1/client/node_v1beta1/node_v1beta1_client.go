// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package node_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new node v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for node v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNodeV1beta1RuntimeClass(params *CreateNodeV1beta1RuntimeClassParams) (*CreateNodeV1beta1RuntimeClassOK, *CreateNodeV1beta1RuntimeClassCreated, *CreateNodeV1beta1RuntimeClassAccepted, error)

	DeleteNodeV1beta1CollectionRuntimeClass(params *DeleteNodeV1beta1CollectionRuntimeClassParams) (*DeleteNodeV1beta1CollectionRuntimeClassOK, error)

	DeleteNodeV1beta1RuntimeClass(params *DeleteNodeV1beta1RuntimeClassParams) (*DeleteNodeV1beta1RuntimeClassOK, *DeleteNodeV1beta1RuntimeClassAccepted, error)

	GetNodeV1beta1APIResources(params *GetNodeV1beta1APIResourcesParams) (*GetNodeV1beta1APIResourcesOK, error)

	ListNodeV1beta1RuntimeClass(params *ListNodeV1beta1RuntimeClassParams) (*ListNodeV1beta1RuntimeClassOK, error)

	PatchNodeV1beta1RuntimeClass(params *PatchNodeV1beta1RuntimeClassParams) (*PatchNodeV1beta1RuntimeClassOK, error)

	ReadNodeV1beta1RuntimeClass(params *ReadNodeV1beta1RuntimeClassParams) (*ReadNodeV1beta1RuntimeClassOK, error)

	ReplaceNodeV1beta1RuntimeClass(params *ReplaceNodeV1beta1RuntimeClassParams) (*ReplaceNodeV1beta1RuntimeClassOK, *ReplaceNodeV1beta1RuntimeClassCreated, error)

	WatchNodeV1beta1RuntimeClass(params *WatchNodeV1beta1RuntimeClassParams) (*WatchNodeV1beta1RuntimeClassOK, error)

	WatchNodeV1beta1RuntimeClassList(params *WatchNodeV1beta1RuntimeClassListParams) (*WatchNodeV1beta1RuntimeClassListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNodeV1beta1RuntimeClass create a RuntimeClass
*/
func (a *Client) CreateNodeV1beta1RuntimeClass(params *CreateNodeV1beta1RuntimeClassParams) (*CreateNodeV1beta1RuntimeClassOK, *CreateNodeV1beta1RuntimeClassCreated, *CreateNodeV1beta1RuntimeClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNodeV1beta1RuntimeClass",
		Method:             "POST",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNodeV1beta1RuntimeClassOK:
		return value, nil, nil, nil
	case *CreateNodeV1beta1RuntimeClassCreated:
		return nil, value, nil, nil
	case *CreateNodeV1beta1RuntimeClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for node_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNodeV1beta1CollectionRuntimeClass delete collection of RuntimeClass
*/
func (a *Client) DeleteNodeV1beta1CollectionRuntimeClass(params *DeleteNodeV1beta1CollectionRuntimeClassParams) (*DeleteNodeV1beta1CollectionRuntimeClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeV1beta1CollectionRuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNodeV1beta1CollectionRuntimeClass",
		Method:             "DELETE",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeV1beta1CollectionRuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNodeV1beta1CollectionRuntimeClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNodeV1beta1CollectionRuntimeClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNodeV1beta1RuntimeClass delete a RuntimeClass
*/
func (a *Client) DeleteNodeV1beta1RuntimeClass(params *DeleteNodeV1beta1RuntimeClassParams) (*DeleteNodeV1beta1RuntimeClassOK, *DeleteNodeV1beta1RuntimeClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNodeV1beta1RuntimeClass",
		Method:             "DELETE",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNodeV1beta1RuntimeClassOK:
		return value, nil, nil
	case *DeleteNodeV1beta1RuntimeClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for node_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeV1beta1APIResources get available resources
*/
func (a *Client) GetNodeV1beta1APIResources(params *GetNodeV1beta1APIResourcesParams) (*GetNodeV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/node.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListNodeV1beta1RuntimeClass list or watch objects of kind RuntimeClass
*/
func (a *Client) ListNodeV1beta1RuntimeClass(params *ListNodeV1beta1RuntimeClassParams) (*ListNodeV1beta1RuntimeClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNodeV1beta1RuntimeClass",
		Method:             "GET",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNodeV1beta1RuntimeClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listNodeV1beta1RuntimeClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchNodeV1beta1RuntimeClass partially update the specified RuntimeClass
*/
func (a *Client) PatchNodeV1beta1RuntimeClass(params *PatchNodeV1beta1RuntimeClassParams) (*PatchNodeV1beta1RuntimeClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchNodeV1beta1RuntimeClass",
		Method:             "PATCH",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchNodeV1beta1RuntimeClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchNodeV1beta1RuntimeClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadNodeV1beta1RuntimeClass read the specified RuntimeClass
*/
func (a *Client) ReadNodeV1beta1RuntimeClass(params *ReadNodeV1beta1RuntimeClassParams) (*ReadNodeV1beta1RuntimeClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readNodeV1beta1RuntimeClass",
		Method:             "GET",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadNodeV1beta1RuntimeClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readNodeV1beta1RuntimeClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceNodeV1beta1RuntimeClass replace the specified RuntimeClass
*/
func (a *Client) ReplaceNodeV1beta1RuntimeClass(params *ReplaceNodeV1beta1RuntimeClassParams) (*ReplaceNodeV1beta1RuntimeClassOK, *ReplaceNodeV1beta1RuntimeClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceNodeV1beta1RuntimeClass",
		Method:             "PUT",
		PathPattern:        "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNodeV1beta1RuntimeClassOK:
		return value, nil, nil
	case *ReplaceNodeV1beta1RuntimeClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for node_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNodeV1beta1RuntimeClass watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchNodeV1beta1RuntimeClass(params *WatchNodeV1beta1RuntimeClassParams) (*WatchNodeV1beta1RuntimeClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNodeV1beta1RuntimeClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNodeV1beta1RuntimeClass",
		Method:             "GET",
		PathPattern:        "/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNodeV1beta1RuntimeClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNodeV1beta1RuntimeClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNodeV1beta1RuntimeClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchNodeV1beta1RuntimeClassList watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchNodeV1beta1RuntimeClassList(params *WatchNodeV1beta1RuntimeClassListParams) (*WatchNodeV1beta1RuntimeClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchNodeV1beta1RuntimeClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchNodeV1beta1RuntimeClassList",
		Method:             "GET",
		PathPattern:        "/apis/node.k8s.io/v1beta1/watch/runtimeclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchNodeV1beta1RuntimeClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchNodeV1beta1RuntimeClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchNodeV1beta1RuntimeClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
