// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cilium/kube-apate/api/k8s/v1/models"
)

// NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParams creates a new ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams object
// with the default values initialized.
func NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParams() *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	var ()
	return &ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithTimeout creates a new ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithTimeout(timeout time.Duration) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	var ()
	return &ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams{

		timeout: timeout,
	}
}

// NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithContext creates a new ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithContext(ctx context.Context) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	var ()
	return &ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams{

		Context: ctx,
	}
}

// NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithHTTPClient creates a new ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParamsWithHTTPClient(client *http.Client) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	var ()
	return &ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams{
		HTTPClient: client,
	}
}

/*ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams contains all the parameters to send to the API endpoint
for the replace certificates v1beta1 certificate signing request status operation typically these are written to a http.Request
*/
type ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams struct {

	/*Body*/
	Body *models.IoK8sAPICertificatesV1beta1CertificateSigningRequest
	/*DryRun
	  When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed

	*/
	DryRun *string
	/*FieldManager
	  fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.

	*/
	FieldManager *string
	/*Name
	  name of the CertificateSigningRequest

	*/
	Name string
	/*Pretty
	  If 'true', then the output is pretty printed.

	*/
	Pretty *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithTimeout(timeout time.Duration) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithContext(ctx context.Context) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithHTTPClient(client *http.Client) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithBody(body *models.IoK8sAPICertificatesV1beta1CertificateSigningRequest) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetBody(body *models.IoK8sAPICertificatesV1beta1CertificateSigningRequest) {
	o.Body = body
}

// WithDryRun adds the dryRun to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithDryRun(dryRun *string) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetDryRun(dryRun)
	return o
}

// SetDryRun adds the dryRun to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetDryRun(dryRun *string) {
	o.DryRun = dryRun
}

// WithFieldManager adds the fieldManager to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithFieldManager(fieldManager *string) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetFieldManager(fieldManager)
	return o
}

// SetFieldManager adds the fieldManager to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetFieldManager(fieldManager *string) {
	o.FieldManager = fieldManager
}

// WithName adds the name to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithName(name string) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetName(name string) {
	o.Name = name
}

// WithPretty adds the pretty to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WithPretty(pretty *string) *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams {
	o.SetPretty(pretty)
	return o
}

// SetPretty adds the pretty to the replace certificates v1beta1 certificate signing request status params
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) SetPretty(pretty *string) {
	o.Pretty = pretty
}

// WriteToRequest writes these params to a swagger request
func (o *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.DryRun != nil {

		// query param dryRun
		var qrDryRun string
		if o.DryRun != nil {
			qrDryRun = *o.DryRun
		}
		qDryRun := qrDryRun
		if qDryRun != "" {
			if err := r.SetQueryParam("dryRun", qDryRun); err != nil {
				return err
			}
		}

	}

	if o.FieldManager != nil {

		// query param fieldManager
		var qrFieldManager string
		if o.FieldManager != nil {
			qrFieldManager = *o.FieldManager
		}
		qFieldManager := qrFieldManager
		if qFieldManager != "" {
			if err := r.SetQueryParam("fieldManager", qFieldManager); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Pretty != nil {

		// query param pretty
		var qrPretty string
		if o.Pretty != nil {
			qrPretty = *o.Pretty
		}
		qPretty := qrPretty
		if qPretty != "" {
			if err := r.SetQueryParam("pretty", qPretty); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
