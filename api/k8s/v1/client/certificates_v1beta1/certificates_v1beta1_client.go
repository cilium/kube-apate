// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificates v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for certificates v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCertificatesV1beta1CertificateSigningRequest(params *CreateCertificatesV1beta1CertificateSigningRequestParams) (*CreateCertificatesV1beta1CertificateSigningRequestOK, *CreateCertificatesV1beta1CertificateSigningRequestCreated, *CreateCertificatesV1beta1CertificateSigningRequestAccepted, error)

	DeleteCertificatesV1beta1CertificateSigningRequest(params *DeleteCertificatesV1beta1CertificateSigningRequestParams) (*DeleteCertificatesV1beta1CertificateSigningRequestOK, *DeleteCertificatesV1beta1CertificateSigningRequestAccepted, error)

	DeleteCertificatesV1beta1CollectionCertificateSigningRequest(params *DeleteCertificatesV1beta1CollectionCertificateSigningRequestParams) (*DeleteCertificatesV1beta1CollectionCertificateSigningRequestOK, error)

	GetCertificatesV1beta1APIResources(params *GetCertificatesV1beta1APIResourcesParams) (*GetCertificatesV1beta1APIResourcesOK, error)

	ListCertificatesV1beta1CertificateSigningRequest(params *ListCertificatesV1beta1CertificateSigningRequestParams) (*ListCertificatesV1beta1CertificateSigningRequestOK, error)

	PatchCertificatesV1beta1CertificateSigningRequest(params *PatchCertificatesV1beta1CertificateSigningRequestParams) (*PatchCertificatesV1beta1CertificateSigningRequestOK, error)

	PatchCertificatesV1beta1CertificateSigningRequestApproval(params *PatchCertificatesV1beta1CertificateSigningRequestApprovalParams) (*PatchCertificatesV1beta1CertificateSigningRequestApprovalOK, error)

	PatchCertificatesV1beta1CertificateSigningRequestStatus(params *PatchCertificatesV1beta1CertificateSigningRequestStatusParams) (*PatchCertificatesV1beta1CertificateSigningRequestStatusOK, error)

	ReadCertificatesV1beta1CertificateSigningRequest(params *ReadCertificatesV1beta1CertificateSigningRequestParams) (*ReadCertificatesV1beta1CertificateSigningRequestOK, error)

	ReadCertificatesV1beta1CertificateSigningRequestApproval(params *ReadCertificatesV1beta1CertificateSigningRequestApprovalParams) (*ReadCertificatesV1beta1CertificateSigningRequestApprovalOK, error)

	ReadCertificatesV1beta1CertificateSigningRequestStatus(params *ReadCertificatesV1beta1CertificateSigningRequestStatusParams) (*ReadCertificatesV1beta1CertificateSigningRequestStatusOK, error)

	ReplaceCertificatesV1beta1CertificateSigningRequest(params *ReplaceCertificatesV1beta1CertificateSigningRequestParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestOK, *ReplaceCertificatesV1beta1CertificateSigningRequestCreated, error)

	ReplaceCertificatesV1beta1CertificateSigningRequestApproval(params *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestApprovalOK, *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalCreated, error)

	ReplaceCertificatesV1beta1CertificateSigningRequestStatus(params *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestStatusOK, *ReplaceCertificatesV1beta1CertificateSigningRequestStatusCreated, error)

	WatchCertificatesV1beta1CertificateSigningRequest(params *WatchCertificatesV1beta1CertificateSigningRequestParams) (*WatchCertificatesV1beta1CertificateSigningRequestOK, error)

	WatchCertificatesV1beta1CertificateSigningRequestList(params *WatchCertificatesV1beta1CertificateSigningRequestListParams) (*WatchCertificatesV1beta1CertificateSigningRequestListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCertificatesV1beta1CertificateSigningRequest create a CertificateSigningRequest
*/
func (a *Client) CreateCertificatesV1beta1CertificateSigningRequest(params *CreateCertificatesV1beta1CertificateSigningRequestParams) (*CreateCertificatesV1beta1CertificateSigningRequestOK, *CreateCertificatesV1beta1CertificateSigningRequestCreated, *CreateCertificatesV1beta1CertificateSigningRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCertificatesV1beta1CertificateSigningRequest",
		Method:             "POST",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCertificatesV1beta1CertificateSigningRequestOK:
		return value, nil, nil, nil
	case *CreateCertificatesV1beta1CertificateSigningRequestCreated:
		return nil, value, nil, nil
	case *CreateCertificatesV1beta1CertificateSigningRequestAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificatesV1beta1CertificateSigningRequest delete a CertificateSigningRequest
*/
func (a *Client) DeleteCertificatesV1beta1CertificateSigningRequest(params *DeleteCertificatesV1beta1CertificateSigningRequestParams) (*DeleteCertificatesV1beta1CertificateSigningRequestOK, *DeleteCertificatesV1beta1CertificateSigningRequestAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificatesV1beta1CertificateSigningRequest",
		Method:             "DELETE",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCertificatesV1beta1CertificateSigningRequestOK:
		return value, nil, nil
	case *DeleteCertificatesV1beta1CertificateSigningRequestAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCertificatesV1beta1CollectionCertificateSigningRequest delete collection of CertificateSigningRequest
*/
func (a *Client) DeleteCertificatesV1beta1CollectionCertificateSigningRequest(params *DeleteCertificatesV1beta1CollectionCertificateSigningRequestParams) (*DeleteCertificatesV1beta1CollectionCertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificatesV1beta1CollectionCertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCertificatesV1beta1CollectionCertificateSigningRequest",
		Method:             "DELETE",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCertificatesV1beta1CollectionCertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificatesV1beta1CollectionCertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCertificatesV1beta1CollectionCertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCertificatesV1beta1APIResources get available resources
*/
func (a *Client) GetCertificatesV1beta1APIResources(params *GetCertificatesV1beta1APIResourcesParams) (*GetCertificatesV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificatesV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificatesV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificatesV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCertificatesV1beta1CertificateSigningRequest list or watch objects of kind CertificateSigningRequest
*/
func (a *Client) ListCertificatesV1beta1CertificateSigningRequest(params *ListCertificatesV1beta1CertificateSigningRequestParams) (*ListCertificatesV1beta1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCertificatesV1beta1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCertificatesV1beta1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCertificatesV1beta1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1beta1CertificateSigningRequest partially update the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1beta1CertificateSigningRequest(params *PatchCertificatesV1beta1CertificateSigningRequestParams) (*PatchCertificatesV1beta1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1beta1CertificateSigningRequest",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1beta1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1beta1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1beta1CertificateSigningRequestApproval partially update approval of the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1beta1CertificateSigningRequestApproval(params *PatchCertificatesV1beta1CertificateSigningRequestApprovalParams) (*PatchCertificatesV1beta1CertificateSigningRequestApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1beta1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1beta1CertificateSigningRequestApproval",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1beta1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1beta1CertificateSigningRequestApprovalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1beta1CertificateSigningRequestApproval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCertificatesV1beta1CertificateSigningRequestStatus partially update status of the specified CertificateSigningRequest
*/
func (a *Client) PatchCertificatesV1beta1CertificateSigningRequestStatus(params *PatchCertificatesV1beta1CertificateSigningRequestStatusParams) (*PatchCertificatesV1beta1CertificateSigningRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCertificatesV1beta1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCertificatesV1beta1CertificateSigningRequestStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCertificatesV1beta1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCertificatesV1beta1CertificateSigningRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCertificatesV1beta1CertificateSigningRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1beta1CertificateSigningRequest read the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1beta1CertificateSigningRequest(params *ReadCertificatesV1beta1CertificateSigningRequestParams) (*ReadCertificatesV1beta1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1beta1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1beta1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1beta1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1beta1CertificateSigningRequestApproval read approval of the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1beta1CertificateSigningRequestApproval(params *ReadCertificatesV1beta1CertificateSigningRequestApprovalParams) (*ReadCertificatesV1beta1CertificateSigningRequestApprovalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1beta1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1beta1CertificateSigningRequestApproval",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1beta1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1beta1CertificateSigningRequestApprovalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1beta1CertificateSigningRequestApproval: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCertificatesV1beta1CertificateSigningRequestStatus read status of the specified CertificateSigningRequest
*/
func (a *Client) ReadCertificatesV1beta1CertificateSigningRequestStatus(params *ReadCertificatesV1beta1CertificateSigningRequestStatusParams) (*ReadCertificatesV1beta1CertificateSigningRequestStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCertificatesV1beta1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCertificatesV1beta1CertificateSigningRequestStatus",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCertificatesV1beta1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCertificatesV1beta1CertificateSigningRequestStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCertificatesV1beta1CertificateSigningRequestStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1beta1CertificateSigningRequest replace the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1beta1CertificateSigningRequest(params *ReplaceCertificatesV1beta1CertificateSigningRequestParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestOK, *ReplaceCertificatesV1beta1CertificateSigningRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1beta1CertificateSigningRequest",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1beta1CertificateSigningRequestOK:
		return value, nil, nil
	case *ReplaceCertificatesV1beta1CertificateSigningRequestCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1beta1CertificateSigningRequestApproval replace approval of the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1beta1CertificateSigningRequestApproval(params *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestApprovalOK, *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1beta1CertificateSigningRequestApprovalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1beta1CertificateSigningRequestApproval",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1beta1CertificateSigningRequestApprovalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalOK:
		return value, nil, nil
	case *ReplaceCertificatesV1beta1CertificateSigningRequestApprovalCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCertificatesV1beta1CertificateSigningRequestStatus replace status of the specified CertificateSigningRequest
*/
func (a *Client) ReplaceCertificatesV1beta1CertificateSigningRequestStatus(params *ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) (*ReplaceCertificatesV1beta1CertificateSigningRequestStatusOK, *ReplaceCertificatesV1beta1CertificateSigningRequestStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCertificatesV1beta1CertificateSigningRequestStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCertificatesV1beta1CertificateSigningRequestStatus",
		Method:             "PUT",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCertificatesV1beta1CertificateSigningRequestStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCertificatesV1beta1CertificateSigningRequestStatusOK:
		return value, nil, nil
	case *ReplaceCertificatesV1beta1CertificateSigningRequestStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for certificates_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCertificatesV1beta1CertificateSigningRequest watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCertificatesV1beta1CertificateSigningRequest(params *WatchCertificatesV1beta1CertificateSigningRequestParams) (*WatchCertificatesV1beta1CertificateSigningRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCertificatesV1beta1CertificateSigningRequestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCertificatesV1beta1CertificateSigningRequest",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCertificatesV1beta1CertificateSigningRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCertificatesV1beta1CertificateSigningRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCertificatesV1beta1CertificateSigningRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCertificatesV1beta1CertificateSigningRequestList watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCertificatesV1beta1CertificateSigningRequestList(params *WatchCertificatesV1beta1CertificateSigningRequestListParams) (*WatchCertificatesV1beta1CertificateSigningRequestListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCertificatesV1beta1CertificateSigningRequestListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCertificatesV1beta1CertificateSigningRequestList",
		Method:             "GET",
		PathPattern:        "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCertificatesV1beta1CertificateSigningRequestListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCertificatesV1beta1CertificateSigningRequestListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCertificatesV1beta1CertificateSigningRequestList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
