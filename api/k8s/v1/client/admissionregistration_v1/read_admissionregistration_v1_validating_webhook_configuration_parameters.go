// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package admissionregistration_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParams creates a new ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams object
// with the default values initialized.
func NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParams() *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	var ()
	return &ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithTimeout creates a new ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithTimeout(timeout time.Duration) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	var ()
	return &ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams{

		timeout: timeout,
	}
}

// NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithContext creates a new ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithContext(ctx context.Context) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	var ()
	return &ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams{

		Context: ctx,
	}
}

// NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithHTTPClient creates a new ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadAdmissionregistrationV1ValidatingWebhookConfigurationParamsWithHTTPClient(client *http.Client) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	var ()
	return &ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams{
		HTTPClient: client,
	}
}

/*ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams contains all the parameters to send to the API endpoint
for the read admissionregistration v1 validating webhook configuration operation typically these are written to a http.Request
*/
type ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams struct {

	/*Exact
	  Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.

	*/
	Exact *bool
	/*Export
	  Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.

	*/
	Export *bool
	/*Name
	  name of the ValidatingWebhookConfiguration

	*/
	Name string
	/*Pretty
	  If 'true', then the output is pretty printed.

	*/
	Pretty *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithTimeout(timeout time.Duration) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithContext(ctx context.Context) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithHTTPClient(client *http.Client) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExact adds the exact to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithExact(exact *bool) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetExact(exact)
	return o
}

// SetExact adds the exact to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetExact(exact *bool) {
	o.Exact = exact
}

// WithExport adds the export to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithExport(export *bool) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetExport(export)
	return o
}

// SetExport adds the export to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetExport(export *bool) {
	o.Export = export
}

// WithName adds the name to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithName(name string) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetName(name string) {
	o.Name = name
}

// WithPretty adds the pretty to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WithPretty(pretty *string) *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams {
	o.SetPretty(pretty)
	return o
}

// SetPretty adds the pretty to the read admissionregistration v1 validating webhook configuration params
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) SetPretty(pretty *string) {
	o.Pretty = pretty
}

// WriteToRequest writes these params to a swagger request
func (o *ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Exact != nil {

		// query param exact
		var qrExact bool
		if o.Exact != nil {
			qrExact = *o.Exact
		}
		qExact := swag.FormatBool(qrExact)
		if qExact != "" {
			if err := r.SetQueryParam("exact", qExact); err != nil {
				return err
			}
		}

	}

	if o.Export != nil {

		// query param export
		var qrExport bool
		if o.Export != nil {
			qrExport = *o.Export
		}
		qExport := swag.FormatBool(qrExport)
		if qExport != "" {
			if err := r.SetQueryParam("export", qExport); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Pretty != nil {

		// query param pretty
		var qrPretty string
		if o.Pretty != nil {
			qrPretty = *o.Pretty
		}
		qPretty := qrPretty
		if qPretty != "" {
			if err := r.SetQueryParam("pretty", qPretty); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
