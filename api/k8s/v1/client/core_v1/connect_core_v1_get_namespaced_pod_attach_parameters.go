// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewConnectCoreV1GetNamespacedPodAttachParams creates a new ConnectCoreV1GetNamespacedPodAttachParams object
// with the default values initialized.
func NewConnectCoreV1GetNamespacedPodAttachParams() *ConnectCoreV1GetNamespacedPodAttachParams {
	var ()
	return &ConnectCoreV1GetNamespacedPodAttachParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectCoreV1GetNamespacedPodAttachParamsWithTimeout creates a new ConnectCoreV1GetNamespacedPodAttachParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectCoreV1GetNamespacedPodAttachParamsWithTimeout(timeout time.Duration) *ConnectCoreV1GetNamespacedPodAttachParams {
	var ()
	return &ConnectCoreV1GetNamespacedPodAttachParams{

		timeout: timeout,
	}
}

// NewConnectCoreV1GetNamespacedPodAttachParamsWithContext creates a new ConnectCoreV1GetNamespacedPodAttachParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectCoreV1GetNamespacedPodAttachParamsWithContext(ctx context.Context) *ConnectCoreV1GetNamespacedPodAttachParams {
	var ()
	return &ConnectCoreV1GetNamespacedPodAttachParams{

		Context: ctx,
	}
}

// NewConnectCoreV1GetNamespacedPodAttachParamsWithHTTPClient creates a new ConnectCoreV1GetNamespacedPodAttachParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectCoreV1GetNamespacedPodAttachParamsWithHTTPClient(client *http.Client) *ConnectCoreV1GetNamespacedPodAttachParams {
	var ()
	return &ConnectCoreV1GetNamespacedPodAttachParams{
		HTTPClient: client,
	}
}

/*ConnectCoreV1GetNamespacedPodAttachParams contains all the parameters to send to the API endpoint
for the connect core v1 get namespaced pod attach operation typically these are written to a http.Request
*/
type ConnectCoreV1GetNamespacedPodAttachParams struct {

	/*Container
	  The container in which to execute the command. Defaults to only container if there is only one container in the pod.

	*/
	Container *string
	/*Name
	  name of the PodAttachOptions

	*/
	Name string
	/*Namespace
	  object name and auth scope, such as for teams and projects

	*/
	Namespace string
	/*Stderr
	  Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.

	*/
	Stderr *bool
	/*Stdin
	  Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.

	*/
	Stdin *bool
	/*Stdout
	  Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.

	*/
	Stdout *bool
	/*Tty
	  TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.

	*/
	Tty *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithTimeout(timeout time.Duration) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithContext(ctx context.Context) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithHTTPClient(client *http.Client) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainer adds the container to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithContainer(container *string) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetContainer(container)
	return o
}

// SetContainer adds the container to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetContainer(container *string) {
	o.Container = container
}

// WithName adds the name to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithName(name string) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithNamespace(namespace string) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithStderr adds the stderr to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithStderr(stderr *bool) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetStderr(stderr)
	return o
}

// SetStderr adds the stderr to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetStderr(stderr *bool) {
	o.Stderr = stderr
}

// WithStdin adds the stdin to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithStdin(stdin *bool) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetStdin(stdin)
	return o
}

// SetStdin adds the stdin to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetStdin(stdin *bool) {
	o.Stdin = stdin
}

// WithStdout adds the stdout to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithStdout(stdout *bool) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetStdout(stdout)
	return o
}

// SetStdout adds the stdout to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetStdout(stdout *bool) {
	o.Stdout = stdout
}

// WithTty adds the tty to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WithTty(tty *bool) *ConnectCoreV1GetNamespacedPodAttachParams {
	o.SetTty(tty)
	return o
}

// SetTty adds the tty to the connect core v1 get namespaced pod attach params
func (o *ConnectCoreV1GetNamespacedPodAttachParams) SetTty(tty *bool) {
	o.Tty = tty
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectCoreV1GetNamespacedPodAttachParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Container != nil {

		// query param container
		var qrContainer string
		if o.Container != nil {
			qrContainer = *o.Container
		}
		qContainer := qrContainer
		if qContainer != "" {
			if err := r.SetQueryParam("container", qContainer); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Stderr != nil {

		// query param stderr
		var qrStderr bool
		if o.Stderr != nil {
			qrStderr = *o.Stderr
		}
		qStderr := swag.FormatBool(qrStderr)
		if qStderr != "" {
			if err := r.SetQueryParam("stderr", qStderr); err != nil {
				return err
			}
		}

	}

	if o.Stdin != nil {

		// query param stdin
		var qrStdin bool
		if o.Stdin != nil {
			qrStdin = *o.Stdin
		}
		qStdin := swag.FormatBool(qrStdin)
		if qStdin != "" {
			if err := r.SetQueryParam("stdin", qStdin); err != nil {
				return err
			}
		}

	}

	if o.Stdout != nil {

		// query param stdout
		var qrStdout bool
		if o.Stdout != nil {
			qrStdout = *o.Stdout
		}
		qStdout := swag.FormatBool(qrStdout)
		if qStdout != "" {
			if err := r.SetQueryParam("stdout", qStdout); err != nil {
				return err
			}
		}

	}

	if o.Tty != nil {

		// query param tty
		var qrTty bool
		if o.Tty != nil {
			qrTty = *o.Tty
		}
		qTty := swag.FormatBool(qrTty)
		if qTty != "" {
			if err := r.SetQueryParam("tty", qTty); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
