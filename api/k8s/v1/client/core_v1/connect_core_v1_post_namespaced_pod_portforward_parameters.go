// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewConnectCoreV1PostNamespacedPodPortforwardParams creates a new ConnectCoreV1PostNamespacedPodPortforwardParams object
// with the default values initialized.
func NewConnectCoreV1PostNamespacedPodPortforwardParams() *ConnectCoreV1PostNamespacedPodPortforwardParams {
	var ()
	return &ConnectCoreV1PostNamespacedPodPortforwardParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectCoreV1PostNamespacedPodPortforwardParamsWithTimeout creates a new ConnectCoreV1PostNamespacedPodPortforwardParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectCoreV1PostNamespacedPodPortforwardParamsWithTimeout(timeout time.Duration) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	var ()
	return &ConnectCoreV1PostNamespacedPodPortforwardParams{

		timeout: timeout,
	}
}

// NewConnectCoreV1PostNamespacedPodPortforwardParamsWithContext creates a new ConnectCoreV1PostNamespacedPodPortforwardParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectCoreV1PostNamespacedPodPortforwardParamsWithContext(ctx context.Context) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	var ()
	return &ConnectCoreV1PostNamespacedPodPortforwardParams{

		Context: ctx,
	}
}

// NewConnectCoreV1PostNamespacedPodPortforwardParamsWithHTTPClient creates a new ConnectCoreV1PostNamespacedPodPortforwardParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectCoreV1PostNamespacedPodPortforwardParamsWithHTTPClient(client *http.Client) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	var ()
	return &ConnectCoreV1PostNamespacedPodPortforwardParams{
		HTTPClient: client,
	}
}

/*ConnectCoreV1PostNamespacedPodPortforwardParams contains all the parameters to send to the API endpoint
for the connect core v1 post namespaced pod portforward operation typically these are written to a http.Request
*/
type ConnectCoreV1PostNamespacedPodPortforwardParams struct {

	/*Name
	  name of the PodPortForwardOptions

	*/
	Name string
	/*Namespace
	  object name and auth scope, such as for teams and projects

	*/
	Namespace string
	/*Ports
	  List of ports to forward Required when using WebSockets

	*/
	Ports *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithTimeout(timeout time.Duration) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithContext(ctx context.Context) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithHTTPClient(client *http.Client) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithName(name string) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithNamespace(namespace string) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPorts adds the ports to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WithPorts(ports *int64) *ConnectCoreV1PostNamespacedPodPortforwardParams {
	o.SetPorts(ports)
	return o
}

// SetPorts adds the ports to the connect core v1 post namespaced pod portforward params
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) SetPorts(ports *int64) {
	o.Ports = ports
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectCoreV1PostNamespacedPodPortforwardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Ports != nil {

		// query param ports
		var qrPorts int64
		if o.Ports != nil {
			qrPorts = *o.Ports
		}
		qPorts := swag.FormatInt64(qrPorts)
		if qPorts != "" {
			if err := r.SetQueryParam("ports", qPorts); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
