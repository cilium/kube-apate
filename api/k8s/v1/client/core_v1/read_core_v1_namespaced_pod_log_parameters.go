// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewReadCoreV1NamespacedPodLogParams creates a new ReadCoreV1NamespacedPodLogParams object
// with the default values initialized.
func NewReadCoreV1NamespacedPodLogParams() *ReadCoreV1NamespacedPodLogParams {
	var ()
	return &ReadCoreV1NamespacedPodLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReadCoreV1NamespacedPodLogParamsWithTimeout creates a new ReadCoreV1NamespacedPodLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReadCoreV1NamespacedPodLogParamsWithTimeout(timeout time.Duration) *ReadCoreV1NamespacedPodLogParams {
	var ()
	return &ReadCoreV1NamespacedPodLogParams{

		timeout: timeout,
	}
}

// NewReadCoreV1NamespacedPodLogParamsWithContext creates a new ReadCoreV1NamespacedPodLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewReadCoreV1NamespacedPodLogParamsWithContext(ctx context.Context) *ReadCoreV1NamespacedPodLogParams {
	var ()
	return &ReadCoreV1NamespacedPodLogParams{

		Context: ctx,
	}
}

// NewReadCoreV1NamespacedPodLogParamsWithHTTPClient creates a new ReadCoreV1NamespacedPodLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReadCoreV1NamespacedPodLogParamsWithHTTPClient(client *http.Client) *ReadCoreV1NamespacedPodLogParams {
	var ()
	return &ReadCoreV1NamespacedPodLogParams{
		HTTPClient: client,
	}
}

/*ReadCoreV1NamespacedPodLogParams contains all the parameters to send to the API endpoint
for the read core v1 namespaced pod log operation typically these are written to a http.Request
*/
type ReadCoreV1NamespacedPodLogParams struct {

	/*Container
	  The container for which to stream logs. Defaults to only container if there is one container in the pod.

	*/
	Container *string
	/*Follow
	  Follow the log stream of the pod. Defaults to false.

	*/
	Follow *bool
	/*InsecureSkipTLSVerifyBackend
	  insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).

	*/
	InsecureSkipTLSVerifyBackend *bool
	/*LimitBytes
	  If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.

	*/
	LimitBytes *int64
	/*Name
	  name of the Pod

	*/
	Name string
	/*Namespace
	  object name and auth scope, such as for teams and projects

	*/
	Namespace string
	/*Pretty
	  If 'true', then the output is pretty printed.

	*/
	Pretty *string
	/*Previous
	  Return previous terminated container logs. Defaults to false.

	*/
	Previous *bool
	/*SinceSeconds
	  A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.

	*/
	SinceSeconds *int64
	/*TailLines
	  If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime

	*/
	TailLines *int64
	/*Timestamps
	  If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.

	*/
	Timestamps *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithTimeout(timeout time.Duration) *ReadCoreV1NamespacedPodLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithContext(ctx context.Context) *ReadCoreV1NamespacedPodLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithHTTPClient(client *http.Client) *ReadCoreV1NamespacedPodLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainer adds the container to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithContainer(container *string) *ReadCoreV1NamespacedPodLogParams {
	o.SetContainer(container)
	return o
}

// SetContainer adds the container to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetContainer(container *string) {
	o.Container = container
}

// WithFollow adds the follow to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithFollow(follow *bool) *ReadCoreV1NamespacedPodLogParams {
	o.SetFollow(follow)
	return o
}

// SetFollow adds the follow to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetFollow(follow *bool) {
	o.Follow = follow
}

// WithInsecureSkipTLSVerifyBackend adds the insecureSkipTLSVerifyBackend to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithInsecureSkipTLSVerifyBackend(insecureSkipTLSVerifyBackend *bool) *ReadCoreV1NamespacedPodLogParams {
	o.SetInsecureSkipTLSVerifyBackend(insecureSkipTLSVerifyBackend)
	return o
}

// SetInsecureSkipTLSVerifyBackend adds the insecureSkipTlsVerifyBackend to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetInsecureSkipTLSVerifyBackend(insecureSkipTLSVerifyBackend *bool) {
	o.InsecureSkipTLSVerifyBackend = insecureSkipTLSVerifyBackend
}

// WithLimitBytes adds the limitBytes to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithLimitBytes(limitBytes *int64) *ReadCoreV1NamespacedPodLogParams {
	o.SetLimitBytes(limitBytes)
	return o
}

// SetLimitBytes adds the limitBytes to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetLimitBytes(limitBytes *int64) {
	o.LimitBytes = limitBytes
}

// WithName adds the name to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithName(name string) *ReadCoreV1NamespacedPodLogParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithNamespace(namespace string) *ReadCoreV1NamespacedPodLogParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPretty adds the pretty to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithPretty(pretty *string) *ReadCoreV1NamespacedPodLogParams {
	o.SetPretty(pretty)
	return o
}

// SetPretty adds the pretty to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetPretty(pretty *string) {
	o.Pretty = pretty
}

// WithPrevious adds the previous to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithPrevious(previous *bool) *ReadCoreV1NamespacedPodLogParams {
	o.SetPrevious(previous)
	return o
}

// SetPrevious adds the previous to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetPrevious(previous *bool) {
	o.Previous = previous
}

// WithSinceSeconds adds the sinceSeconds to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithSinceSeconds(sinceSeconds *int64) *ReadCoreV1NamespacedPodLogParams {
	o.SetSinceSeconds(sinceSeconds)
	return o
}

// SetSinceSeconds adds the sinceSeconds to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetSinceSeconds(sinceSeconds *int64) {
	o.SinceSeconds = sinceSeconds
}

// WithTailLines adds the tailLines to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithTailLines(tailLines *int64) *ReadCoreV1NamespacedPodLogParams {
	o.SetTailLines(tailLines)
	return o
}

// SetTailLines adds the tailLines to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetTailLines(tailLines *int64) {
	o.TailLines = tailLines
}

// WithTimestamps adds the timestamps to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) WithTimestamps(timestamps *bool) *ReadCoreV1NamespacedPodLogParams {
	o.SetTimestamps(timestamps)
	return o
}

// SetTimestamps adds the timestamps to the read core v1 namespaced pod log params
func (o *ReadCoreV1NamespacedPodLogParams) SetTimestamps(timestamps *bool) {
	o.Timestamps = timestamps
}

// WriteToRequest writes these params to a swagger request
func (o *ReadCoreV1NamespacedPodLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Container != nil {

		// query param container
		var qrContainer string
		if o.Container != nil {
			qrContainer = *o.Container
		}
		qContainer := qrContainer
		if qContainer != "" {
			if err := r.SetQueryParam("container", qContainer); err != nil {
				return err
			}
		}

	}

	if o.Follow != nil {

		// query param follow
		var qrFollow bool
		if o.Follow != nil {
			qrFollow = *o.Follow
		}
		qFollow := swag.FormatBool(qrFollow)
		if qFollow != "" {
			if err := r.SetQueryParam("follow", qFollow); err != nil {
				return err
			}
		}

	}

	if o.InsecureSkipTLSVerifyBackend != nil {

		// query param insecureSkipTLSVerifyBackend
		var qrInsecureSkipTLSVerifyBackend bool
		if o.InsecureSkipTLSVerifyBackend != nil {
			qrInsecureSkipTLSVerifyBackend = *o.InsecureSkipTLSVerifyBackend
		}
		qInsecureSkipTLSVerifyBackend := swag.FormatBool(qrInsecureSkipTLSVerifyBackend)
		if qInsecureSkipTLSVerifyBackend != "" {
			if err := r.SetQueryParam("insecureSkipTLSVerifyBackend", qInsecureSkipTLSVerifyBackend); err != nil {
				return err
			}
		}

	}

	if o.LimitBytes != nil {

		// query param limitBytes
		var qrLimitBytes int64
		if o.LimitBytes != nil {
			qrLimitBytes = *o.LimitBytes
		}
		qLimitBytes := swag.FormatInt64(qrLimitBytes)
		if qLimitBytes != "" {
			if err := r.SetQueryParam("limitBytes", qLimitBytes); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Pretty != nil {

		// query param pretty
		var qrPretty string
		if o.Pretty != nil {
			qrPretty = *o.Pretty
		}
		qPretty := qrPretty
		if qPretty != "" {
			if err := r.SetQueryParam("pretty", qPretty); err != nil {
				return err
			}
		}

	}

	if o.Previous != nil {

		// query param previous
		var qrPrevious bool
		if o.Previous != nil {
			qrPrevious = *o.Previous
		}
		qPrevious := swag.FormatBool(qrPrevious)
		if qPrevious != "" {
			if err := r.SetQueryParam("previous", qPrevious); err != nil {
				return err
			}
		}

	}

	if o.SinceSeconds != nil {

		// query param sinceSeconds
		var qrSinceSeconds int64
		if o.SinceSeconds != nil {
			qrSinceSeconds = *o.SinceSeconds
		}
		qSinceSeconds := swag.FormatInt64(qrSinceSeconds)
		if qSinceSeconds != "" {
			if err := r.SetQueryParam("sinceSeconds", qSinceSeconds); err != nil {
				return err
			}
		}

	}

	if o.TailLines != nil {

		// query param tailLines
		var qrTailLines int64
		if o.TailLines != nil {
			qrTailLines = *o.TailLines
		}
		qTailLines := swag.FormatInt64(qrTailLines)
		if qTailLines != "" {
			if err := r.SetQueryParam("tailLines", qTailLines); err != nil {
				return err
			}
		}

	}

	if o.Timestamps != nil {

		// query param timestamps
		var qrTimestamps bool
		if o.Timestamps != nil {
			qrTimestamps = *o.Timestamps
		}
		qTimestamps := swag.FormatBool(qrTimestamps)
		if qTimestamps != "" {
			if err := r.SetQueryParam("timestamps", qTimestamps); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
