// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ConnectCoreV1PatchNodeProxyWithPathReader is a Reader for the ConnectCoreV1PatchNodeProxyWithPath structure.
type ConnectCoreV1PatchNodeProxyWithPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConnectCoreV1PatchNodeProxyWithPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConnectCoreV1PatchNodeProxyWithPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewConnectCoreV1PatchNodeProxyWithPathUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConnectCoreV1PatchNodeProxyWithPathOK creates a ConnectCoreV1PatchNodeProxyWithPathOK with default headers values
func NewConnectCoreV1PatchNodeProxyWithPathOK() *ConnectCoreV1PatchNodeProxyWithPathOK {
	return &ConnectCoreV1PatchNodeProxyWithPathOK{}
}

/*ConnectCoreV1PatchNodeProxyWithPathOK handles this case with default header values.

OK
*/
type ConnectCoreV1PatchNodeProxyWithPathOK struct {
	Payload string
}

func (o *ConnectCoreV1PatchNodeProxyWithPathOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/nodes/{name}/proxy/{path}][%d] connectCoreV1PatchNodeProxyWithPathOK  %+v", 200, o.Payload)
}

func (o *ConnectCoreV1PatchNodeProxyWithPathOK) GetPayload() string {
	return o.Payload
}

func (o *ConnectCoreV1PatchNodeProxyWithPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectCoreV1PatchNodeProxyWithPathUnauthorized creates a ConnectCoreV1PatchNodeProxyWithPathUnauthorized with default headers values
func NewConnectCoreV1PatchNodeProxyWithPathUnauthorized() *ConnectCoreV1PatchNodeProxyWithPathUnauthorized {
	return &ConnectCoreV1PatchNodeProxyWithPathUnauthorized{}
}

/*ConnectCoreV1PatchNodeProxyWithPathUnauthorized handles this case with default header values.

Unauthorized
*/
type ConnectCoreV1PatchNodeProxyWithPathUnauthorized struct {
}

func (o *ConnectCoreV1PatchNodeProxyWithPathUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/nodes/{name}/proxy/{path}][%d] connectCoreV1PatchNodeProxyWithPathUnauthorized ", 401)
}

func (o *ConnectCoreV1PatchNodeProxyWithPathUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
