// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new core v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConnectCoreV1DeleteNamespacedPodProxy(params *ConnectCoreV1DeleteNamespacedPodProxyParams) (*ConnectCoreV1DeleteNamespacedPodProxyOK, error)

	ConnectCoreV1DeleteNamespacedPodProxyWithPath(params *ConnectCoreV1DeleteNamespacedPodProxyWithPathParams) (*ConnectCoreV1DeleteNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1DeleteNamespacedServiceProxy(params *ConnectCoreV1DeleteNamespacedServiceProxyParams) (*ConnectCoreV1DeleteNamespacedServiceProxyOK, error)

	ConnectCoreV1DeleteNamespacedServiceProxyWithPath(params *ConnectCoreV1DeleteNamespacedServiceProxyWithPathParams) (*ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1DeleteNodeProxy(params *ConnectCoreV1DeleteNodeProxyParams) (*ConnectCoreV1DeleteNodeProxyOK, error)

	ConnectCoreV1DeleteNodeProxyWithPath(params *ConnectCoreV1DeleteNodeProxyWithPathParams) (*ConnectCoreV1DeleteNodeProxyWithPathOK, error)

	ConnectCoreV1GetNamespacedPodAttach(params *ConnectCoreV1GetNamespacedPodAttachParams) (*ConnectCoreV1GetNamespacedPodAttachOK, error)

	ConnectCoreV1GetNamespacedPodExec(params *ConnectCoreV1GetNamespacedPodExecParams) (*ConnectCoreV1GetNamespacedPodExecOK, error)

	ConnectCoreV1GetNamespacedPodPortforward(params *ConnectCoreV1GetNamespacedPodPortforwardParams) (*ConnectCoreV1GetNamespacedPodPortforwardOK, error)

	ConnectCoreV1GetNamespacedPodProxy(params *ConnectCoreV1GetNamespacedPodProxyParams) (*ConnectCoreV1GetNamespacedPodProxyOK, error)

	ConnectCoreV1GetNamespacedPodProxyWithPath(params *ConnectCoreV1GetNamespacedPodProxyWithPathParams) (*ConnectCoreV1GetNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1GetNamespacedServiceProxy(params *ConnectCoreV1GetNamespacedServiceProxyParams) (*ConnectCoreV1GetNamespacedServiceProxyOK, error)

	ConnectCoreV1GetNamespacedServiceProxyWithPath(params *ConnectCoreV1GetNamespacedServiceProxyWithPathParams) (*ConnectCoreV1GetNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1GetNodeProxy(params *ConnectCoreV1GetNodeProxyParams) (*ConnectCoreV1GetNodeProxyOK, error)

	ConnectCoreV1GetNodeProxyWithPath(params *ConnectCoreV1GetNodeProxyWithPathParams) (*ConnectCoreV1GetNodeProxyWithPathOK, error)

	ConnectCoreV1HeadNamespacedPodProxy(params *ConnectCoreV1HeadNamespacedPodProxyParams) (*ConnectCoreV1HeadNamespacedPodProxyOK, error)

	ConnectCoreV1HeadNamespacedPodProxyWithPath(params *ConnectCoreV1HeadNamespacedPodProxyWithPathParams) (*ConnectCoreV1HeadNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1HeadNamespacedServiceProxy(params *ConnectCoreV1HeadNamespacedServiceProxyParams) (*ConnectCoreV1HeadNamespacedServiceProxyOK, error)

	ConnectCoreV1HeadNamespacedServiceProxyWithPath(params *ConnectCoreV1HeadNamespacedServiceProxyWithPathParams) (*ConnectCoreV1HeadNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1HeadNodeProxy(params *ConnectCoreV1HeadNodeProxyParams) (*ConnectCoreV1HeadNodeProxyOK, error)

	ConnectCoreV1HeadNodeProxyWithPath(params *ConnectCoreV1HeadNodeProxyWithPathParams) (*ConnectCoreV1HeadNodeProxyWithPathOK, error)

	ConnectCoreV1OptionsNamespacedPodProxy(params *ConnectCoreV1OptionsNamespacedPodProxyParams) (*ConnectCoreV1OptionsNamespacedPodProxyOK, error)

	ConnectCoreV1OptionsNamespacedPodProxyWithPath(params *ConnectCoreV1OptionsNamespacedPodProxyWithPathParams) (*ConnectCoreV1OptionsNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1OptionsNamespacedServiceProxy(params *ConnectCoreV1OptionsNamespacedServiceProxyParams) (*ConnectCoreV1OptionsNamespacedServiceProxyOK, error)

	ConnectCoreV1OptionsNamespacedServiceProxyWithPath(params *ConnectCoreV1OptionsNamespacedServiceProxyWithPathParams) (*ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1OptionsNodeProxy(params *ConnectCoreV1OptionsNodeProxyParams) (*ConnectCoreV1OptionsNodeProxyOK, error)

	ConnectCoreV1OptionsNodeProxyWithPath(params *ConnectCoreV1OptionsNodeProxyWithPathParams) (*ConnectCoreV1OptionsNodeProxyWithPathOK, error)

	ConnectCoreV1PatchNamespacedPodProxy(params *ConnectCoreV1PatchNamespacedPodProxyParams) (*ConnectCoreV1PatchNamespacedPodProxyOK, error)

	ConnectCoreV1PatchNamespacedPodProxyWithPath(params *ConnectCoreV1PatchNamespacedPodProxyWithPathParams) (*ConnectCoreV1PatchNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1PatchNamespacedServiceProxy(params *ConnectCoreV1PatchNamespacedServiceProxyParams) (*ConnectCoreV1PatchNamespacedServiceProxyOK, error)

	ConnectCoreV1PatchNamespacedServiceProxyWithPath(params *ConnectCoreV1PatchNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PatchNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1PatchNodeProxy(params *ConnectCoreV1PatchNodeProxyParams) (*ConnectCoreV1PatchNodeProxyOK, error)

	ConnectCoreV1PatchNodeProxyWithPath(params *ConnectCoreV1PatchNodeProxyWithPathParams) (*ConnectCoreV1PatchNodeProxyWithPathOK, error)

	ConnectCoreV1PostNamespacedPodAttach(params *ConnectCoreV1PostNamespacedPodAttachParams) (*ConnectCoreV1PostNamespacedPodAttachOK, error)

	ConnectCoreV1PostNamespacedPodExec(params *ConnectCoreV1PostNamespacedPodExecParams) (*ConnectCoreV1PostNamespacedPodExecOK, error)

	ConnectCoreV1PostNamespacedPodPortforward(params *ConnectCoreV1PostNamespacedPodPortforwardParams) (*ConnectCoreV1PostNamespacedPodPortforwardOK, error)

	ConnectCoreV1PostNamespacedPodProxy(params *ConnectCoreV1PostNamespacedPodProxyParams) (*ConnectCoreV1PostNamespacedPodProxyOK, error)

	ConnectCoreV1PostNamespacedPodProxyWithPath(params *ConnectCoreV1PostNamespacedPodProxyWithPathParams) (*ConnectCoreV1PostNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1PostNamespacedServiceProxy(params *ConnectCoreV1PostNamespacedServiceProxyParams) (*ConnectCoreV1PostNamespacedServiceProxyOK, error)

	ConnectCoreV1PostNamespacedServiceProxyWithPath(params *ConnectCoreV1PostNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PostNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1PostNodeProxy(params *ConnectCoreV1PostNodeProxyParams) (*ConnectCoreV1PostNodeProxyOK, error)

	ConnectCoreV1PostNodeProxyWithPath(params *ConnectCoreV1PostNodeProxyWithPathParams) (*ConnectCoreV1PostNodeProxyWithPathOK, error)

	ConnectCoreV1PutNamespacedPodProxy(params *ConnectCoreV1PutNamespacedPodProxyParams) (*ConnectCoreV1PutNamespacedPodProxyOK, error)

	ConnectCoreV1PutNamespacedPodProxyWithPath(params *ConnectCoreV1PutNamespacedPodProxyWithPathParams) (*ConnectCoreV1PutNamespacedPodProxyWithPathOK, error)

	ConnectCoreV1PutNamespacedServiceProxy(params *ConnectCoreV1PutNamespacedServiceProxyParams) (*ConnectCoreV1PutNamespacedServiceProxyOK, error)

	ConnectCoreV1PutNamespacedServiceProxyWithPath(params *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PutNamespacedServiceProxyWithPathOK, error)

	ConnectCoreV1PutNodeProxy(params *ConnectCoreV1PutNodeProxyParams) (*ConnectCoreV1PutNodeProxyOK, error)

	ConnectCoreV1PutNodeProxyWithPath(params *ConnectCoreV1PutNodeProxyWithPathParams) (*ConnectCoreV1PutNodeProxyWithPathOK, error)

	CreateCoreV1Namespace(params *CreateCoreV1NamespaceParams) (*CreateCoreV1NamespaceOK, *CreateCoreV1NamespaceCreated, *CreateCoreV1NamespaceAccepted, error)

	CreateCoreV1NamespacedBinding(params *CreateCoreV1NamespacedBindingParams) (*CreateCoreV1NamespacedBindingOK, *CreateCoreV1NamespacedBindingCreated, *CreateCoreV1NamespacedBindingAccepted, error)

	CreateCoreV1NamespacedConfigMap(params *CreateCoreV1NamespacedConfigMapParams) (*CreateCoreV1NamespacedConfigMapOK, *CreateCoreV1NamespacedConfigMapCreated, *CreateCoreV1NamespacedConfigMapAccepted, error)

	CreateCoreV1NamespacedEndpoints(params *CreateCoreV1NamespacedEndpointsParams) (*CreateCoreV1NamespacedEndpointsOK, *CreateCoreV1NamespacedEndpointsCreated, *CreateCoreV1NamespacedEndpointsAccepted, error)

	CreateCoreV1NamespacedEvent(params *CreateCoreV1NamespacedEventParams) (*CreateCoreV1NamespacedEventOK, *CreateCoreV1NamespacedEventCreated, *CreateCoreV1NamespacedEventAccepted, error)

	CreateCoreV1NamespacedLimitRange(params *CreateCoreV1NamespacedLimitRangeParams) (*CreateCoreV1NamespacedLimitRangeOK, *CreateCoreV1NamespacedLimitRangeCreated, *CreateCoreV1NamespacedLimitRangeAccepted, error)

	CreateCoreV1NamespacedPersistentVolumeClaim(params *CreateCoreV1NamespacedPersistentVolumeClaimParams) (*CreateCoreV1NamespacedPersistentVolumeClaimOK, *CreateCoreV1NamespacedPersistentVolumeClaimCreated, *CreateCoreV1NamespacedPersistentVolumeClaimAccepted, error)

	CreateCoreV1NamespacedPod(params *CreateCoreV1NamespacedPodParams) (*CreateCoreV1NamespacedPodOK, *CreateCoreV1NamespacedPodCreated, *CreateCoreV1NamespacedPodAccepted, error)

	CreateCoreV1NamespacedPodBinding(params *CreateCoreV1NamespacedPodBindingParams) (*CreateCoreV1NamespacedPodBindingOK, *CreateCoreV1NamespacedPodBindingCreated, *CreateCoreV1NamespacedPodBindingAccepted, error)

	CreateCoreV1NamespacedPodEviction(params *CreateCoreV1NamespacedPodEvictionParams) (*CreateCoreV1NamespacedPodEvictionOK, *CreateCoreV1NamespacedPodEvictionCreated, *CreateCoreV1NamespacedPodEvictionAccepted, error)

	CreateCoreV1NamespacedPodTemplate(params *CreateCoreV1NamespacedPodTemplateParams) (*CreateCoreV1NamespacedPodTemplateOK, *CreateCoreV1NamespacedPodTemplateCreated, *CreateCoreV1NamespacedPodTemplateAccepted, error)

	CreateCoreV1NamespacedReplicationController(params *CreateCoreV1NamespacedReplicationControllerParams) (*CreateCoreV1NamespacedReplicationControllerOK, *CreateCoreV1NamespacedReplicationControllerCreated, *CreateCoreV1NamespacedReplicationControllerAccepted, error)

	CreateCoreV1NamespacedResourceQuota(params *CreateCoreV1NamespacedResourceQuotaParams) (*CreateCoreV1NamespacedResourceQuotaOK, *CreateCoreV1NamespacedResourceQuotaCreated, *CreateCoreV1NamespacedResourceQuotaAccepted, error)

	CreateCoreV1NamespacedSecret(params *CreateCoreV1NamespacedSecretParams) (*CreateCoreV1NamespacedSecretOK, *CreateCoreV1NamespacedSecretCreated, *CreateCoreV1NamespacedSecretAccepted, error)

	CreateCoreV1NamespacedService(params *CreateCoreV1NamespacedServiceParams) (*CreateCoreV1NamespacedServiceOK, *CreateCoreV1NamespacedServiceCreated, *CreateCoreV1NamespacedServiceAccepted, error)

	CreateCoreV1NamespacedServiceAccount(params *CreateCoreV1NamespacedServiceAccountParams) (*CreateCoreV1NamespacedServiceAccountOK, *CreateCoreV1NamespacedServiceAccountCreated, *CreateCoreV1NamespacedServiceAccountAccepted, error)

	CreateCoreV1NamespacedServiceAccountToken(params *CreateCoreV1NamespacedServiceAccountTokenParams) (*CreateCoreV1NamespacedServiceAccountTokenOK, *CreateCoreV1NamespacedServiceAccountTokenCreated, *CreateCoreV1NamespacedServiceAccountTokenAccepted, error)

	CreateCoreV1Node(params *CreateCoreV1NodeParams) (*CreateCoreV1NodeOK, *CreateCoreV1NodeCreated, *CreateCoreV1NodeAccepted, error)

	CreateCoreV1PersistentVolume(params *CreateCoreV1PersistentVolumeParams) (*CreateCoreV1PersistentVolumeOK, *CreateCoreV1PersistentVolumeCreated, *CreateCoreV1PersistentVolumeAccepted, error)

	DeleteCoreV1CollectionNamespacedConfigMap(params *DeleteCoreV1CollectionNamespacedConfigMapParams) (*DeleteCoreV1CollectionNamespacedConfigMapOK, error)

	DeleteCoreV1CollectionNamespacedEndpoints(params *DeleteCoreV1CollectionNamespacedEndpointsParams) (*DeleteCoreV1CollectionNamespacedEndpointsOK, error)

	DeleteCoreV1CollectionNamespacedEvent(params *DeleteCoreV1CollectionNamespacedEventParams) (*DeleteCoreV1CollectionNamespacedEventOK, error)

	DeleteCoreV1CollectionNamespacedLimitRange(params *DeleteCoreV1CollectionNamespacedLimitRangeParams) (*DeleteCoreV1CollectionNamespacedLimitRangeOK, error)

	DeleteCoreV1CollectionNamespacedPersistentVolumeClaim(params *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimParams) (*DeleteCoreV1CollectionNamespacedPersistentVolumeClaimOK, error)

	DeleteCoreV1CollectionNamespacedPod(params *DeleteCoreV1CollectionNamespacedPodParams) (*DeleteCoreV1CollectionNamespacedPodOK, error)

	DeleteCoreV1CollectionNamespacedPodTemplate(params *DeleteCoreV1CollectionNamespacedPodTemplateParams) (*DeleteCoreV1CollectionNamespacedPodTemplateOK, error)

	DeleteCoreV1CollectionNamespacedReplicationController(params *DeleteCoreV1CollectionNamespacedReplicationControllerParams) (*DeleteCoreV1CollectionNamespacedReplicationControllerOK, error)

	DeleteCoreV1CollectionNamespacedResourceQuota(params *DeleteCoreV1CollectionNamespacedResourceQuotaParams) (*DeleteCoreV1CollectionNamespacedResourceQuotaOK, error)

	DeleteCoreV1CollectionNamespacedSecret(params *DeleteCoreV1CollectionNamespacedSecretParams) (*DeleteCoreV1CollectionNamespacedSecretOK, error)

	DeleteCoreV1CollectionNamespacedServiceAccount(params *DeleteCoreV1CollectionNamespacedServiceAccountParams) (*DeleteCoreV1CollectionNamespacedServiceAccountOK, error)

	DeleteCoreV1CollectionNode(params *DeleteCoreV1CollectionNodeParams) (*DeleteCoreV1CollectionNodeOK, error)

	DeleteCoreV1CollectionPersistentVolume(params *DeleteCoreV1CollectionPersistentVolumeParams) (*DeleteCoreV1CollectionPersistentVolumeOK, error)

	DeleteCoreV1Namespace(params *DeleteCoreV1NamespaceParams) (*DeleteCoreV1NamespaceOK, *DeleteCoreV1NamespaceAccepted, error)

	DeleteCoreV1NamespacedConfigMap(params *DeleteCoreV1NamespacedConfigMapParams) (*DeleteCoreV1NamespacedConfigMapOK, *DeleteCoreV1NamespacedConfigMapAccepted, error)

	DeleteCoreV1NamespacedEndpoints(params *DeleteCoreV1NamespacedEndpointsParams) (*DeleteCoreV1NamespacedEndpointsOK, *DeleteCoreV1NamespacedEndpointsAccepted, error)

	DeleteCoreV1NamespacedEvent(params *DeleteCoreV1NamespacedEventParams) (*DeleteCoreV1NamespacedEventOK, *DeleteCoreV1NamespacedEventAccepted, error)

	DeleteCoreV1NamespacedLimitRange(params *DeleteCoreV1NamespacedLimitRangeParams) (*DeleteCoreV1NamespacedLimitRangeOK, *DeleteCoreV1NamespacedLimitRangeAccepted, error)

	DeleteCoreV1NamespacedPersistentVolumeClaim(params *DeleteCoreV1NamespacedPersistentVolumeClaimParams) (*DeleteCoreV1NamespacedPersistentVolumeClaimOK, *DeleteCoreV1NamespacedPersistentVolumeClaimAccepted, error)

	DeleteCoreV1NamespacedPod(params *DeleteCoreV1NamespacedPodParams) (*DeleteCoreV1NamespacedPodOK, *DeleteCoreV1NamespacedPodAccepted, error)

	DeleteCoreV1NamespacedPodTemplate(params *DeleteCoreV1NamespacedPodTemplateParams) (*DeleteCoreV1NamespacedPodTemplateOK, *DeleteCoreV1NamespacedPodTemplateAccepted, error)

	DeleteCoreV1NamespacedReplicationController(params *DeleteCoreV1NamespacedReplicationControllerParams) (*DeleteCoreV1NamespacedReplicationControllerOK, *DeleteCoreV1NamespacedReplicationControllerAccepted, error)

	DeleteCoreV1NamespacedResourceQuota(params *DeleteCoreV1NamespacedResourceQuotaParams) (*DeleteCoreV1NamespacedResourceQuotaOK, *DeleteCoreV1NamespacedResourceQuotaAccepted, error)

	DeleteCoreV1NamespacedSecret(params *DeleteCoreV1NamespacedSecretParams) (*DeleteCoreV1NamespacedSecretOK, *DeleteCoreV1NamespacedSecretAccepted, error)

	DeleteCoreV1NamespacedService(params *DeleteCoreV1NamespacedServiceParams) (*DeleteCoreV1NamespacedServiceOK, *DeleteCoreV1NamespacedServiceAccepted, error)

	DeleteCoreV1NamespacedServiceAccount(params *DeleteCoreV1NamespacedServiceAccountParams) (*DeleteCoreV1NamespacedServiceAccountOK, *DeleteCoreV1NamespacedServiceAccountAccepted, error)

	DeleteCoreV1Node(params *DeleteCoreV1NodeParams) (*DeleteCoreV1NodeOK, *DeleteCoreV1NodeAccepted, error)

	DeleteCoreV1PersistentVolume(params *DeleteCoreV1PersistentVolumeParams) (*DeleteCoreV1PersistentVolumeOK, *DeleteCoreV1PersistentVolumeAccepted, error)

	GetCoreV1APIResources(params *GetCoreV1APIResourcesParams) (*GetCoreV1APIResourcesOK, error)

	ListCoreV1ComponentStatus(params *ListCoreV1ComponentStatusParams) (*ListCoreV1ComponentStatusOK, error)

	ListCoreV1ConfigMapForAllNamespaces(params *ListCoreV1ConfigMapForAllNamespacesParams) (*ListCoreV1ConfigMapForAllNamespacesOK, error)

	ListCoreV1EndpointsForAllNamespaces(params *ListCoreV1EndpointsForAllNamespacesParams) (*ListCoreV1EndpointsForAllNamespacesOK, error)

	ListCoreV1EventForAllNamespaces(params *ListCoreV1EventForAllNamespacesParams) (*ListCoreV1EventForAllNamespacesOK, error)

	ListCoreV1LimitRangeForAllNamespaces(params *ListCoreV1LimitRangeForAllNamespacesParams) (*ListCoreV1LimitRangeForAllNamespacesOK, error)

	ListCoreV1Namespace(params *ListCoreV1NamespaceParams) (*ListCoreV1NamespaceOK, error)

	ListCoreV1NamespacedConfigMap(params *ListCoreV1NamespacedConfigMapParams) (*ListCoreV1NamespacedConfigMapOK, error)

	ListCoreV1NamespacedEndpoints(params *ListCoreV1NamespacedEndpointsParams) (*ListCoreV1NamespacedEndpointsOK, error)

	ListCoreV1NamespacedEvent(params *ListCoreV1NamespacedEventParams) (*ListCoreV1NamespacedEventOK, error)

	ListCoreV1NamespacedLimitRange(params *ListCoreV1NamespacedLimitRangeParams) (*ListCoreV1NamespacedLimitRangeOK, error)

	ListCoreV1NamespacedPersistentVolumeClaim(params *ListCoreV1NamespacedPersistentVolumeClaimParams) (*ListCoreV1NamespacedPersistentVolumeClaimOK, error)

	ListCoreV1NamespacedPod(params *ListCoreV1NamespacedPodParams) (*ListCoreV1NamespacedPodOK, error)

	ListCoreV1NamespacedPodTemplate(params *ListCoreV1NamespacedPodTemplateParams) (*ListCoreV1NamespacedPodTemplateOK, error)

	ListCoreV1NamespacedReplicationController(params *ListCoreV1NamespacedReplicationControllerParams) (*ListCoreV1NamespacedReplicationControllerOK, error)

	ListCoreV1NamespacedResourceQuota(params *ListCoreV1NamespacedResourceQuotaParams) (*ListCoreV1NamespacedResourceQuotaOK, error)

	ListCoreV1NamespacedSecret(params *ListCoreV1NamespacedSecretParams) (*ListCoreV1NamespacedSecretOK, error)

	ListCoreV1NamespacedService(params *ListCoreV1NamespacedServiceParams) (*ListCoreV1NamespacedServiceOK, error)

	ListCoreV1NamespacedServiceAccount(params *ListCoreV1NamespacedServiceAccountParams) (*ListCoreV1NamespacedServiceAccountOK, error)

	ListCoreV1Node(params *ListCoreV1NodeParams) (*ListCoreV1NodeOK, error)

	ListCoreV1PersistentVolume(params *ListCoreV1PersistentVolumeParams) (*ListCoreV1PersistentVolumeOK, error)

	ListCoreV1PersistentVolumeClaimForAllNamespaces(params *ListCoreV1PersistentVolumeClaimForAllNamespacesParams) (*ListCoreV1PersistentVolumeClaimForAllNamespacesOK, error)

	ListCoreV1PodForAllNamespaces(params *ListCoreV1PodForAllNamespacesParams) (*ListCoreV1PodForAllNamespacesOK, error)

	ListCoreV1PodTemplateForAllNamespaces(params *ListCoreV1PodTemplateForAllNamespacesParams) (*ListCoreV1PodTemplateForAllNamespacesOK, error)

	ListCoreV1ReplicationControllerForAllNamespaces(params *ListCoreV1ReplicationControllerForAllNamespacesParams) (*ListCoreV1ReplicationControllerForAllNamespacesOK, error)

	ListCoreV1ResourceQuotaForAllNamespaces(params *ListCoreV1ResourceQuotaForAllNamespacesParams) (*ListCoreV1ResourceQuotaForAllNamespacesOK, error)

	ListCoreV1SecretForAllNamespaces(params *ListCoreV1SecretForAllNamespacesParams) (*ListCoreV1SecretForAllNamespacesOK, error)

	ListCoreV1ServiceAccountForAllNamespaces(params *ListCoreV1ServiceAccountForAllNamespacesParams) (*ListCoreV1ServiceAccountForAllNamespacesOK, error)

	ListCoreV1ServiceForAllNamespaces(params *ListCoreV1ServiceForAllNamespacesParams) (*ListCoreV1ServiceForAllNamespacesOK, error)

	PatchCoreV1Namespace(params *PatchCoreV1NamespaceParams) (*PatchCoreV1NamespaceOK, error)

	PatchCoreV1NamespaceStatus(params *PatchCoreV1NamespaceStatusParams) (*PatchCoreV1NamespaceStatusOK, error)

	PatchCoreV1NamespacedConfigMap(params *PatchCoreV1NamespacedConfigMapParams) (*PatchCoreV1NamespacedConfigMapOK, error)

	PatchCoreV1NamespacedEndpoints(params *PatchCoreV1NamespacedEndpointsParams) (*PatchCoreV1NamespacedEndpointsOK, error)

	PatchCoreV1NamespacedEvent(params *PatchCoreV1NamespacedEventParams) (*PatchCoreV1NamespacedEventOK, error)

	PatchCoreV1NamespacedLimitRange(params *PatchCoreV1NamespacedLimitRangeParams) (*PatchCoreV1NamespacedLimitRangeOK, error)

	PatchCoreV1NamespacedPersistentVolumeClaim(params *PatchCoreV1NamespacedPersistentVolumeClaimParams) (*PatchCoreV1NamespacedPersistentVolumeClaimOK, error)

	PatchCoreV1NamespacedPersistentVolumeClaimStatus(params *PatchCoreV1NamespacedPersistentVolumeClaimStatusParams) (*PatchCoreV1NamespacedPersistentVolumeClaimStatusOK, error)

	PatchCoreV1NamespacedPod(params *PatchCoreV1NamespacedPodParams) (*PatchCoreV1NamespacedPodOK, error)

	PatchCoreV1NamespacedPodStatus(params *PatchCoreV1NamespacedPodStatusParams) (*PatchCoreV1NamespacedPodStatusOK, error)

	PatchCoreV1NamespacedPodTemplate(params *PatchCoreV1NamespacedPodTemplateParams) (*PatchCoreV1NamespacedPodTemplateOK, error)

	PatchCoreV1NamespacedReplicationController(params *PatchCoreV1NamespacedReplicationControllerParams) (*PatchCoreV1NamespacedReplicationControllerOK, error)

	PatchCoreV1NamespacedReplicationControllerScale(params *PatchCoreV1NamespacedReplicationControllerScaleParams) (*PatchCoreV1NamespacedReplicationControllerScaleOK, error)

	PatchCoreV1NamespacedReplicationControllerStatus(params *PatchCoreV1NamespacedReplicationControllerStatusParams) (*PatchCoreV1NamespacedReplicationControllerStatusOK, error)

	PatchCoreV1NamespacedResourceQuota(params *PatchCoreV1NamespacedResourceQuotaParams) (*PatchCoreV1NamespacedResourceQuotaOK, error)

	PatchCoreV1NamespacedResourceQuotaStatus(params *PatchCoreV1NamespacedResourceQuotaStatusParams) (*PatchCoreV1NamespacedResourceQuotaStatusOK, error)

	PatchCoreV1NamespacedSecret(params *PatchCoreV1NamespacedSecretParams) (*PatchCoreV1NamespacedSecretOK, error)

	PatchCoreV1NamespacedService(params *PatchCoreV1NamespacedServiceParams) (*PatchCoreV1NamespacedServiceOK, error)

	PatchCoreV1NamespacedServiceAccount(params *PatchCoreV1NamespacedServiceAccountParams) (*PatchCoreV1NamespacedServiceAccountOK, error)

	PatchCoreV1NamespacedServiceStatus(params *PatchCoreV1NamespacedServiceStatusParams) (*PatchCoreV1NamespacedServiceStatusOK, error)

	PatchCoreV1Node(params *PatchCoreV1NodeParams) (*PatchCoreV1NodeOK, error)

	PatchCoreV1NodeStatus(params *PatchCoreV1NodeStatusParams) (*PatchCoreV1NodeStatusOK, error)

	PatchCoreV1PersistentVolume(params *PatchCoreV1PersistentVolumeParams) (*PatchCoreV1PersistentVolumeOK, error)

	PatchCoreV1PersistentVolumeStatus(params *PatchCoreV1PersistentVolumeStatusParams) (*PatchCoreV1PersistentVolumeStatusOK, error)

	ReadCoreV1ComponentStatus(params *ReadCoreV1ComponentStatusParams) (*ReadCoreV1ComponentStatusOK, error)

	ReadCoreV1Namespace(params *ReadCoreV1NamespaceParams) (*ReadCoreV1NamespaceOK, error)

	ReadCoreV1NamespaceStatus(params *ReadCoreV1NamespaceStatusParams) (*ReadCoreV1NamespaceStatusOK, error)

	ReadCoreV1NamespacedConfigMap(params *ReadCoreV1NamespacedConfigMapParams) (*ReadCoreV1NamespacedConfigMapOK, error)

	ReadCoreV1NamespacedEndpoints(params *ReadCoreV1NamespacedEndpointsParams) (*ReadCoreV1NamespacedEndpointsOK, error)

	ReadCoreV1NamespacedEvent(params *ReadCoreV1NamespacedEventParams) (*ReadCoreV1NamespacedEventOK, error)

	ReadCoreV1NamespacedLimitRange(params *ReadCoreV1NamespacedLimitRangeParams) (*ReadCoreV1NamespacedLimitRangeOK, error)

	ReadCoreV1NamespacedPersistentVolumeClaim(params *ReadCoreV1NamespacedPersistentVolumeClaimParams) (*ReadCoreV1NamespacedPersistentVolumeClaimOK, error)

	ReadCoreV1NamespacedPersistentVolumeClaimStatus(params *ReadCoreV1NamespacedPersistentVolumeClaimStatusParams) (*ReadCoreV1NamespacedPersistentVolumeClaimStatusOK, error)

	ReadCoreV1NamespacedPod(params *ReadCoreV1NamespacedPodParams) (*ReadCoreV1NamespacedPodOK, error)

	ReadCoreV1NamespacedPodLog(params *ReadCoreV1NamespacedPodLogParams) (*ReadCoreV1NamespacedPodLogOK, error)

	ReadCoreV1NamespacedPodStatus(params *ReadCoreV1NamespacedPodStatusParams) (*ReadCoreV1NamespacedPodStatusOK, error)

	ReadCoreV1NamespacedPodTemplate(params *ReadCoreV1NamespacedPodTemplateParams) (*ReadCoreV1NamespacedPodTemplateOK, error)

	ReadCoreV1NamespacedReplicationController(params *ReadCoreV1NamespacedReplicationControllerParams) (*ReadCoreV1NamespacedReplicationControllerOK, error)

	ReadCoreV1NamespacedReplicationControllerScale(params *ReadCoreV1NamespacedReplicationControllerScaleParams) (*ReadCoreV1NamespacedReplicationControllerScaleOK, error)

	ReadCoreV1NamespacedReplicationControllerStatus(params *ReadCoreV1NamespacedReplicationControllerStatusParams) (*ReadCoreV1NamespacedReplicationControllerStatusOK, error)

	ReadCoreV1NamespacedResourceQuota(params *ReadCoreV1NamespacedResourceQuotaParams) (*ReadCoreV1NamespacedResourceQuotaOK, error)

	ReadCoreV1NamespacedResourceQuotaStatus(params *ReadCoreV1NamespacedResourceQuotaStatusParams) (*ReadCoreV1NamespacedResourceQuotaStatusOK, error)

	ReadCoreV1NamespacedSecret(params *ReadCoreV1NamespacedSecretParams) (*ReadCoreV1NamespacedSecretOK, error)

	ReadCoreV1NamespacedService(params *ReadCoreV1NamespacedServiceParams) (*ReadCoreV1NamespacedServiceOK, error)

	ReadCoreV1NamespacedServiceAccount(params *ReadCoreV1NamespacedServiceAccountParams) (*ReadCoreV1NamespacedServiceAccountOK, error)

	ReadCoreV1NamespacedServiceStatus(params *ReadCoreV1NamespacedServiceStatusParams) (*ReadCoreV1NamespacedServiceStatusOK, error)

	ReadCoreV1Node(params *ReadCoreV1NodeParams) (*ReadCoreV1NodeOK, error)

	ReadCoreV1NodeStatus(params *ReadCoreV1NodeStatusParams) (*ReadCoreV1NodeStatusOK, error)

	ReadCoreV1PersistentVolume(params *ReadCoreV1PersistentVolumeParams) (*ReadCoreV1PersistentVolumeOK, error)

	ReadCoreV1PersistentVolumeStatus(params *ReadCoreV1PersistentVolumeStatusParams) (*ReadCoreV1PersistentVolumeStatusOK, error)

	ReplaceCoreV1Namespace(params *ReplaceCoreV1NamespaceParams) (*ReplaceCoreV1NamespaceOK, *ReplaceCoreV1NamespaceCreated, error)

	ReplaceCoreV1NamespaceFinalize(params *ReplaceCoreV1NamespaceFinalizeParams) (*ReplaceCoreV1NamespaceFinalizeOK, *ReplaceCoreV1NamespaceFinalizeCreated, error)

	ReplaceCoreV1NamespaceStatus(params *ReplaceCoreV1NamespaceStatusParams) (*ReplaceCoreV1NamespaceStatusOK, *ReplaceCoreV1NamespaceStatusCreated, error)

	ReplaceCoreV1NamespacedConfigMap(params *ReplaceCoreV1NamespacedConfigMapParams) (*ReplaceCoreV1NamespacedConfigMapOK, *ReplaceCoreV1NamespacedConfigMapCreated, error)

	ReplaceCoreV1NamespacedEndpoints(params *ReplaceCoreV1NamespacedEndpointsParams) (*ReplaceCoreV1NamespacedEndpointsOK, *ReplaceCoreV1NamespacedEndpointsCreated, error)

	ReplaceCoreV1NamespacedEvent(params *ReplaceCoreV1NamespacedEventParams) (*ReplaceCoreV1NamespacedEventOK, *ReplaceCoreV1NamespacedEventCreated, error)

	ReplaceCoreV1NamespacedLimitRange(params *ReplaceCoreV1NamespacedLimitRangeParams) (*ReplaceCoreV1NamespacedLimitRangeOK, *ReplaceCoreV1NamespacedLimitRangeCreated, error)

	ReplaceCoreV1NamespacedPersistentVolumeClaim(params *ReplaceCoreV1NamespacedPersistentVolumeClaimParams) (*ReplaceCoreV1NamespacedPersistentVolumeClaimOK, *ReplaceCoreV1NamespacedPersistentVolumeClaimCreated, error)

	ReplaceCoreV1NamespacedPersistentVolumeClaimStatus(params *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusParams) (*ReplaceCoreV1NamespacedPersistentVolumeClaimStatusOK, *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusCreated, error)

	ReplaceCoreV1NamespacedPod(params *ReplaceCoreV1NamespacedPodParams) (*ReplaceCoreV1NamespacedPodOK, *ReplaceCoreV1NamespacedPodCreated, error)

	ReplaceCoreV1NamespacedPodStatus(params *ReplaceCoreV1NamespacedPodStatusParams) (*ReplaceCoreV1NamespacedPodStatusOK, *ReplaceCoreV1NamespacedPodStatusCreated, error)

	ReplaceCoreV1NamespacedPodTemplate(params *ReplaceCoreV1NamespacedPodTemplateParams) (*ReplaceCoreV1NamespacedPodTemplateOK, *ReplaceCoreV1NamespacedPodTemplateCreated, error)

	ReplaceCoreV1NamespacedReplicationController(params *ReplaceCoreV1NamespacedReplicationControllerParams) (*ReplaceCoreV1NamespacedReplicationControllerOK, *ReplaceCoreV1NamespacedReplicationControllerCreated, error)

	ReplaceCoreV1NamespacedReplicationControllerScale(params *ReplaceCoreV1NamespacedReplicationControllerScaleParams) (*ReplaceCoreV1NamespacedReplicationControllerScaleOK, *ReplaceCoreV1NamespacedReplicationControllerScaleCreated, error)

	ReplaceCoreV1NamespacedReplicationControllerStatus(params *ReplaceCoreV1NamespacedReplicationControllerStatusParams) (*ReplaceCoreV1NamespacedReplicationControllerStatusOK, *ReplaceCoreV1NamespacedReplicationControllerStatusCreated, error)

	ReplaceCoreV1NamespacedResourceQuota(params *ReplaceCoreV1NamespacedResourceQuotaParams) (*ReplaceCoreV1NamespacedResourceQuotaOK, *ReplaceCoreV1NamespacedResourceQuotaCreated, error)

	ReplaceCoreV1NamespacedResourceQuotaStatus(params *ReplaceCoreV1NamespacedResourceQuotaStatusParams) (*ReplaceCoreV1NamespacedResourceQuotaStatusOK, *ReplaceCoreV1NamespacedResourceQuotaStatusCreated, error)

	ReplaceCoreV1NamespacedSecret(params *ReplaceCoreV1NamespacedSecretParams) (*ReplaceCoreV1NamespacedSecretOK, *ReplaceCoreV1NamespacedSecretCreated, error)

	ReplaceCoreV1NamespacedService(params *ReplaceCoreV1NamespacedServiceParams) (*ReplaceCoreV1NamespacedServiceOK, *ReplaceCoreV1NamespacedServiceCreated, error)

	ReplaceCoreV1NamespacedServiceAccount(params *ReplaceCoreV1NamespacedServiceAccountParams) (*ReplaceCoreV1NamespacedServiceAccountOK, *ReplaceCoreV1NamespacedServiceAccountCreated, error)

	ReplaceCoreV1NamespacedServiceStatus(params *ReplaceCoreV1NamespacedServiceStatusParams) (*ReplaceCoreV1NamespacedServiceStatusOK, *ReplaceCoreV1NamespacedServiceStatusCreated, error)

	ReplaceCoreV1Node(params *ReplaceCoreV1NodeParams) (*ReplaceCoreV1NodeOK, *ReplaceCoreV1NodeCreated, error)

	ReplaceCoreV1NodeStatus(params *ReplaceCoreV1NodeStatusParams) (*ReplaceCoreV1NodeStatusOK, *ReplaceCoreV1NodeStatusCreated, error)

	ReplaceCoreV1PersistentVolume(params *ReplaceCoreV1PersistentVolumeParams) (*ReplaceCoreV1PersistentVolumeOK, *ReplaceCoreV1PersistentVolumeCreated, error)

	ReplaceCoreV1PersistentVolumeStatus(params *ReplaceCoreV1PersistentVolumeStatusParams) (*ReplaceCoreV1PersistentVolumeStatusOK, *ReplaceCoreV1PersistentVolumeStatusCreated, error)

	WatchCoreV1ConfigMapListForAllNamespaces(params *WatchCoreV1ConfigMapListForAllNamespacesParams) (*WatchCoreV1ConfigMapListForAllNamespacesOK, error)

	WatchCoreV1EndpointsListForAllNamespaces(params *WatchCoreV1EndpointsListForAllNamespacesParams) (*WatchCoreV1EndpointsListForAllNamespacesOK, error)

	WatchCoreV1EventListForAllNamespaces(params *WatchCoreV1EventListForAllNamespacesParams) (*WatchCoreV1EventListForAllNamespacesOK, error)

	WatchCoreV1LimitRangeListForAllNamespaces(params *WatchCoreV1LimitRangeListForAllNamespacesParams) (*WatchCoreV1LimitRangeListForAllNamespacesOK, error)

	WatchCoreV1Namespace(params *WatchCoreV1NamespaceParams) (*WatchCoreV1NamespaceOK, error)

	WatchCoreV1NamespaceList(params *WatchCoreV1NamespaceListParams) (*WatchCoreV1NamespaceListOK, error)

	WatchCoreV1NamespacedConfigMap(params *WatchCoreV1NamespacedConfigMapParams) (*WatchCoreV1NamespacedConfigMapOK, error)

	WatchCoreV1NamespacedConfigMapList(params *WatchCoreV1NamespacedConfigMapListParams) (*WatchCoreV1NamespacedConfigMapListOK, error)

	WatchCoreV1NamespacedEndpoints(params *WatchCoreV1NamespacedEndpointsParams) (*WatchCoreV1NamespacedEndpointsOK, error)

	WatchCoreV1NamespacedEndpointsList(params *WatchCoreV1NamespacedEndpointsListParams) (*WatchCoreV1NamespacedEndpointsListOK, error)

	WatchCoreV1NamespacedEvent(params *WatchCoreV1NamespacedEventParams) (*WatchCoreV1NamespacedEventOK, error)

	WatchCoreV1NamespacedEventList(params *WatchCoreV1NamespacedEventListParams) (*WatchCoreV1NamespacedEventListOK, error)

	WatchCoreV1NamespacedLimitRange(params *WatchCoreV1NamespacedLimitRangeParams) (*WatchCoreV1NamespacedLimitRangeOK, error)

	WatchCoreV1NamespacedLimitRangeList(params *WatchCoreV1NamespacedLimitRangeListParams) (*WatchCoreV1NamespacedLimitRangeListOK, error)

	WatchCoreV1NamespacedPersistentVolumeClaim(params *WatchCoreV1NamespacedPersistentVolumeClaimParams) (*WatchCoreV1NamespacedPersistentVolumeClaimOK, error)

	WatchCoreV1NamespacedPersistentVolumeClaimList(params *WatchCoreV1NamespacedPersistentVolumeClaimListParams) (*WatchCoreV1NamespacedPersistentVolumeClaimListOK, error)

	WatchCoreV1NamespacedPod(params *WatchCoreV1NamespacedPodParams) (*WatchCoreV1NamespacedPodOK, error)

	WatchCoreV1NamespacedPodList(params *WatchCoreV1NamespacedPodListParams) (*WatchCoreV1NamespacedPodListOK, error)

	WatchCoreV1NamespacedPodTemplate(params *WatchCoreV1NamespacedPodTemplateParams) (*WatchCoreV1NamespacedPodTemplateOK, error)

	WatchCoreV1NamespacedPodTemplateList(params *WatchCoreV1NamespacedPodTemplateListParams) (*WatchCoreV1NamespacedPodTemplateListOK, error)

	WatchCoreV1NamespacedReplicationController(params *WatchCoreV1NamespacedReplicationControllerParams) (*WatchCoreV1NamespacedReplicationControllerOK, error)

	WatchCoreV1NamespacedReplicationControllerList(params *WatchCoreV1NamespacedReplicationControllerListParams) (*WatchCoreV1NamespacedReplicationControllerListOK, error)

	WatchCoreV1NamespacedResourceQuota(params *WatchCoreV1NamespacedResourceQuotaParams) (*WatchCoreV1NamespacedResourceQuotaOK, error)

	WatchCoreV1NamespacedResourceQuotaList(params *WatchCoreV1NamespacedResourceQuotaListParams) (*WatchCoreV1NamespacedResourceQuotaListOK, error)

	WatchCoreV1NamespacedSecret(params *WatchCoreV1NamespacedSecretParams) (*WatchCoreV1NamespacedSecretOK, error)

	WatchCoreV1NamespacedSecretList(params *WatchCoreV1NamespacedSecretListParams) (*WatchCoreV1NamespacedSecretListOK, error)

	WatchCoreV1NamespacedService(params *WatchCoreV1NamespacedServiceParams) (*WatchCoreV1NamespacedServiceOK, error)

	WatchCoreV1NamespacedServiceAccount(params *WatchCoreV1NamespacedServiceAccountParams) (*WatchCoreV1NamespacedServiceAccountOK, error)

	WatchCoreV1NamespacedServiceAccountList(params *WatchCoreV1NamespacedServiceAccountListParams) (*WatchCoreV1NamespacedServiceAccountListOK, error)

	WatchCoreV1NamespacedServiceList(params *WatchCoreV1NamespacedServiceListParams) (*WatchCoreV1NamespacedServiceListOK, error)

	WatchCoreV1Node(params *WatchCoreV1NodeParams) (*WatchCoreV1NodeOK, error)

	WatchCoreV1NodeList(params *WatchCoreV1NodeListParams) (*WatchCoreV1NodeListOK, error)

	WatchCoreV1PersistentVolume(params *WatchCoreV1PersistentVolumeParams) (*WatchCoreV1PersistentVolumeOK, error)

	WatchCoreV1PersistentVolumeClaimListForAllNamespaces(params *WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams) (*WatchCoreV1PersistentVolumeClaimListForAllNamespacesOK, error)

	WatchCoreV1PersistentVolumeList(params *WatchCoreV1PersistentVolumeListParams) (*WatchCoreV1PersistentVolumeListOK, error)

	WatchCoreV1PodListForAllNamespaces(params *WatchCoreV1PodListForAllNamespacesParams) (*WatchCoreV1PodListForAllNamespacesOK, error)

	WatchCoreV1PodTemplateListForAllNamespaces(params *WatchCoreV1PodTemplateListForAllNamespacesParams) (*WatchCoreV1PodTemplateListForAllNamespacesOK, error)

	WatchCoreV1ReplicationControllerListForAllNamespaces(params *WatchCoreV1ReplicationControllerListForAllNamespacesParams) (*WatchCoreV1ReplicationControllerListForAllNamespacesOK, error)

	WatchCoreV1ResourceQuotaListForAllNamespaces(params *WatchCoreV1ResourceQuotaListForAllNamespacesParams) (*WatchCoreV1ResourceQuotaListForAllNamespacesOK, error)

	WatchCoreV1SecretListForAllNamespaces(params *WatchCoreV1SecretListForAllNamespacesParams) (*WatchCoreV1SecretListForAllNamespacesOK, error)

	WatchCoreV1ServiceAccountListForAllNamespaces(params *WatchCoreV1ServiceAccountListForAllNamespacesParams) (*WatchCoreV1ServiceAccountListForAllNamespacesOK, error)

	WatchCoreV1ServiceListForAllNamespaces(params *WatchCoreV1ServiceListForAllNamespacesParams) (*WatchCoreV1ServiceListForAllNamespacesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConnectCoreV1DeleteNamespacedPodProxy connect DELETE requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1DeleteNamespacedPodProxy(params *ConnectCoreV1DeleteNamespacedPodProxyParams) (*ConnectCoreV1DeleteNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNamespacedPodProxy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1DeleteNamespacedPodProxyWithPath connect DELETE requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1DeleteNamespacedPodProxyWithPath(params *ConnectCoreV1DeleteNamespacedPodProxyWithPathParams) (*ConnectCoreV1DeleteNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNamespacedPodProxyWithPath",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1DeleteNamespacedServiceProxy connect DELETE requests to proxy of Service
*/
func (a *Client) ConnectCoreV1DeleteNamespacedServiceProxy(params *ConnectCoreV1DeleteNamespacedServiceProxyParams) (*ConnectCoreV1DeleteNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNamespacedServiceProxy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1DeleteNamespacedServiceProxyWithPath connect DELETE requests to proxy of Service
*/
func (a *Client) ConnectCoreV1DeleteNamespacedServiceProxyWithPath(params *ConnectCoreV1DeleteNamespacedServiceProxyWithPathParams) (*ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNamespacedServiceProxyWithPath",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1DeleteNodeProxy connect DELETE requests to proxy of Node
*/
func (a *Client) ConnectCoreV1DeleteNodeProxy(params *ConnectCoreV1DeleteNodeProxyParams) (*ConnectCoreV1DeleteNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNodeProxy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1DeleteNodeProxyWithPath connect DELETE requests to proxy of Node
*/
func (a *Client) ConnectCoreV1DeleteNodeProxyWithPath(params *ConnectCoreV1DeleteNodeProxyWithPathParams) (*ConnectCoreV1DeleteNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1DeleteNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1DeleteNodeProxyWithPath",
		Method:             "DELETE",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1DeleteNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1DeleteNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1DeleteNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedPodAttach connect GET requests to attach of Pod
*/
func (a *Client) ConnectCoreV1GetNamespacedPodAttach(params *ConnectCoreV1GetNamespacedPodAttachParams) (*ConnectCoreV1GetNamespacedPodAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedPodAttachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedPodAttach",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/attach",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedPodAttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedPodAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedPodAttach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedPodExec connect GET requests to exec of Pod
*/
func (a *Client) ConnectCoreV1GetNamespacedPodExec(params *ConnectCoreV1GetNamespacedPodExecParams) (*ConnectCoreV1GetNamespacedPodExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedPodExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedPodExec",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/exec",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedPodExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedPodExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedPodExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedPodPortforward connect GET requests to portforward of Pod
*/
func (a *Client) ConnectCoreV1GetNamespacedPodPortforward(params *ConnectCoreV1GetNamespacedPodPortforwardParams) (*ConnectCoreV1GetNamespacedPodPortforwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedPodPortforwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedPodPortforward",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/portforward",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedPodPortforwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedPodPortforwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedPodPortforward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedPodProxy connect GET requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1GetNamespacedPodProxy(params *ConnectCoreV1GetNamespacedPodProxyParams) (*ConnectCoreV1GetNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedPodProxy",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedPodProxyWithPath connect GET requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1GetNamespacedPodProxyWithPath(params *ConnectCoreV1GetNamespacedPodProxyWithPathParams) (*ConnectCoreV1GetNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedPodProxyWithPath",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedServiceProxy connect GET requests to proxy of Service
*/
func (a *Client) ConnectCoreV1GetNamespacedServiceProxy(params *ConnectCoreV1GetNamespacedServiceProxyParams) (*ConnectCoreV1GetNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedServiceProxy",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNamespacedServiceProxyWithPath connect GET requests to proxy of Service
*/
func (a *Client) ConnectCoreV1GetNamespacedServiceProxyWithPath(params *ConnectCoreV1GetNamespacedServiceProxyWithPathParams) (*ConnectCoreV1GetNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNamespacedServiceProxyWithPath",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNodeProxy connect GET requests to proxy of Node
*/
func (a *Client) ConnectCoreV1GetNodeProxy(params *ConnectCoreV1GetNodeProxyParams) (*ConnectCoreV1GetNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNodeProxy",
		Method:             "GET",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1GetNodeProxyWithPath connect GET requests to proxy of Node
*/
func (a *Client) ConnectCoreV1GetNodeProxyWithPath(params *ConnectCoreV1GetNodeProxyWithPathParams) (*ConnectCoreV1GetNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1GetNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1GetNodeProxyWithPath",
		Method:             "GET",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1GetNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1GetNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1GetNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNamespacedPodProxy connect HEAD requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1HeadNamespacedPodProxy(params *ConnectCoreV1HeadNamespacedPodProxyParams) (*ConnectCoreV1HeadNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNamespacedPodProxy",
		Method:             "HEAD",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNamespacedPodProxyWithPath connect HEAD requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1HeadNamespacedPodProxyWithPath(params *ConnectCoreV1HeadNamespacedPodProxyWithPathParams) (*ConnectCoreV1HeadNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNamespacedPodProxyWithPath",
		Method:             "HEAD",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNamespacedServiceProxy connect HEAD requests to proxy of Service
*/
func (a *Client) ConnectCoreV1HeadNamespacedServiceProxy(params *ConnectCoreV1HeadNamespacedServiceProxyParams) (*ConnectCoreV1HeadNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNamespacedServiceProxy",
		Method:             "HEAD",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNamespacedServiceProxyWithPath connect HEAD requests to proxy of Service
*/
func (a *Client) ConnectCoreV1HeadNamespacedServiceProxyWithPath(params *ConnectCoreV1HeadNamespacedServiceProxyWithPathParams) (*ConnectCoreV1HeadNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNamespacedServiceProxyWithPath",
		Method:             "HEAD",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNodeProxy connect HEAD requests to proxy of Node
*/
func (a *Client) ConnectCoreV1HeadNodeProxy(params *ConnectCoreV1HeadNodeProxyParams) (*ConnectCoreV1HeadNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNodeProxy",
		Method:             "HEAD",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1HeadNodeProxyWithPath connect HEAD requests to proxy of Node
*/
func (a *Client) ConnectCoreV1HeadNodeProxyWithPath(params *ConnectCoreV1HeadNodeProxyWithPathParams) (*ConnectCoreV1HeadNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1HeadNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1HeadNodeProxyWithPath",
		Method:             "HEAD",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1HeadNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1HeadNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1HeadNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNamespacedPodProxy connect OPTIONS requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1OptionsNamespacedPodProxy(params *ConnectCoreV1OptionsNamespacedPodProxyParams) (*ConnectCoreV1OptionsNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNamespacedPodProxy",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNamespacedPodProxyWithPath connect OPTIONS requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1OptionsNamespacedPodProxyWithPath(params *ConnectCoreV1OptionsNamespacedPodProxyWithPathParams) (*ConnectCoreV1OptionsNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNamespacedPodProxyWithPath",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNamespacedServiceProxy connect OPTIONS requests to proxy of Service
*/
func (a *Client) ConnectCoreV1OptionsNamespacedServiceProxy(params *ConnectCoreV1OptionsNamespacedServiceProxyParams) (*ConnectCoreV1OptionsNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNamespacedServiceProxy",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNamespacedServiceProxyWithPath connect OPTIONS requests to proxy of Service
*/
func (a *Client) ConnectCoreV1OptionsNamespacedServiceProxyWithPath(params *ConnectCoreV1OptionsNamespacedServiceProxyWithPathParams) (*ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNamespacedServiceProxyWithPath",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNodeProxy connect OPTIONS requests to proxy of Node
*/
func (a *Client) ConnectCoreV1OptionsNodeProxy(params *ConnectCoreV1OptionsNodeProxyParams) (*ConnectCoreV1OptionsNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNodeProxy",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1OptionsNodeProxyWithPath connect OPTIONS requests to proxy of Node
*/
func (a *Client) ConnectCoreV1OptionsNodeProxyWithPath(params *ConnectCoreV1OptionsNodeProxyWithPathParams) (*ConnectCoreV1OptionsNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1OptionsNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1OptionsNodeProxyWithPath",
		Method:             "OPTIONS",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1OptionsNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1OptionsNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1OptionsNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNamespacedPodProxy connect PATCH requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PatchNamespacedPodProxy(params *ConnectCoreV1PatchNamespacedPodProxyParams) (*ConnectCoreV1PatchNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNamespacedPodProxy",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNamespacedPodProxyWithPath connect PATCH requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PatchNamespacedPodProxyWithPath(params *ConnectCoreV1PatchNamespacedPodProxyWithPathParams) (*ConnectCoreV1PatchNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNamespacedPodProxyWithPath",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNamespacedServiceProxy connect PATCH requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PatchNamespacedServiceProxy(params *ConnectCoreV1PatchNamespacedServiceProxyParams) (*ConnectCoreV1PatchNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNamespacedServiceProxy",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNamespacedServiceProxyWithPath connect PATCH requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PatchNamespacedServiceProxyWithPath(params *ConnectCoreV1PatchNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PatchNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNamespacedServiceProxyWithPath",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNodeProxy connect PATCH requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PatchNodeProxy(params *ConnectCoreV1PatchNodeProxyParams) (*ConnectCoreV1PatchNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNodeProxy",
		Method:             "PATCH",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PatchNodeProxyWithPath connect PATCH requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PatchNodeProxyWithPath(params *ConnectCoreV1PatchNodeProxyWithPathParams) (*ConnectCoreV1PatchNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PatchNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PatchNodeProxyWithPath",
		Method:             "PATCH",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PatchNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PatchNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PatchNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedPodAttach connect POST requests to attach of Pod
*/
func (a *Client) ConnectCoreV1PostNamespacedPodAttach(params *ConnectCoreV1PostNamespacedPodAttachParams) (*ConnectCoreV1PostNamespacedPodAttachOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedPodAttachParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedPodAttach",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/attach",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedPodAttachReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedPodAttachOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedPodAttach: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedPodExec connect POST requests to exec of Pod
*/
func (a *Client) ConnectCoreV1PostNamespacedPodExec(params *ConnectCoreV1PostNamespacedPodExecParams) (*ConnectCoreV1PostNamespacedPodExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedPodExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedPodExec",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/exec",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedPodExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedPodExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedPodExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedPodPortforward connect POST requests to portforward of Pod
*/
func (a *Client) ConnectCoreV1PostNamespacedPodPortforward(params *ConnectCoreV1PostNamespacedPodPortforwardParams) (*ConnectCoreV1PostNamespacedPodPortforwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedPodPortforwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedPodPortforward",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/portforward",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedPodPortforwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedPodPortforwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedPodPortforward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedPodProxy connect POST requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PostNamespacedPodProxy(params *ConnectCoreV1PostNamespacedPodProxyParams) (*ConnectCoreV1PostNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedPodProxy",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedPodProxyWithPath connect POST requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PostNamespacedPodProxyWithPath(params *ConnectCoreV1PostNamespacedPodProxyWithPathParams) (*ConnectCoreV1PostNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedPodProxyWithPath",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedServiceProxy connect POST requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PostNamespacedServiceProxy(params *ConnectCoreV1PostNamespacedServiceProxyParams) (*ConnectCoreV1PostNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedServiceProxy",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNamespacedServiceProxyWithPath connect POST requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PostNamespacedServiceProxyWithPath(params *ConnectCoreV1PostNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PostNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNamespacedServiceProxyWithPath",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNodeProxy connect POST requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PostNodeProxy(params *ConnectCoreV1PostNodeProxyParams) (*ConnectCoreV1PostNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNodeProxy",
		Method:             "POST",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PostNodeProxyWithPath connect POST requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PostNodeProxyWithPath(params *ConnectCoreV1PostNodeProxyWithPathParams) (*ConnectCoreV1PostNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PostNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PostNodeProxyWithPath",
		Method:             "POST",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PostNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PostNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PostNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNamespacedPodProxy connect PUT requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PutNamespacedPodProxy(params *ConnectCoreV1PutNamespacedPodProxyParams) (*ConnectCoreV1PutNamespacedPodProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNamespacedPodProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNamespacedPodProxy",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNamespacedPodProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNamespacedPodProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNamespacedPodProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNamespacedPodProxyWithPath connect PUT requests to proxy of Pod
*/
func (a *Client) ConnectCoreV1PutNamespacedPodProxyWithPath(params *ConnectCoreV1PutNamespacedPodProxyWithPathParams) (*ConnectCoreV1PutNamespacedPodProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNamespacedPodProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNamespacedPodProxyWithPath",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNamespacedPodProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNamespacedPodProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNamespacedPodProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNamespacedServiceProxy connect PUT requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PutNamespacedServiceProxy(params *ConnectCoreV1PutNamespacedServiceProxyParams) (*ConnectCoreV1PutNamespacedServiceProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNamespacedServiceProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNamespacedServiceProxy",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNamespacedServiceProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNamespacedServiceProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNamespacedServiceProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNamespacedServiceProxyWithPath connect PUT requests to proxy of Service
*/
func (a *Client) ConnectCoreV1PutNamespacedServiceProxyWithPath(params *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) (*ConnectCoreV1PutNamespacedServiceProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNamespacedServiceProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNamespacedServiceProxyWithPath",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNamespacedServiceProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNamespacedServiceProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNamespacedServiceProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNodeProxy connect PUT requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PutNodeProxy(params *ConnectCoreV1PutNodeProxyParams) (*ConnectCoreV1PutNodeProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNodeProxyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNodeProxy",
		Method:             "PUT",
		PathPattern:        "/api/v1/nodes/{name}/proxy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNodeProxyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNodeProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNodeProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCoreV1PutNodeProxyWithPath connect PUT requests to proxy of Node
*/
func (a *Client) ConnectCoreV1PutNodeProxyWithPath(params *ConnectCoreV1PutNodeProxyWithPathParams) (*ConnectCoreV1PutNodeProxyWithPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectCoreV1PutNodeProxyWithPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "connectCoreV1PutNodeProxyWithPath",
		Method:             "PUT",
		PathPattern:        "/api/v1/nodes/{name}/proxy/{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectCoreV1PutNodeProxyWithPathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectCoreV1PutNodeProxyWithPathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for connectCoreV1PutNodeProxyWithPath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1Namespace create a Namespace
*/
func (a *Client) CreateCoreV1Namespace(params *CreateCoreV1NamespaceParams) (*CreateCoreV1NamespaceOK, *CreateCoreV1NamespaceCreated, *CreateCoreV1NamespaceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1Namespace",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespaceOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespaceCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespaceAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedBinding create a Binding
*/
func (a *Client) CreateCoreV1NamespacedBinding(params *CreateCoreV1NamespacedBindingParams) (*CreateCoreV1NamespacedBindingOK, *CreateCoreV1NamespacedBindingCreated, *CreateCoreV1NamespacedBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedBinding",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/bindings",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedBindingOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedBindingCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedConfigMap create a ConfigMap
*/
func (a *Client) CreateCoreV1NamespacedConfigMap(params *CreateCoreV1NamespacedConfigMapParams) (*CreateCoreV1NamespacedConfigMapOK, *CreateCoreV1NamespacedConfigMapCreated, *CreateCoreV1NamespacedConfigMapAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedConfigMap",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedConfigMapOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedConfigMapCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedConfigMapAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedEndpoints create Endpoints
*/
func (a *Client) CreateCoreV1NamespacedEndpoints(params *CreateCoreV1NamespacedEndpointsParams) (*CreateCoreV1NamespacedEndpointsOK, *CreateCoreV1NamespacedEndpointsCreated, *CreateCoreV1NamespacedEndpointsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedEndpoints",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedEndpointsOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedEndpointsCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedEndpointsAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedEvent create an Event
*/
func (a *Client) CreateCoreV1NamespacedEvent(params *CreateCoreV1NamespacedEventParams) (*CreateCoreV1NamespacedEventOK, *CreateCoreV1NamespacedEventCreated, *CreateCoreV1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedEvent",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedEventOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedEventCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedEventAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedLimitRange create a LimitRange
*/
func (a *Client) CreateCoreV1NamespacedLimitRange(params *CreateCoreV1NamespacedLimitRangeParams) (*CreateCoreV1NamespacedLimitRangeOK, *CreateCoreV1NamespacedLimitRangeCreated, *CreateCoreV1NamespacedLimitRangeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedLimitRange",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedLimitRangeOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedLimitRangeCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedLimitRangeAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedPersistentVolumeClaim create a PersistentVolumeClaim
*/
func (a *Client) CreateCoreV1NamespacedPersistentVolumeClaim(params *CreateCoreV1NamespacedPersistentVolumeClaimParams) (*CreateCoreV1NamespacedPersistentVolumeClaimOK, *CreateCoreV1NamespacedPersistentVolumeClaimCreated, *CreateCoreV1NamespacedPersistentVolumeClaimAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedPersistentVolumeClaim",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedPersistentVolumeClaimOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedPersistentVolumeClaimCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedPersistentVolumeClaimAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedPod create a Pod
*/
func (a *Client) CreateCoreV1NamespacedPod(params *CreateCoreV1NamespacedPodParams) (*CreateCoreV1NamespacedPodOK, *CreateCoreV1NamespacedPodCreated, *CreateCoreV1NamespacedPodAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedPod",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedPodOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedPodCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedPodAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedPodBinding create binding of a Pod
*/
func (a *Client) CreateCoreV1NamespacedPodBinding(params *CreateCoreV1NamespacedPodBindingParams) (*CreateCoreV1NamespacedPodBindingOK, *CreateCoreV1NamespacedPodBindingCreated, *CreateCoreV1NamespacedPodBindingAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedPodBindingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedPodBinding",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/binding",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedPodBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedPodBindingOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedPodBindingCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedPodBindingAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedPodEviction create eviction of a Pod
*/
func (a *Client) CreateCoreV1NamespacedPodEviction(params *CreateCoreV1NamespacedPodEvictionParams) (*CreateCoreV1NamespacedPodEvictionOK, *CreateCoreV1NamespacedPodEvictionCreated, *CreateCoreV1NamespacedPodEvictionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedPodEvictionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedPodEviction",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/eviction",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedPodEvictionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedPodEvictionOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedPodEvictionCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedPodEvictionAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedPodTemplate create a PodTemplate
*/
func (a *Client) CreateCoreV1NamespacedPodTemplate(params *CreateCoreV1NamespacedPodTemplateParams) (*CreateCoreV1NamespacedPodTemplateOK, *CreateCoreV1NamespacedPodTemplateCreated, *CreateCoreV1NamespacedPodTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedPodTemplate",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedPodTemplateOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedPodTemplateCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedPodTemplateAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedReplicationController create a ReplicationController
*/
func (a *Client) CreateCoreV1NamespacedReplicationController(params *CreateCoreV1NamespacedReplicationControllerParams) (*CreateCoreV1NamespacedReplicationControllerOK, *CreateCoreV1NamespacedReplicationControllerCreated, *CreateCoreV1NamespacedReplicationControllerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedReplicationController",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedReplicationControllerOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedReplicationControllerCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedReplicationControllerAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedResourceQuota create a ResourceQuota
*/
func (a *Client) CreateCoreV1NamespacedResourceQuota(params *CreateCoreV1NamespacedResourceQuotaParams) (*CreateCoreV1NamespacedResourceQuotaOK, *CreateCoreV1NamespacedResourceQuotaCreated, *CreateCoreV1NamespacedResourceQuotaAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedResourceQuota",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedResourceQuotaOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedResourceQuotaCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedResourceQuotaAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedSecret create a Secret
*/
func (a *Client) CreateCoreV1NamespacedSecret(params *CreateCoreV1NamespacedSecretParams) (*CreateCoreV1NamespacedSecretOK, *CreateCoreV1NamespacedSecretCreated, *CreateCoreV1NamespacedSecretAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedSecret",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedSecretOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedSecretCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedSecretAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedService create a Service
*/
func (a *Client) CreateCoreV1NamespacedService(params *CreateCoreV1NamespacedServiceParams) (*CreateCoreV1NamespacedServiceOK, *CreateCoreV1NamespacedServiceCreated, *CreateCoreV1NamespacedServiceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedService",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedServiceOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedServiceCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedServiceAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedServiceAccount create a ServiceAccount
*/
func (a *Client) CreateCoreV1NamespacedServiceAccount(params *CreateCoreV1NamespacedServiceAccountParams) (*CreateCoreV1NamespacedServiceAccountOK, *CreateCoreV1NamespacedServiceAccountCreated, *CreateCoreV1NamespacedServiceAccountAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedServiceAccountOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedServiceAccountCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedServiceAccountAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1NamespacedServiceAccountToken create token of a ServiceAccount
*/
func (a *Client) CreateCoreV1NamespacedServiceAccountToken(params *CreateCoreV1NamespacedServiceAccountTokenParams) (*CreateCoreV1NamespacedServiceAccountTokenOK, *CreateCoreV1NamespacedServiceAccountTokenCreated, *CreateCoreV1NamespacedServiceAccountTokenAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NamespacedServiceAccountTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1NamespacedServiceAccountToken",
		Method:             "POST",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NamespacedServiceAccountTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NamespacedServiceAccountTokenOK:
		return value, nil, nil, nil
	case *CreateCoreV1NamespacedServiceAccountTokenCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NamespacedServiceAccountTokenAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1Node create a Node
*/
func (a *Client) CreateCoreV1Node(params *CreateCoreV1NodeParams) (*CreateCoreV1NodeOK, *CreateCoreV1NodeCreated, *CreateCoreV1NodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1Node",
		Method:             "POST",
		PathPattern:        "/api/v1/nodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1NodeOK:
		return value, nil, nil, nil
	case *CreateCoreV1NodeCreated:
		return nil, value, nil, nil
	case *CreateCoreV1NodeAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCoreV1PersistentVolume create a PersistentVolume
*/
func (a *Client) CreateCoreV1PersistentVolume(params *CreateCoreV1PersistentVolumeParams) (*CreateCoreV1PersistentVolumeOK, *CreateCoreV1PersistentVolumeCreated, *CreateCoreV1PersistentVolumeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoreV1PersistentVolume",
		Method:             "POST",
		PathPattern:        "/api/v1/persistentvolumes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoreV1PersistentVolumeOK:
		return value, nil, nil, nil
	case *CreateCoreV1PersistentVolumeCreated:
		return nil, value, nil, nil
	case *CreateCoreV1PersistentVolumeAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedConfigMap delete collection of ConfigMap
*/
func (a *Client) DeleteCoreV1CollectionNamespacedConfigMap(params *DeleteCoreV1CollectionNamespacedConfigMapParams) (*DeleteCoreV1CollectionNamespacedConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedConfigMap",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedEndpoints delete collection of Endpoints
*/
func (a *Client) DeleteCoreV1CollectionNamespacedEndpoints(params *DeleteCoreV1CollectionNamespacedEndpointsParams) (*DeleteCoreV1CollectionNamespacedEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedEndpoints",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedEvent delete collection of Event
*/
func (a *Client) DeleteCoreV1CollectionNamespacedEvent(params *DeleteCoreV1CollectionNamespacedEventParams) (*DeleteCoreV1CollectionNamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedLimitRange delete collection of LimitRange
*/
func (a *Client) DeleteCoreV1CollectionNamespacedLimitRange(params *DeleteCoreV1CollectionNamespacedLimitRangeParams) (*DeleteCoreV1CollectionNamespacedLimitRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedLimitRange",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedLimitRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedLimitRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedPersistentVolumeClaim delete collection of PersistentVolumeClaim
*/
func (a *Client) DeleteCoreV1CollectionNamespacedPersistentVolumeClaim(params *DeleteCoreV1CollectionNamespacedPersistentVolumeClaimParams) (*DeleteCoreV1CollectionNamespacedPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedPersistentVolumeClaim",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedPod delete collection of Pod
*/
func (a *Client) DeleteCoreV1CollectionNamespacedPod(params *DeleteCoreV1CollectionNamespacedPodParams) (*DeleteCoreV1CollectionNamespacedPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedPod",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedPodTemplate delete collection of PodTemplate
*/
func (a *Client) DeleteCoreV1CollectionNamespacedPodTemplate(params *DeleteCoreV1CollectionNamespacedPodTemplateParams) (*DeleteCoreV1CollectionNamespacedPodTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedPodTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedPodTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedPodTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedReplicationController delete collection of ReplicationController
*/
func (a *Client) DeleteCoreV1CollectionNamespacedReplicationController(params *DeleteCoreV1CollectionNamespacedReplicationControllerParams) (*DeleteCoreV1CollectionNamespacedReplicationControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedReplicationController",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedReplicationControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedReplicationController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedResourceQuota delete collection of ResourceQuota
*/
func (a *Client) DeleteCoreV1CollectionNamespacedResourceQuota(params *DeleteCoreV1CollectionNamespacedResourceQuotaParams) (*DeleteCoreV1CollectionNamespacedResourceQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedResourceQuota",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedResourceQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedResourceQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedSecret delete collection of Secret
*/
func (a *Client) DeleteCoreV1CollectionNamespacedSecret(params *DeleteCoreV1CollectionNamespacedSecretParams) (*DeleteCoreV1CollectionNamespacedSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedSecret",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNamespacedServiceAccount delete collection of ServiceAccount
*/
func (a *Client) DeleteCoreV1CollectionNamespacedServiceAccount(params *DeleteCoreV1CollectionNamespacedServiceAccountParams) (*DeleteCoreV1CollectionNamespacedServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNamespacedServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNamespacedServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNamespacedServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionNode delete collection of Node
*/
func (a *Client) DeleteCoreV1CollectionNode(params *DeleteCoreV1CollectionNodeParams) (*DeleteCoreV1CollectionNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionNode",
		Method:             "DELETE",
		PathPattern:        "/api/v1/nodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionNodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionNode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1CollectionPersistentVolume delete collection of PersistentVolume
*/
func (a *Client) DeleteCoreV1CollectionPersistentVolume(params *DeleteCoreV1CollectionPersistentVolumeParams) (*DeleteCoreV1CollectionPersistentVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1CollectionPersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1CollectionPersistentVolume",
		Method:             "DELETE",
		PathPattern:        "/api/v1/persistentvolumes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1CollectionPersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoreV1CollectionPersistentVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoreV1CollectionPersistentVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1Namespace delete a Namespace
*/
func (a *Client) DeleteCoreV1Namespace(params *DeleteCoreV1NamespaceParams) (*DeleteCoreV1NamespaceOK, *DeleteCoreV1NamespaceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1Namespace",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespaceOK:
		return value, nil, nil
	case *DeleteCoreV1NamespaceAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedConfigMap delete a ConfigMap
*/
func (a *Client) DeleteCoreV1NamespacedConfigMap(params *DeleteCoreV1NamespacedConfigMapParams) (*DeleteCoreV1NamespacedConfigMapOK, *DeleteCoreV1NamespacedConfigMapAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedConfigMap",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedConfigMapOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedConfigMapAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedEndpoints delete Endpoints
*/
func (a *Client) DeleteCoreV1NamespacedEndpoints(params *DeleteCoreV1NamespacedEndpointsParams) (*DeleteCoreV1NamespacedEndpointsOK, *DeleteCoreV1NamespacedEndpointsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedEndpoints",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedEndpointsOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedEndpointsAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedEvent delete an Event
*/
func (a *Client) DeleteCoreV1NamespacedEvent(params *DeleteCoreV1NamespacedEventParams) (*DeleteCoreV1NamespacedEventOK, *DeleteCoreV1NamespacedEventAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedEvent",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedEventOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedEventAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedLimitRange delete a LimitRange
*/
func (a *Client) DeleteCoreV1NamespacedLimitRange(params *DeleteCoreV1NamespacedLimitRangeParams) (*DeleteCoreV1NamespacedLimitRangeOK, *DeleteCoreV1NamespacedLimitRangeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedLimitRange",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedLimitRangeOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedLimitRangeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedPersistentVolumeClaim delete a PersistentVolumeClaim
*/
func (a *Client) DeleteCoreV1NamespacedPersistentVolumeClaim(params *DeleteCoreV1NamespacedPersistentVolumeClaimParams) (*DeleteCoreV1NamespacedPersistentVolumeClaimOK, *DeleteCoreV1NamespacedPersistentVolumeClaimAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedPersistentVolumeClaim",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedPersistentVolumeClaimOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedPersistentVolumeClaimAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedPod delete a Pod
*/
func (a *Client) DeleteCoreV1NamespacedPod(params *DeleteCoreV1NamespacedPodParams) (*DeleteCoreV1NamespacedPodOK, *DeleteCoreV1NamespacedPodAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedPod",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedPodOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedPodAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedPodTemplate delete a PodTemplate
*/
func (a *Client) DeleteCoreV1NamespacedPodTemplate(params *DeleteCoreV1NamespacedPodTemplateParams) (*DeleteCoreV1NamespacedPodTemplateOK, *DeleteCoreV1NamespacedPodTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedPodTemplate",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedPodTemplateOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedPodTemplateAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedReplicationController delete a ReplicationController
*/
func (a *Client) DeleteCoreV1NamespacedReplicationController(params *DeleteCoreV1NamespacedReplicationControllerParams) (*DeleteCoreV1NamespacedReplicationControllerOK, *DeleteCoreV1NamespacedReplicationControllerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedReplicationController",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedReplicationControllerOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedReplicationControllerAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedResourceQuota delete a ResourceQuota
*/
func (a *Client) DeleteCoreV1NamespacedResourceQuota(params *DeleteCoreV1NamespacedResourceQuotaParams) (*DeleteCoreV1NamespacedResourceQuotaOK, *DeleteCoreV1NamespacedResourceQuotaAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedResourceQuota",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedResourceQuotaOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedResourceQuotaAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedSecret delete a Secret
*/
func (a *Client) DeleteCoreV1NamespacedSecret(params *DeleteCoreV1NamespacedSecretParams) (*DeleteCoreV1NamespacedSecretOK, *DeleteCoreV1NamespacedSecretAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedSecret",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedSecretOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedSecretAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedService delete a Service
*/
func (a *Client) DeleteCoreV1NamespacedService(params *DeleteCoreV1NamespacedServiceParams) (*DeleteCoreV1NamespacedServiceOK, *DeleteCoreV1NamespacedServiceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedService",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedServiceOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedServiceAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1NamespacedServiceAccount delete a ServiceAccount
*/
func (a *Client) DeleteCoreV1NamespacedServiceAccount(params *DeleteCoreV1NamespacedServiceAccountParams) (*DeleteCoreV1NamespacedServiceAccountOK, *DeleteCoreV1NamespacedServiceAccountAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1NamespacedServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NamespacedServiceAccountOK:
		return value, nil, nil
	case *DeleteCoreV1NamespacedServiceAccountAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1Node delete a Node
*/
func (a *Client) DeleteCoreV1Node(params *DeleteCoreV1NodeParams) (*DeleteCoreV1NodeOK, *DeleteCoreV1NodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1Node",
		Method:             "DELETE",
		PathPattern:        "/api/v1/nodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1NodeOK:
		return value, nil, nil
	case *DeleteCoreV1NodeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoreV1PersistentVolume delete a PersistentVolume
*/
func (a *Client) DeleteCoreV1PersistentVolume(params *DeleteCoreV1PersistentVolumeParams) (*DeleteCoreV1PersistentVolumeOK, *DeleteCoreV1PersistentVolumeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoreV1PersistentVolume",
		Method:             "DELETE",
		PathPattern:        "/api/v1/persistentvolumes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoreV1PersistentVolumeOK:
		return value, nil, nil
	case *DeleteCoreV1PersistentVolumeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCoreV1APIResources get available resources
*/
func (a *Client) GetCoreV1APIResources(params *GetCoreV1APIResourcesParams) (*GetCoreV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoreV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCoreV1APIResources",
		Method:             "GET",
		PathPattern:        "/api/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCoreV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoreV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCoreV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ComponentStatus list objects of kind ComponentStatus
*/
func (a *Client) ListCoreV1ComponentStatus(params *ListCoreV1ComponentStatusParams) (*ListCoreV1ComponentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ComponentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ComponentStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/componentstatuses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ComponentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ComponentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ComponentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ConfigMapForAllNamespaces list or watch objects of kind ConfigMap
*/
func (a *Client) ListCoreV1ConfigMapForAllNamespaces(params *ListCoreV1ConfigMapForAllNamespacesParams) (*ListCoreV1ConfigMapForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ConfigMapForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ConfigMapForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ConfigMapForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ConfigMapForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ConfigMapForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1EndpointsForAllNamespaces list or watch objects of kind Endpoints
*/
func (a *Client) ListCoreV1EndpointsForAllNamespaces(params *ListCoreV1EndpointsForAllNamespacesParams) (*ListCoreV1EndpointsForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1EndpointsForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1EndpointsForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1EndpointsForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1EndpointsForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1EndpointsForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1EventForAllNamespaces list or watch objects of kind Event
*/
func (a *Client) ListCoreV1EventForAllNamespaces(params *ListCoreV1EventForAllNamespacesParams) (*ListCoreV1EventForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1EventForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1EventForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1EventForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1EventForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1EventForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1LimitRangeForAllNamespaces list or watch objects of kind LimitRange
*/
func (a *Client) ListCoreV1LimitRangeForAllNamespaces(params *ListCoreV1LimitRangeForAllNamespacesParams) (*ListCoreV1LimitRangeForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1LimitRangeForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1LimitRangeForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1LimitRangeForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1LimitRangeForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1LimitRangeForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1Namespace list or watch objects of kind Namespace
*/
func (a *Client) ListCoreV1Namespace(params *ListCoreV1NamespaceParams) (*ListCoreV1NamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1Namespace",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1Namespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedConfigMap list or watch objects of kind ConfigMap
*/
func (a *Client) ListCoreV1NamespacedConfigMap(params *ListCoreV1NamespacedConfigMapParams) (*ListCoreV1NamespacedConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedConfigMap",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedEndpoints list or watch objects of kind Endpoints
*/
func (a *Client) ListCoreV1NamespacedEndpoints(params *ListCoreV1NamespacedEndpointsParams) (*ListCoreV1NamespacedEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedEndpoints",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedEvent list or watch objects of kind Event
*/
func (a *Client) ListCoreV1NamespacedEvent(params *ListCoreV1NamespacedEventParams) (*ListCoreV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedLimitRange list or watch objects of kind LimitRange
*/
func (a *Client) ListCoreV1NamespacedLimitRange(params *ListCoreV1NamespacedLimitRangeParams) (*ListCoreV1NamespacedLimitRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedLimitRange",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedLimitRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedLimitRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedPersistentVolumeClaim list or watch objects of kind PersistentVolumeClaim
*/
func (a *Client) ListCoreV1NamespacedPersistentVolumeClaim(params *ListCoreV1NamespacedPersistentVolumeClaimParams) (*ListCoreV1NamespacedPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedPersistentVolumeClaim",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedPod list or watch objects of kind Pod
*/
func (a *Client) ListCoreV1NamespacedPod(params *ListCoreV1NamespacedPodParams) (*ListCoreV1NamespacedPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedPod",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedPodTemplate list or watch objects of kind PodTemplate
*/
func (a *Client) ListCoreV1NamespacedPodTemplate(params *ListCoreV1NamespacedPodTemplateParams) (*ListCoreV1NamespacedPodTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedPodTemplate",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedPodTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedPodTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedReplicationController list or watch objects of kind ReplicationController
*/
func (a *Client) ListCoreV1NamespacedReplicationController(params *ListCoreV1NamespacedReplicationControllerParams) (*ListCoreV1NamespacedReplicationControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedReplicationController",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedReplicationControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedReplicationController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedResourceQuota list or watch objects of kind ResourceQuota
*/
func (a *Client) ListCoreV1NamespacedResourceQuota(params *ListCoreV1NamespacedResourceQuotaParams) (*ListCoreV1NamespacedResourceQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedResourceQuota",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedResourceQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedResourceQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedSecret list or watch objects of kind Secret
*/
func (a *Client) ListCoreV1NamespacedSecret(params *ListCoreV1NamespacedSecretParams) (*ListCoreV1NamespacedSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedSecret",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedService list or watch objects of kind Service
*/
func (a *Client) ListCoreV1NamespacedService(params *ListCoreV1NamespacedServiceParams) (*ListCoreV1NamespacedServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedService",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1NamespacedServiceAccount list or watch objects of kind ServiceAccount
*/
func (a *Client) ListCoreV1NamespacedServiceAccount(params *ListCoreV1NamespacedServiceAccountParams) (*ListCoreV1NamespacedServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1NamespacedServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NamespacedServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1NamespacedServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1Node list or watch objects of kind Node
*/
func (a *Client) ListCoreV1Node(params *ListCoreV1NodeParams) (*ListCoreV1NodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1Node",
		Method:             "GET",
		PathPattern:        "/api/v1/nodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1NodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1Node: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1PersistentVolume list or watch objects of kind PersistentVolume
*/
func (a *Client) ListCoreV1PersistentVolume(params *ListCoreV1PersistentVolumeParams) (*ListCoreV1PersistentVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1PersistentVolume",
		Method:             "GET",
		PathPattern:        "/api/v1/persistentvolumes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1PersistentVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1PersistentVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1PersistentVolumeClaimForAllNamespaces list or watch objects of kind PersistentVolumeClaim
*/
func (a *Client) ListCoreV1PersistentVolumeClaimForAllNamespaces(params *ListCoreV1PersistentVolumeClaimForAllNamespacesParams) (*ListCoreV1PersistentVolumeClaimForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1PersistentVolumeClaimForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1PersistentVolumeClaimForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1PersistentVolumeClaimForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1PersistentVolumeClaimForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1PersistentVolumeClaimForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1PodForAllNamespaces list or watch objects of kind Pod
*/
func (a *Client) ListCoreV1PodForAllNamespaces(params *ListCoreV1PodForAllNamespacesParams) (*ListCoreV1PodForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1PodForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1PodForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/pods",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1PodForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1PodForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1PodForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1PodTemplateForAllNamespaces list or watch objects of kind PodTemplate
*/
func (a *Client) ListCoreV1PodTemplateForAllNamespaces(params *ListCoreV1PodTemplateForAllNamespacesParams) (*ListCoreV1PodTemplateForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1PodTemplateForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1PodTemplateForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1PodTemplateForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1PodTemplateForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1PodTemplateForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ReplicationControllerForAllNamespaces list or watch objects of kind ReplicationController
*/
func (a *Client) ListCoreV1ReplicationControllerForAllNamespaces(params *ListCoreV1ReplicationControllerForAllNamespacesParams) (*ListCoreV1ReplicationControllerForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ReplicationControllerForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ReplicationControllerForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ReplicationControllerForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ReplicationControllerForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ReplicationControllerForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ResourceQuotaForAllNamespaces list or watch objects of kind ResourceQuota
*/
func (a *Client) ListCoreV1ResourceQuotaForAllNamespaces(params *ListCoreV1ResourceQuotaForAllNamespacesParams) (*ListCoreV1ResourceQuotaForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ResourceQuotaForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ResourceQuotaForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ResourceQuotaForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ResourceQuotaForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ResourceQuotaForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1SecretForAllNamespaces list or watch objects of kind Secret
*/
func (a *Client) ListCoreV1SecretForAllNamespaces(params *ListCoreV1SecretForAllNamespacesParams) (*ListCoreV1SecretForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1SecretForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1SecretForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/secrets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1SecretForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1SecretForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1SecretForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ServiceAccountForAllNamespaces list or watch objects of kind ServiceAccount
*/
func (a *Client) ListCoreV1ServiceAccountForAllNamespaces(params *ListCoreV1ServiceAccountForAllNamespacesParams) (*ListCoreV1ServiceAccountForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ServiceAccountForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ServiceAccountForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ServiceAccountForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ServiceAccountForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ServiceAccountForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoreV1ServiceForAllNamespaces list or watch objects of kind Service
*/
func (a *Client) ListCoreV1ServiceForAllNamespaces(params *ListCoreV1ServiceForAllNamespacesParams) (*ListCoreV1ServiceForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoreV1ServiceForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoreV1ServiceForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/services",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoreV1ServiceForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoreV1ServiceForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoreV1ServiceForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1Namespace partially update the specified Namespace
*/
func (a *Client) PatchCoreV1Namespace(params *PatchCoreV1NamespaceParams) (*PatchCoreV1NamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1Namespace",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1Namespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespaceStatus partially update status of the specified Namespace
*/
func (a *Client) PatchCoreV1NamespaceStatus(params *PatchCoreV1NamespaceStatusParams) (*PatchCoreV1NamespaceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespaceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespaceStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespaceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespaceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespaceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedConfigMap partially update the specified ConfigMap
*/
func (a *Client) PatchCoreV1NamespacedConfigMap(params *PatchCoreV1NamespacedConfigMapParams) (*PatchCoreV1NamespacedConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedConfigMap",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedEndpoints partially update the specified Endpoints
*/
func (a *Client) PatchCoreV1NamespacedEndpoints(params *PatchCoreV1NamespacedEndpointsParams) (*PatchCoreV1NamespacedEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedEndpoints",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedEvent partially update the specified Event
*/
func (a *Client) PatchCoreV1NamespacedEvent(params *PatchCoreV1NamespacedEventParams) (*PatchCoreV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedEvent",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedLimitRange partially update the specified LimitRange
*/
func (a *Client) PatchCoreV1NamespacedLimitRange(params *PatchCoreV1NamespacedLimitRangeParams) (*PatchCoreV1NamespacedLimitRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedLimitRange",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedLimitRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedLimitRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedPersistentVolumeClaim partially update the specified PersistentVolumeClaim
*/
func (a *Client) PatchCoreV1NamespacedPersistentVolumeClaim(params *PatchCoreV1NamespacedPersistentVolumeClaimParams) (*PatchCoreV1NamespacedPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedPersistentVolumeClaim",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedPersistentVolumeClaimStatus partially update status of the specified PersistentVolumeClaim
*/
func (a *Client) PatchCoreV1NamespacedPersistentVolumeClaimStatus(params *PatchCoreV1NamespacedPersistentVolumeClaimStatusParams) (*PatchCoreV1NamespacedPersistentVolumeClaimStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedPersistentVolumeClaimStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedPersistentVolumeClaimStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedPersistentVolumeClaimStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedPersistentVolumeClaimStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedPersistentVolumeClaimStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedPod partially update the specified Pod
*/
func (a *Client) PatchCoreV1NamespacedPod(params *PatchCoreV1NamespacedPodParams) (*PatchCoreV1NamespacedPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedPod",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedPodStatus partially update status of the specified Pod
*/
func (a *Client) PatchCoreV1NamespacedPodStatus(params *PatchCoreV1NamespacedPodStatusParams) (*PatchCoreV1NamespacedPodStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedPodStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedPodStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedPodStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedPodStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedPodStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedPodTemplate partially update the specified PodTemplate
*/
func (a *Client) PatchCoreV1NamespacedPodTemplate(params *PatchCoreV1NamespacedPodTemplateParams) (*PatchCoreV1NamespacedPodTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedPodTemplate",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedPodTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedPodTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedReplicationController partially update the specified ReplicationController
*/
func (a *Client) PatchCoreV1NamespacedReplicationController(params *PatchCoreV1NamespacedReplicationControllerParams) (*PatchCoreV1NamespacedReplicationControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedReplicationController",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedReplicationControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedReplicationController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedReplicationControllerScale partially update scale of the specified ReplicationController
*/
func (a *Client) PatchCoreV1NamespacedReplicationControllerScale(params *PatchCoreV1NamespacedReplicationControllerScaleParams) (*PatchCoreV1NamespacedReplicationControllerScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedReplicationControllerScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedReplicationControllerScale",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedReplicationControllerScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedReplicationControllerScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedReplicationControllerScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedReplicationControllerStatus partially update status of the specified ReplicationController
*/
func (a *Client) PatchCoreV1NamespacedReplicationControllerStatus(params *PatchCoreV1NamespacedReplicationControllerStatusParams) (*PatchCoreV1NamespacedReplicationControllerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedReplicationControllerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedReplicationControllerStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedReplicationControllerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedReplicationControllerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedReplicationControllerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedResourceQuota partially update the specified ResourceQuota
*/
func (a *Client) PatchCoreV1NamespacedResourceQuota(params *PatchCoreV1NamespacedResourceQuotaParams) (*PatchCoreV1NamespacedResourceQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedResourceQuota",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedResourceQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedResourceQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedResourceQuotaStatus partially update status of the specified ResourceQuota
*/
func (a *Client) PatchCoreV1NamespacedResourceQuotaStatus(params *PatchCoreV1NamespacedResourceQuotaStatusParams) (*PatchCoreV1NamespacedResourceQuotaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedResourceQuotaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedResourceQuotaStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedResourceQuotaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedResourceQuotaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedResourceQuotaStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedSecret partially update the specified Secret
*/
func (a *Client) PatchCoreV1NamespacedSecret(params *PatchCoreV1NamespacedSecretParams) (*PatchCoreV1NamespacedSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedSecret",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedService partially update the specified Service
*/
func (a *Client) PatchCoreV1NamespacedService(params *PatchCoreV1NamespacedServiceParams) (*PatchCoreV1NamespacedServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedService",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedServiceAccount partially update the specified ServiceAccount
*/
func (a *Client) PatchCoreV1NamespacedServiceAccount(params *PatchCoreV1NamespacedServiceAccountParams) (*PatchCoreV1NamespacedServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedServiceAccount",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NamespacedServiceStatus partially update status of the specified Service
*/
func (a *Client) PatchCoreV1NamespacedServiceStatus(params *PatchCoreV1NamespacedServiceStatusParams) (*PatchCoreV1NamespacedServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NamespacedServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NamespacedServiceStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NamespacedServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NamespacedServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NamespacedServiceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1Node partially update the specified Node
*/
func (a *Client) PatchCoreV1Node(params *PatchCoreV1NodeParams) (*PatchCoreV1NodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1Node",
		Method:             "PATCH",
		PathPattern:        "/api/v1/nodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1Node: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1NodeStatus partially update status of the specified Node
*/
func (a *Client) PatchCoreV1NodeStatus(params *PatchCoreV1NodeStatusParams) (*PatchCoreV1NodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1NodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1NodeStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/nodes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1NodeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1NodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1NodeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1PersistentVolume partially update the specified PersistentVolume
*/
func (a *Client) PatchCoreV1PersistentVolume(params *PatchCoreV1PersistentVolumeParams) (*PatchCoreV1PersistentVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1PersistentVolume",
		Method:             "PATCH",
		PathPattern:        "/api/v1/persistentvolumes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1PersistentVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1PersistentVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoreV1PersistentVolumeStatus partially update status of the specified PersistentVolume
*/
func (a *Client) PatchCoreV1PersistentVolumeStatus(params *PatchCoreV1PersistentVolumeStatusParams) (*PatchCoreV1PersistentVolumeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoreV1PersistentVolumeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoreV1PersistentVolumeStatus",
		Method:             "PATCH",
		PathPattern:        "/api/v1/persistentvolumes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoreV1PersistentVolumeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoreV1PersistentVolumeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoreV1PersistentVolumeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1ComponentStatus read the specified ComponentStatus
*/
func (a *Client) ReadCoreV1ComponentStatus(params *ReadCoreV1ComponentStatusParams) (*ReadCoreV1ComponentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1ComponentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1ComponentStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/componentstatuses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1ComponentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1ComponentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1ComponentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1Namespace read the specified Namespace
*/
func (a *Client) ReadCoreV1Namespace(params *ReadCoreV1NamespaceParams) (*ReadCoreV1NamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1Namespace",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1Namespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespaceStatus read status of the specified Namespace
*/
func (a *Client) ReadCoreV1NamespaceStatus(params *ReadCoreV1NamespaceStatusParams) (*ReadCoreV1NamespaceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespaceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespaceStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespaceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespaceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespaceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedConfigMap read the specified ConfigMap
*/
func (a *Client) ReadCoreV1NamespacedConfigMap(params *ReadCoreV1NamespacedConfigMapParams) (*ReadCoreV1NamespacedConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedConfigMap",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedEndpoints read the specified Endpoints
*/
func (a *Client) ReadCoreV1NamespacedEndpoints(params *ReadCoreV1NamespacedEndpointsParams) (*ReadCoreV1NamespacedEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedEndpoints",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedEvent read the specified Event
*/
func (a *Client) ReadCoreV1NamespacedEvent(params *ReadCoreV1NamespacedEventParams) (*ReadCoreV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedLimitRange read the specified LimitRange
*/
func (a *Client) ReadCoreV1NamespacedLimitRange(params *ReadCoreV1NamespacedLimitRangeParams) (*ReadCoreV1NamespacedLimitRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedLimitRange",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedLimitRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedLimitRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPersistentVolumeClaim read the specified PersistentVolumeClaim
*/
func (a *Client) ReadCoreV1NamespacedPersistentVolumeClaim(params *ReadCoreV1NamespacedPersistentVolumeClaimParams) (*ReadCoreV1NamespacedPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPersistentVolumeClaim",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPersistentVolumeClaimStatus read status of the specified PersistentVolumeClaim
*/
func (a *Client) ReadCoreV1NamespacedPersistentVolumeClaimStatus(params *ReadCoreV1NamespacedPersistentVolumeClaimStatusParams) (*ReadCoreV1NamespacedPersistentVolumeClaimStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPersistentVolumeClaimStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPersistentVolumeClaimStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPersistentVolumeClaimStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPersistentVolumeClaimStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPersistentVolumeClaimStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPod read the specified Pod
*/
func (a *Client) ReadCoreV1NamespacedPod(params *ReadCoreV1NamespacedPodParams) (*ReadCoreV1NamespacedPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPod",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPodLog read log of the specified Pod
*/
func (a *Client) ReadCoreV1NamespacedPodLog(params *ReadCoreV1NamespacedPodLogParams) (*ReadCoreV1NamespacedPodLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPodLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPodLog",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/log",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml", "text/plain"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPodLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPodLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPodLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPodStatus read status of the specified Pod
*/
func (a *Client) ReadCoreV1NamespacedPodStatus(params *ReadCoreV1NamespacedPodStatusParams) (*ReadCoreV1NamespacedPodStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPodStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPodStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPodStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPodStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPodStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedPodTemplate read the specified PodTemplate
*/
func (a *Client) ReadCoreV1NamespacedPodTemplate(params *ReadCoreV1NamespacedPodTemplateParams) (*ReadCoreV1NamespacedPodTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedPodTemplate",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedPodTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedPodTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedReplicationController read the specified ReplicationController
*/
func (a *Client) ReadCoreV1NamespacedReplicationController(params *ReadCoreV1NamespacedReplicationControllerParams) (*ReadCoreV1NamespacedReplicationControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedReplicationController",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedReplicationControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedReplicationController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedReplicationControllerScale read scale of the specified ReplicationController
*/
func (a *Client) ReadCoreV1NamespacedReplicationControllerScale(params *ReadCoreV1NamespacedReplicationControllerScaleParams) (*ReadCoreV1NamespacedReplicationControllerScaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedReplicationControllerScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedReplicationControllerScale",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedReplicationControllerScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedReplicationControllerScaleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedReplicationControllerScale: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedReplicationControllerStatus read status of the specified ReplicationController
*/
func (a *Client) ReadCoreV1NamespacedReplicationControllerStatus(params *ReadCoreV1NamespacedReplicationControllerStatusParams) (*ReadCoreV1NamespacedReplicationControllerStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedReplicationControllerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedReplicationControllerStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedReplicationControllerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedReplicationControllerStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedReplicationControllerStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedResourceQuota read the specified ResourceQuota
*/
func (a *Client) ReadCoreV1NamespacedResourceQuota(params *ReadCoreV1NamespacedResourceQuotaParams) (*ReadCoreV1NamespacedResourceQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedResourceQuota",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedResourceQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedResourceQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedResourceQuotaStatus read status of the specified ResourceQuota
*/
func (a *Client) ReadCoreV1NamespacedResourceQuotaStatus(params *ReadCoreV1NamespacedResourceQuotaStatusParams) (*ReadCoreV1NamespacedResourceQuotaStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedResourceQuotaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedResourceQuotaStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedResourceQuotaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedResourceQuotaStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedResourceQuotaStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedSecret read the specified Secret
*/
func (a *Client) ReadCoreV1NamespacedSecret(params *ReadCoreV1NamespacedSecretParams) (*ReadCoreV1NamespacedSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedSecret",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedService read the specified Service
*/
func (a *Client) ReadCoreV1NamespacedService(params *ReadCoreV1NamespacedServiceParams) (*ReadCoreV1NamespacedServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedService",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedServiceAccount read the specified ServiceAccount
*/
func (a *Client) ReadCoreV1NamespacedServiceAccount(params *ReadCoreV1NamespacedServiceAccountParams) (*ReadCoreV1NamespacedServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NamespacedServiceStatus read status of the specified Service
*/
func (a *Client) ReadCoreV1NamespacedServiceStatus(params *ReadCoreV1NamespacedServiceStatusParams) (*ReadCoreV1NamespacedServiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NamespacedServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NamespacedServiceStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NamespacedServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NamespacedServiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NamespacedServiceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1Node read the specified Node
*/
func (a *Client) ReadCoreV1Node(params *ReadCoreV1NodeParams) (*ReadCoreV1NodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1Node",
		Method:             "GET",
		PathPattern:        "/api/v1/nodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1Node: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1NodeStatus read status of the specified Node
*/
func (a *Client) ReadCoreV1NodeStatus(params *ReadCoreV1NodeStatusParams) (*ReadCoreV1NodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1NodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1NodeStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/nodes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1NodeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1NodeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1NodeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1PersistentVolume read the specified PersistentVolume
*/
func (a *Client) ReadCoreV1PersistentVolume(params *ReadCoreV1PersistentVolumeParams) (*ReadCoreV1PersistentVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1PersistentVolume",
		Method:             "GET",
		PathPattern:        "/api/v1/persistentvolumes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1PersistentVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1PersistentVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoreV1PersistentVolumeStatus read status of the specified PersistentVolume
*/
func (a *Client) ReadCoreV1PersistentVolumeStatus(params *ReadCoreV1PersistentVolumeStatusParams) (*ReadCoreV1PersistentVolumeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoreV1PersistentVolumeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoreV1PersistentVolumeStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/persistentvolumes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoreV1PersistentVolumeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoreV1PersistentVolumeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoreV1PersistentVolumeStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1Namespace replace the specified Namespace
*/
func (a *Client) ReplaceCoreV1Namespace(params *ReplaceCoreV1NamespaceParams) (*ReplaceCoreV1NamespaceOK, *ReplaceCoreV1NamespaceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1Namespace",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespaceOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespaceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespaceFinalize replace finalize of the specified Namespace
*/
func (a *Client) ReplaceCoreV1NamespaceFinalize(params *ReplaceCoreV1NamespaceFinalizeParams) (*ReplaceCoreV1NamespaceFinalizeOK, *ReplaceCoreV1NamespaceFinalizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespaceFinalizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespaceFinalize",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{name}/finalize",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespaceFinalizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespaceFinalizeOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespaceFinalizeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespaceStatus replace status of the specified Namespace
*/
func (a *Client) ReplaceCoreV1NamespaceStatus(params *ReplaceCoreV1NamespaceStatusParams) (*ReplaceCoreV1NamespaceStatusOK, *ReplaceCoreV1NamespaceStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespaceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespaceStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespaceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespaceStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespaceStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedConfigMap replace the specified ConfigMap
*/
func (a *Client) ReplaceCoreV1NamespacedConfigMap(params *ReplaceCoreV1NamespacedConfigMapParams) (*ReplaceCoreV1NamespacedConfigMapOK, *ReplaceCoreV1NamespacedConfigMapCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedConfigMap",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/configmaps/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedConfigMapOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedConfigMapCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedEndpoints replace the specified Endpoints
*/
func (a *Client) ReplaceCoreV1NamespacedEndpoints(params *ReplaceCoreV1NamespacedEndpointsParams) (*ReplaceCoreV1NamespacedEndpointsOK, *ReplaceCoreV1NamespacedEndpointsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedEndpoints",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/endpoints/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedEndpointsOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedEndpointsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedEvent replace the specified Event
*/
func (a *Client) ReplaceCoreV1NamespacedEvent(params *ReplaceCoreV1NamespacedEventParams) (*ReplaceCoreV1NamespacedEventOK, *ReplaceCoreV1NamespacedEventCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedEvent",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedEventOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedEventCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedLimitRange replace the specified LimitRange
*/
func (a *Client) ReplaceCoreV1NamespacedLimitRange(params *ReplaceCoreV1NamespacedLimitRangeParams) (*ReplaceCoreV1NamespacedLimitRangeOK, *ReplaceCoreV1NamespacedLimitRangeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedLimitRange",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/limitranges/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedLimitRangeOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedLimitRangeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedPersistentVolumeClaim replace the specified PersistentVolumeClaim
*/
func (a *Client) ReplaceCoreV1NamespacedPersistentVolumeClaim(params *ReplaceCoreV1NamespacedPersistentVolumeClaimParams) (*ReplaceCoreV1NamespacedPersistentVolumeClaimOK, *ReplaceCoreV1NamespacedPersistentVolumeClaimCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedPersistentVolumeClaim",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedPersistentVolumeClaimStatus replace status of the specified PersistentVolumeClaim
*/
func (a *Client) ReplaceCoreV1NamespacedPersistentVolumeClaimStatus(params *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusParams) (*ReplaceCoreV1NamespacedPersistentVolumeClaimStatusOK, *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedPersistentVolumeClaimStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedPersistentVolumeClaimStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedPersistentVolumeClaimStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedPersistentVolumeClaimStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedPod replace the specified Pod
*/
func (a *Client) ReplaceCoreV1NamespacedPod(params *ReplaceCoreV1NamespacedPodParams) (*ReplaceCoreV1NamespacedPodOK, *ReplaceCoreV1NamespacedPodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedPod",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedPodOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedPodCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedPodStatus replace status of the specified Pod
*/
func (a *Client) ReplaceCoreV1NamespacedPodStatus(params *ReplaceCoreV1NamespacedPodStatusParams) (*ReplaceCoreV1NamespacedPodStatusOK, *ReplaceCoreV1NamespacedPodStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedPodStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedPodStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/pods/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedPodStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedPodStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedPodStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedPodTemplate replace the specified PodTemplate
*/
func (a *Client) ReplaceCoreV1NamespacedPodTemplate(params *ReplaceCoreV1NamespacedPodTemplateParams) (*ReplaceCoreV1NamespacedPodTemplateOK, *ReplaceCoreV1NamespacedPodTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedPodTemplate",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/podtemplates/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedPodTemplateOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedPodTemplateCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedReplicationController replace the specified ReplicationController
*/
func (a *Client) ReplaceCoreV1NamespacedReplicationController(params *ReplaceCoreV1NamespacedReplicationControllerParams) (*ReplaceCoreV1NamespacedReplicationControllerOK, *ReplaceCoreV1NamespacedReplicationControllerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedReplicationController",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedReplicationControllerCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedReplicationControllerScale replace scale of the specified ReplicationController
*/
func (a *Client) ReplaceCoreV1NamespacedReplicationControllerScale(params *ReplaceCoreV1NamespacedReplicationControllerScaleParams) (*ReplaceCoreV1NamespacedReplicationControllerScaleOK, *ReplaceCoreV1NamespacedReplicationControllerScaleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedReplicationControllerScaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedReplicationControllerScale",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedReplicationControllerScaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerScaleOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedReplicationControllerScaleCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedReplicationControllerStatus replace status of the specified ReplicationController
*/
func (a *Client) ReplaceCoreV1NamespacedReplicationControllerStatus(params *ReplaceCoreV1NamespacedReplicationControllerStatusParams) (*ReplaceCoreV1NamespacedReplicationControllerStatusOK, *ReplaceCoreV1NamespacedReplicationControllerStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedReplicationControllerStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedReplicationControllerStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedReplicationControllerStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedReplicationControllerStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedReplicationControllerStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedResourceQuota replace the specified ResourceQuota
*/
func (a *Client) ReplaceCoreV1NamespacedResourceQuota(params *ReplaceCoreV1NamespacedResourceQuotaParams) (*ReplaceCoreV1NamespacedResourceQuotaOK, *ReplaceCoreV1NamespacedResourceQuotaCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedResourceQuota",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedResourceQuotaOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedResourceQuotaCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedResourceQuotaStatus replace status of the specified ResourceQuota
*/
func (a *Client) ReplaceCoreV1NamespacedResourceQuotaStatus(params *ReplaceCoreV1NamespacedResourceQuotaStatusParams) (*ReplaceCoreV1NamespacedResourceQuotaStatusOK, *ReplaceCoreV1NamespacedResourceQuotaStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedResourceQuotaStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedResourceQuotaStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedResourceQuotaStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedResourceQuotaStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedResourceQuotaStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedSecret replace the specified Secret
*/
func (a *Client) ReplaceCoreV1NamespacedSecret(params *ReplaceCoreV1NamespacedSecretParams) (*ReplaceCoreV1NamespacedSecretOK, *ReplaceCoreV1NamespacedSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedSecretOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedSecretCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedService replace the specified Service
*/
func (a *Client) ReplaceCoreV1NamespacedService(params *ReplaceCoreV1NamespacedServiceParams) (*ReplaceCoreV1NamespacedServiceOK, *ReplaceCoreV1NamespacedServiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedService",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedServiceOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedServiceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedServiceAccount replace the specified ServiceAccount
*/
func (a *Client) ReplaceCoreV1NamespacedServiceAccount(params *ReplaceCoreV1NamespacedServiceAccountParams) (*ReplaceCoreV1NamespacedServiceAccountOK, *ReplaceCoreV1NamespacedServiceAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedServiceAccount",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/serviceaccounts/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedServiceAccountOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedServiceAccountCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NamespacedServiceStatus replace status of the specified Service
*/
func (a *Client) ReplaceCoreV1NamespacedServiceStatus(params *ReplaceCoreV1NamespacedServiceStatusParams) (*ReplaceCoreV1NamespacedServiceStatusOK, *ReplaceCoreV1NamespacedServiceStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NamespacedServiceStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NamespacedServiceStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/namespaces/{namespace}/services/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NamespacedServiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NamespacedServiceStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NamespacedServiceStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1Node replace the specified Node
*/
func (a *Client) ReplaceCoreV1Node(params *ReplaceCoreV1NodeParams) (*ReplaceCoreV1NodeOK, *ReplaceCoreV1NodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1Node",
		Method:             "PUT",
		PathPattern:        "/api/v1/nodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NodeOK:
		return value, nil, nil
	case *ReplaceCoreV1NodeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1NodeStatus replace status of the specified Node
*/
func (a *Client) ReplaceCoreV1NodeStatus(params *ReplaceCoreV1NodeStatusParams) (*ReplaceCoreV1NodeStatusOK, *ReplaceCoreV1NodeStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1NodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1NodeStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/nodes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1NodeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1NodeStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1NodeStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1PersistentVolume replace the specified PersistentVolume
*/
func (a *Client) ReplaceCoreV1PersistentVolume(params *ReplaceCoreV1PersistentVolumeParams) (*ReplaceCoreV1PersistentVolumeOK, *ReplaceCoreV1PersistentVolumeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1PersistentVolume",
		Method:             "PUT",
		PathPattern:        "/api/v1/persistentvolumes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1PersistentVolumeOK:
		return value, nil, nil
	case *ReplaceCoreV1PersistentVolumeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoreV1PersistentVolumeStatus replace status of the specified PersistentVolume
*/
func (a *Client) ReplaceCoreV1PersistentVolumeStatus(params *ReplaceCoreV1PersistentVolumeStatusParams) (*ReplaceCoreV1PersistentVolumeStatusOK, *ReplaceCoreV1PersistentVolumeStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoreV1PersistentVolumeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoreV1PersistentVolumeStatus",
		Method:             "PUT",
		PathPattern:        "/api/v1/persistentvolumes/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoreV1PersistentVolumeStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoreV1PersistentVolumeStatusOK:
		return value, nil, nil
	case *ReplaceCoreV1PersistentVolumeStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for core_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1ConfigMapListForAllNamespaces watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1ConfigMapListForAllNamespaces(params *WatchCoreV1ConfigMapListForAllNamespacesParams) (*WatchCoreV1ConfigMapListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1ConfigMapListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1ConfigMapListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1ConfigMapListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1ConfigMapListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1ConfigMapListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1EndpointsListForAllNamespaces watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1EndpointsListForAllNamespaces(params *WatchCoreV1EndpointsListForAllNamespacesParams) (*WatchCoreV1EndpointsListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1EndpointsListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1EndpointsListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1EndpointsListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1EndpointsListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1EndpointsListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1EventListForAllNamespaces watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1EventListForAllNamespaces(params *WatchCoreV1EventListForAllNamespacesParams) (*WatchCoreV1EventListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1EventListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1EventListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1EventListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1EventListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1EventListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1LimitRangeListForAllNamespaces watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1LimitRangeListForAllNamespaces(params *WatchCoreV1LimitRangeListForAllNamespacesParams) (*WatchCoreV1LimitRangeListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1LimitRangeListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1LimitRangeListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1LimitRangeListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1LimitRangeListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1LimitRangeListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1Namespace watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1Namespace(params *WatchCoreV1NamespaceParams) (*WatchCoreV1NamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1Namespace",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1Namespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespaceList watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespaceList(params *WatchCoreV1NamespaceListParams) (*WatchCoreV1NamespaceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespaceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespaceList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespaceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespaceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespaceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedConfigMap watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedConfigMap(params *WatchCoreV1NamespacedConfigMapParams) (*WatchCoreV1NamespacedConfigMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedConfigMap",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/configmaps/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedConfigMapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedConfigMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedConfigMap: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedConfigMapList watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedConfigMapList(params *WatchCoreV1NamespacedConfigMapListParams) (*WatchCoreV1NamespacedConfigMapListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedConfigMapListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedConfigMapList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/configmaps",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedConfigMapListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedConfigMapListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedConfigMapList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedEndpoints watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedEndpoints(params *WatchCoreV1NamespacedEndpointsParams) (*WatchCoreV1NamespacedEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedEndpointsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedEndpoints",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/endpoints/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedEndpointsList watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedEndpointsList(params *WatchCoreV1NamespacedEndpointsListParams) (*WatchCoreV1NamespacedEndpointsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedEndpointsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedEndpointsList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/endpoints",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedEndpointsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedEndpointsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedEndpointsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedEvent watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedEvent(params *WatchCoreV1NamespacedEventParams) (*WatchCoreV1NamespacedEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedEvent",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/events/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedEventList watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedEventList(params *WatchCoreV1NamespacedEventListParams) (*WatchCoreV1NamespacedEventListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedEventListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedEventList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/events",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedEventListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedEventListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedEventList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedLimitRange watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedLimitRange(params *WatchCoreV1NamespacedLimitRangeParams) (*WatchCoreV1NamespacedLimitRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedLimitRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedLimitRange",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/limitranges/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedLimitRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedLimitRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedLimitRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedLimitRangeList watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedLimitRangeList(params *WatchCoreV1NamespacedLimitRangeListParams) (*WatchCoreV1NamespacedLimitRangeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedLimitRangeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedLimitRangeList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/limitranges",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedLimitRangeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedLimitRangeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedLimitRangeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPersistentVolumeClaim watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedPersistentVolumeClaim(params *WatchCoreV1NamespacedPersistentVolumeClaimParams) (*WatchCoreV1NamespacedPersistentVolumeClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPersistentVolumeClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPersistentVolumeClaim",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPersistentVolumeClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPersistentVolumeClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPersistentVolumeClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPersistentVolumeClaimList watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedPersistentVolumeClaimList(params *WatchCoreV1NamespacedPersistentVolumeClaimListParams) (*WatchCoreV1NamespacedPersistentVolumeClaimListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPersistentVolumeClaimListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPersistentVolumeClaimList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPersistentVolumeClaimListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPersistentVolumeClaimListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPersistentVolumeClaimList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPod watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedPod(params *WatchCoreV1NamespacedPodParams) (*WatchCoreV1NamespacedPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPod",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/pods/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPodList watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedPodList(params *WatchCoreV1NamespacedPodListParams) (*WatchCoreV1NamespacedPodListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPodListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPodList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/pods",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPodListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPodListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPodList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPodTemplate watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedPodTemplate(params *WatchCoreV1NamespacedPodTemplateParams) (*WatchCoreV1NamespacedPodTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPodTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPodTemplate",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPodTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPodTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPodTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedPodTemplateList watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedPodTemplateList(params *WatchCoreV1NamespacedPodTemplateListParams) (*WatchCoreV1NamespacedPodTemplateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedPodTemplateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedPodTemplateList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedPodTemplateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedPodTemplateListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedPodTemplateList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedReplicationController watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedReplicationController(params *WatchCoreV1NamespacedReplicationControllerParams) (*WatchCoreV1NamespacedReplicationControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedReplicationControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedReplicationController",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedReplicationControllerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedReplicationControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedReplicationController: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedReplicationControllerList watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedReplicationControllerList(params *WatchCoreV1NamespacedReplicationControllerListParams) (*WatchCoreV1NamespacedReplicationControllerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedReplicationControllerListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedReplicationControllerList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedReplicationControllerListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedReplicationControllerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedReplicationControllerList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedResourceQuota watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedResourceQuota(params *WatchCoreV1NamespacedResourceQuotaParams) (*WatchCoreV1NamespacedResourceQuotaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedResourceQuotaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedResourceQuota",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedResourceQuotaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedResourceQuotaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedResourceQuota: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedResourceQuotaList watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedResourceQuotaList(params *WatchCoreV1NamespacedResourceQuotaListParams) (*WatchCoreV1NamespacedResourceQuotaListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedResourceQuotaListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedResourceQuotaList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedResourceQuotaListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedResourceQuotaListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedResourceQuotaList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedSecret watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedSecret(params *WatchCoreV1NamespacedSecretParams) (*WatchCoreV1NamespacedSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedSecret",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/secrets/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedSecretReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedSecretList watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedSecretList(params *WatchCoreV1NamespacedSecretListParams) (*WatchCoreV1NamespacedSecretListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedSecretListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedSecretList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/secrets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedSecretListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedSecretListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedSecretList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedService watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedService(params *WatchCoreV1NamespacedServiceParams) (*WatchCoreV1NamespacedServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedService",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/services/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedServiceAccount watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1NamespacedServiceAccount(params *WatchCoreV1NamespacedServiceAccountParams) (*WatchCoreV1NamespacedServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedServiceAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedServiceAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedServiceAccountList watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedServiceAccountList(params *WatchCoreV1NamespacedServiceAccountListParams) (*WatchCoreV1NamespacedServiceAccountListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedServiceAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedServiceAccountList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedServiceAccountListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedServiceAccountListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedServiceAccountList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NamespacedServiceList watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NamespacedServiceList(params *WatchCoreV1NamespacedServiceListParams) (*WatchCoreV1NamespacedServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NamespacedServiceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NamespacedServiceList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/namespaces/{namespace}/services",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NamespacedServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NamespacedServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NamespacedServiceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1Node watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1Node(params *WatchCoreV1NodeParams) (*WatchCoreV1NodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1Node",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/nodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1Node: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1NodeList watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1NodeList(params *WatchCoreV1NodeListParams) (*WatchCoreV1NodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1NodeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1NodeList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/nodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1NodeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1NodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1NodeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1PersistentVolume watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoreV1PersistentVolume(params *WatchCoreV1PersistentVolumeParams) (*WatchCoreV1PersistentVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1PersistentVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1PersistentVolume",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/persistentvolumes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1PersistentVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1PersistentVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1PersistentVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1PersistentVolumeClaimListForAllNamespaces watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1PersistentVolumeClaimListForAllNamespaces(params *WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams) (*WatchCoreV1PersistentVolumeClaimListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1PersistentVolumeClaimListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1PersistentVolumeClaimListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/persistentvolumeclaims",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1PersistentVolumeClaimListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1PersistentVolumeClaimListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1PersistentVolumeClaimListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1PersistentVolumeList watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1PersistentVolumeList(params *WatchCoreV1PersistentVolumeListParams) (*WatchCoreV1PersistentVolumeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1PersistentVolumeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1PersistentVolumeList",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/persistentvolumes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1PersistentVolumeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1PersistentVolumeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1PersistentVolumeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1PodListForAllNamespaces watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1PodListForAllNamespaces(params *WatchCoreV1PodListForAllNamespacesParams) (*WatchCoreV1PodListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1PodListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1PodListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/pods",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1PodListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1PodListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1PodListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1PodTemplateListForAllNamespaces watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1PodTemplateListForAllNamespaces(params *WatchCoreV1PodTemplateListForAllNamespacesParams) (*WatchCoreV1PodTemplateListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1PodTemplateListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1PodTemplateListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/podtemplates",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1PodTemplateListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1PodTemplateListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1PodTemplateListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1ReplicationControllerListForAllNamespaces watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1ReplicationControllerListForAllNamespaces(params *WatchCoreV1ReplicationControllerListForAllNamespacesParams) (*WatchCoreV1ReplicationControllerListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1ReplicationControllerListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1ReplicationControllerListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/replicationcontrollers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1ReplicationControllerListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1ReplicationControllerListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1ReplicationControllerListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1ResourceQuotaListForAllNamespaces watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1ResourceQuotaListForAllNamespaces(params *WatchCoreV1ResourceQuotaListForAllNamespacesParams) (*WatchCoreV1ResourceQuotaListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1ResourceQuotaListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1ResourceQuotaListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/resourcequotas",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1ResourceQuotaListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1ResourceQuotaListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1ResourceQuotaListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1SecretListForAllNamespaces watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1SecretListForAllNamespaces(params *WatchCoreV1SecretListForAllNamespacesParams) (*WatchCoreV1SecretListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1SecretListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1SecretListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/secrets",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1SecretListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1SecretListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1SecretListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1ServiceAccountListForAllNamespaces watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1ServiceAccountListForAllNamespaces(params *WatchCoreV1ServiceAccountListForAllNamespacesParams) (*WatchCoreV1ServiceAccountListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1ServiceAccountListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1ServiceAccountListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/serviceaccounts",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1ServiceAccountListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1ServiceAccountListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1ServiceAccountListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoreV1ServiceListForAllNamespaces watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoreV1ServiceListForAllNamespaces(params *WatchCoreV1ServiceListForAllNamespacesParams) (*WatchCoreV1ServiceListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoreV1ServiceListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoreV1ServiceListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/api/v1/watch/services",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoreV1ServiceListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoreV1ServiceListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoreV1ServiceListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
