// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConnectCoreV1PutNamespacedServiceProxyWithPathParams creates a new ConnectCoreV1PutNamespacedServiceProxyWithPathParams object
// with the default values initialized.
func NewConnectCoreV1PutNamespacedServiceProxyWithPathParams() *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	var ()
	return &ConnectCoreV1PutNamespacedServiceProxyWithPathParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithTimeout creates a new ConnectCoreV1PutNamespacedServiceProxyWithPathParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithTimeout(timeout time.Duration) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	var ()
	return &ConnectCoreV1PutNamespacedServiceProxyWithPathParams{

		timeout: timeout,
	}
}

// NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithContext creates a new ConnectCoreV1PutNamespacedServiceProxyWithPathParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithContext(ctx context.Context) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	var ()
	return &ConnectCoreV1PutNamespacedServiceProxyWithPathParams{

		Context: ctx,
	}
}

// NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithHTTPClient creates a new ConnectCoreV1PutNamespacedServiceProxyWithPathParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectCoreV1PutNamespacedServiceProxyWithPathParamsWithHTTPClient(client *http.Client) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	var ()
	return &ConnectCoreV1PutNamespacedServiceProxyWithPathParams{
		HTTPClient: client,
	}
}

/*ConnectCoreV1PutNamespacedServiceProxyWithPathParams contains all the parameters to send to the API endpoint
for the connect core v1 put namespaced service proxy with path operation typically these are written to a http.Request
*/
type ConnectCoreV1PutNamespacedServiceProxyWithPathParams struct {

	/*Name
	  name of the ServiceProxyOptions

	*/
	Name string
	/*Namespace
	  object name and auth scope, such as for teams and projects

	*/
	Namespace string
	/*Path
	  path to the resource

	*/
	PathPath string
	/*Path
	  Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.

	*/
	QueryPath *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithTimeout(timeout time.Duration) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithContext(ctx context.Context) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithHTTPClient(client *http.Client) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithName(name string) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithNamespace(namespace string) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPathPath adds the path to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithPathPath(path string) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetPathPath(path)
	return o
}

// SetPathPath adds the path to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetPathPath(path string) {
	o.PathPath = path
}

// WithQueryPath adds the path to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WithQueryPath(path *string) *ConnectCoreV1PutNamespacedServiceProxyWithPathParams {
	o.SetQueryPath(path)
	return o
}

// SetQueryPath adds the path to the connect core v1 put namespaced service proxy with path params
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) SetQueryPath(path *string) {
	o.QueryPath = path
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectCoreV1PutNamespacedServiceProxyWithPathParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param path
	if err := r.SetPathParam("path", o.PathPath); err != nil {
		return err
	}

	if o.QueryPath != nil {

		// query param path
		var qrPath string
		if o.QueryPath != nil {
			qrPath = *o.QueryPath
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
