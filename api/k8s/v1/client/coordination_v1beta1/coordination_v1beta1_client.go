// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package coordination_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new coordination v1beta1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for coordination v1beta1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCoordinationV1beta1NamespacedLease(params *CreateCoordinationV1beta1NamespacedLeaseParams) (*CreateCoordinationV1beta1NamespacedLeaseOK, *CreateCoordinationV1beta1NamespacedLeaseCreated, *CreateCoordinationV1beta1NamespacedLeaseAccepted, error)

	DeleteCoordinationV1beta1CollectionNamespacedLease(params *DeleteCoordinationV1beta1CollectionNamespacedLeaseParams) (*DeleteCoordinationV1beta1CollectionNamespacedLeaseOK, error)

	DeleteCoordinationV1beta1NamespacedLease(params *DeleteCoordinationV1beta1NamespacedLeaseParams) (*DeleteCoordinationV1beta1NamespacedLeaseOK, *DeleteCoordinationV1beta1NamespacedLeaseAccepted, error)

	GetCoordinationV1beta1APIResources(params *GetCoordinationV1beta1APIResourcesParams) (*GetCoordinationV1beta1APIResourcesOK, error)

	ListCoordinationV1beta1LeaseForAllNamespaces(params *ListCoordinationV1beta1LeaseForAllNamespacesParams) (*ListCoordinationV1beta1LeaseForAllNamespacesOK, error)

	ListCoordinationV1beta1NamespacedLease(params *ListCoordinationV1beta1NamespacedLeaseParams) (*ListCoordinationV1beta1NamespacedLeaseOK, error)

	PatchCoordinationV1beta1NamespacedLease(params *PatchCoordinationV1beta1NamespacedLeaseParams) (*PatchCoordinationV1beta1NamespacedLeaseOK, error)

	ReadCoordinationV1beta1NamespacedLease(params *ReadCoordinationV1beta1NamespacedLeaseParams) (*ReadCoordinationV1beta1NamespacedLeaseOK, error)

	ReplaceCoordinationV1beta1NamespacedLease(params *ReplaceCoordinationV1beta1NamespacedLeaseParams) (*ReplaceCoordinationV1beta1NamespacedLeaseOK, *ReplaceCoordinationV1beta1NamespacedLeaseCreated, error)

	WatchCoordinationV1beta1LeaseListForAllNamespaces(params *WatchCoordinationV1beta1LeaseListForAllNamespacesParams) (*WatchCoordinationV1beta1LeaseListForAllNamespacesOK, error)

	WatchCoordinationV1beta1NamespacedLease(params *WatchCoordinationV1beta1NamespacedLeaseParams) (*WatchCoordinationV1beta1NamespacedLeaseOK, error)

	WatchCoordinationV1beta1NamespacedLeaseList(params *WatchCoordinationV1beta1NamespacedLeaseListParams) (*WatchCoordinationV1beta1NamespacedLeaseListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCoordinationV1beta1NamespacedLease create a Lease
*/
func (a *Client) CreateCoordinationV1beta1NamespacedLease(params *CreateCoordinationV1beta1NamespacedLeaseParams) (*CreateCoordinationV1beta1NamespacedLeaseOK, *CreateCoordinationV1beta1NamespacedLeaseCreated, *CreateCoordinationV1beta1NamespacedLeaseAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCoordinationV1beta1NamespacedLease",
		Method:             "POST",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCoordinationV1beta1NamespacedLeaseOK:
		return value, nil, nil, nil
	case *CreateCoordinationV1beta1NamespacedLeaseCreated:
		return nil, value, nil, nil
	case *CreateCoordinationV1beta1NamespacedLeaseAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for coordination_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoordinationV1beta1CollectionNamespacedLease delete collection of Lease
*/
func (a *Client) DeleteCoordinationV1beta1CollectionNamespacedLease(params *DeleteCoordinationV1beta1CollectionNamespacedLeaseParams) (*DeleteCoordinationV1beta1CollectionNamespacedLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoordinationV1beta1CollectionNamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoordinationV1beta1CollectionNamespacedLease",
		Method:             "DELETE",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoordinationV1beta1CollectionNamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCoordinationV1beta1CollectionNamespacedLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCoordinationV1beta1CollectionNamespacedLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCoordinationV1beta1NamespacedLease delete a Lease
*/
func (a *Client) DeleteCoordinationV1beta1NamespacedLease(params *DeleteCoordinationV1beta1NamespacedLeaseParams) (*DeleteCoordinationV1beta1NamespacedLeaseOK, *DeleteCoordinationV1beta1NamespacedLeaseAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCoordinationV1beta1NamespacedLease",
		Method:             "DELETE",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCoordinationV1beta1NamespacedLeaseOK:
		return value, nil, nil
	case *DeleteCoordinationV1beta1NamespacedLeaseAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for coordination_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCoordinationV1beta1APIResources get available resources
*/
func (a *Client) GetCoordinationV1beta1APIResources(params *GetCoordinationV1beta1APIResourcesParams) (*GetCoordinationV1beta1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoordinationV1beta1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCoordinationV1beta1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCoordinationV1beta1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoordinationV1beta1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCoordinationV1beta1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoordinationV1beta1LeaseForAllNamespaces list or watch objects of kind Lease
*/
func (a *Client) ListCoordinationV1beta1LeaseForAllNamespaces(params *ListCoordinationV1beta1LeaseForAllNamespacesParams) (*ListCoordinationV1beta1LeaseForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoordinationV1beta1LeaseForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoordinationV1beta1LeaseForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/leases",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoordinationV1beta1LeaseForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoordinationV1beta1LeaseForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoordinationV1beta1LeaseForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListCoordinationV1beta1NamespacedLease list or watch objects of kind Lease
*/
func (a *Client) ListCoordinationV1beta1NamespacedLease(params *ListCoordinationV1beta1NamespacedLeaseParams) (*ListCoordinationV1beta1NamespacedLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCoordinationV1beta1NamespacedLease",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCoordinationV1beta1NamespacedLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCoordinationV1beta1NamespacedLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCoordinationV1beta1NamespacedLease partially update the specified Lease
*/
func (a *Client) PatchCoordinationV1beta1NamespacedLease(params *PatchCoordinationV1beta1NamespacedLeaseParams) (*PatchCoordinationV1beta1NamespacedLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCoordinationV1beta1NamespacedLease",
		Method:             "PATCH",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCoordinationV1beta1NamespacedLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCoordinationV1beta1NamespacedLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadCoordinationV1beta1NamespacedLease read the specified Lease
*/
func (a *Client) ReadCoordinationV1beta1NamespacedLease(params *ReadCoordinationV1beta1NamespacedLeaseParams) (*ReadCoordinationV1beta1NamespacedLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readCoordinationV1beta1NamespacedLease",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadCoordinationV1beta1NamespacedLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readCoordinationV1beta1NamespacedLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCoordinationV1beta1NamespacedLease replace the specified Lease
*/
func (a *Client) ReplaceCoordinationV1beta1NamespacedLease(params *ReplaceCoordinationV1beta1NamespacedLeaseParams) (*ReplaceCoordinationV1beta1NamespacedLeaseOK, *ReplaceCoordinationV1beta1NamespacedLeaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceCoordinationV1beta1NamespacedLease",
		Method:             "PUT",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCoordinationV1beta1NamespacedLeaseOK:
		return value, nil, nil
	case *ReplaceCoordinationV1beta1NamespacedLeaseCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for coordination_v1beta1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoordinationV1beta1LeaseListForAllNamespaces watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoordinationV1beta1LeaseListForAllNamespaces(params *WatchCoordinationV1beta1LeaseListForAllNamespacesParams) (*WatchCoordinationV1beta1LeaseListForAllNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoordinationV1beta1LeaseListForAllNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoordinationV1beta1LeaseListForAllNamespaces",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/watch/leases",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoordinationV1beta1LeaseListForAllNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoordinationV1beta1LeaseListForAllNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoordinationV1beta1LeaseListForAllNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoordinationV1beta1NamespacedLease watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchCoordinationV1beta1NamespacedLease(params *WatchCoordinationV1beta1NamespacedLeaseParams) (*WatchCoordinationV1beta1NamespacedLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoordinationV1beta1NamespacedLeaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoordinationV1beta1NamespacedLease",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoordinationV1beta1NamespacedLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoordinationV1beta1NamespacedLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoordinationV1beta1NamespacedLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchCoordinationV1beta1NamespacedLeaseList watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchCoordinationV1beta1NamespacedLeaseList(params *WatchCoordinationV1beta1NamespacedLeaseListParams) (*WatchCoordinationV1beta1NamespacedLeaseListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchCoordinationV1beta1NamespacedLeaseListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchCoordinationV1beta1NamespacedLeaseList",
		Method:             "GET",
		PathPattern:        "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchCoordinationV1beta1NamespacedLeaseListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchCoordinationV1beta1NamespacedLeaseListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchCoordinationV1beta1NamespacedLeaseList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
