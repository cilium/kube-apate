// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStorageV1CSIDriver(params *CreateStorageV1CSIDriverParams) (*CreateStorageV1CSIDriverOK, *CreateStorageV1CSIDriverCreated, *CreateStorageV1CSIDriverAccepted, error)

	CreateStorageV1CSINode(params *CreateStorageV1CSINodeParams) (*CreateStorageV1CSINodeOK, *CreateStorageV1CSINodeCreated, *CreateStorageV1CSINodeAccepted, error)

	CreateStorageV1StorageClass(params *CreateStorageV1StorageClassParams) (*CreateStorageV1StorageClassOK, *CreateStorageV1StorageClassCreated, *CreateStorageV1StorageClassAccepted, error)

	CreateStorageV1VolumeAttachment(params *CreateStorageV1VolumeAttachmentParams) (*CreateStorageV1VolumeAttachmentOK, *CreateStorageV1VolumeAttachmentCreated, *CreateStorageV1VolumeAttachmentAccepted, error)

	DeleteStorageV1CSIDriver(params *DeleteStorageV1CSIDriverParams) (*DeleteStorageV1CSIDriverOK, *DeleteStorageV1CSIDriverAccepted, error)

	DeleteStorageV1CSINode(params *DeleteStorageV1CSINodeParams) (*DeleteStorageV1CSINodeOK, *DeleteStorageV1CSINodeAccepted, error)

	DeleteStorageV1CollectionCSIDriver(params *DeleteStorageV1CollectionCSIDriverParams) (*DeleteStorageV1CollectionCSIDriverOK, error)

	DeleteStorageV1CollectionCSINode(params *DeleteStorageV1CollectionCSINodeParams) (*DeleteStorageV1CollectionCSINodeOK, error)

	DeleteStorageV1CollectionStorageClass(params *DeleteStorageV1CollectionStorageClassParams) (*DeleteStorageV1CollectionStorageClassOK, error)

	DeleteStorageV1CollectionVolumeAttachment(params *DeleteStorageV1CollectionVolumeAttachmentParams) (*DeleteStorageV1CollectionVolumeAttachmentOK, error)

	DeleteStorageV1StorageClass(params *DeleteStorageV1StorageClassParams) (*DeleteStorageV1StorageClassOK, *DeleteStorageV1StorageClassAccepted, error)

	DeleteStorageV1VolumeAttachment(params *DeleteStorageV1VolumeAttachmentParams) (*DeleteStorageV1VolumeAttachmentOK, *DeleteStorageV1VolumeAttachmentAccepted, error)

	GetStorageV1APIResources(params *GetStorageV1APIResourcesParams) (*GetStorageV1APIResourcesOK, error)

	ListStorageV1CSIDriver(params *ListStorageV1CSIDriverParams) (*ListStorageV1CSIDriverOK, error)

	ListStorageV1CSINode(params *ListStorageV1CSINodeParams) (*ListStorageV1CSINodeOK, error)

	ListStorageV1StorageClass(params *ListStorageV1StorageClassParams) (*ListStorageV1StorageClassOK, error)

	ListStorageV1VolumeAttachment(params *ListStorageV1VolumeAttachmentParams) (*ListStorageV1VolumeAttachmentOK, error)

	PatchStorageV1CSIDriver(params *PatchStorageV1CSIDriverParams) (*PatchStorageV1CSIDriverOK, error)

	PatchStorageV1CSINode(params *PatchStorageV1CSINodeParams) (*PatchStorageV1CSINodeOK, error)

	PatchStorageV1StorageClass(params *PatchStorageV1StorageClassParams) (*PatchStorageV1StorageClassOK, error)

	PatchStorageV1VolumeAttachment(params *PatchStorageV1VolumeAttachmentParams) (*PatchStorageV1VolumeAttachmentOK, error)

	PatchStorageV1VolumeAttachmentStatus(params *PatchStorageV1VolumeAttachmentStatusParams) (*PatchStorageV1VolumeAttachmentStatusOK, error)

	ReadStorageV1CSIDriver(params *ReadStorageV1CSIDriverParams) (*ReadStorageV1CSIDriverOK, error)

	ReadStorageV1CSINode(params *ReadStorageV1CSINodeParams) (*ReadStorageV1CSINodeOK, error)

	ReadStorageV1StorageClass(params *ReadStorageV1StorageClassParams) (*ReadStorageV1StorageClassOK, error)

	ReadStorageV1VolumeAttachment(params *ReadStorageV1VolumeAttachmentParams) (*ReadStorageV1VolumeAttachmentOK, error)

	ReadStorageV1VolumeAttachmentStatus(params *ReadStorageV1VolumeAttachmentStatusParams) (*ReadStorageV1VolumeAttachmentStatusOK, error)

	ReplaceStorageV1CSIDriver(params *ReplaceStorageV1CSIDriverParams) (*ReplaceStorageV1CSIDriverOK, *ReplaceStorageV1CSIDriverCreated, error)

	ReplaceStorageV1CSINode(params *ReplaceStorageV1CSINodeParams) (*ReplaceStorageV1CSINodeOK, *ReplaceStorageV1CSINodeCreated, error)

	ReplaceStorageV1StorageClass(params *ReplaceStorageV1StorageClassParams) (*ReplaceStorageV1StorageClassOK, *ReplaceStorageV1StorageClassCreated, error)

	ReplaceStorageV1VolumeAttachment(params *ReplaceStorageV1VolumeAttachmentParams) (*ReplaceStorageV1VolumeAttachmentOK, *ReplaceStorageV1VolumeAttachmentCreated, error)

	ReplaceStorageV1VolumeAttachmentStatus(params *ReplaceStorageV1VolumeAttachmentStatusParams) (*ReplaceStorageV1VolumeAttachmentStatusOK, *ReplaceStorageV1VolumeAttachmentStatusCreated, error)

	WatchStorageV1CSIDriver(params *WatchStorageV1CSIDriverParams) (*WatchStorageV1CSIDriverOK, error)

	WatchStorageV1CSIDriverList(params *WatchStorageV1CSIDriverListParams) (*WatchStorageV1CSIDriverListOK, error)

	WatchStorageV1CSINode(params *WatchStorageV1CSINodeParams) (*WatchStorageV1CSINodeOK, error)

	WatchStorageV1CSINodeList(params *WatchStorageV1CSINodeListParams) (*WatchStorageV1CSINodeListOK, error)

	WatchStorageV1StorageClass(params *WatchStorageV1StorageClassParams) (*WatchStorageV1StorageClassOK, error)

	WatchStorageV1StorageClassList(params *WatchStorageV1StorageClassListParams) (*WatchStorageV1StorageClassListOK, error)

	WatchStorageV1VolumeAttachment(params *WatchStorageV1VolumeAttachmentParams) (*WatchStorageV1VolumeAttachmentOK, error)

	WatchStorageV1VolumeAttachmentList(params *WatchStorageV1VolumeAttachmentListParams) (*WatchStorageV1VolumeAttachmentListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateStorageV1CSIDriver create a CSIDriver
*/
func (a *Client) CreateStorageV1CSIDriver(params *CreateStorageV1CSIDriverParams) (*CreateStorageV1CSIDriverOK, *CreateStorageV1CSIDriverCreated, *CreateStorageV1CSIDriverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1CSIDriver",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1CSIDriverOK:
		return value, nil, nil, nil
	case *CreateStorageV1CSIDriverCreated:
		return nil, value, nil, nil
	case *CreateStorageV1CSIDriverAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1CSINode create a CSINode
*/
func (a *Client) CreateStorageV1CSINode(params *CreateStorageV1CSINodeParams) (*CreateStorageV1CSINodeOK, *CreateStorageV1CSINodeCreated, *CreateStorageV1CSINodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1CSINode",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1CSINodeOK:
		return value, nil, nil, nil
	case *CreateStorageV1CSINodeCreated:
		return nil, value, nil, nil
	case *CreateStorageV1CSINodeAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1StorageClass create a StorageClass
*/
func (a *Client) CreateStorageV1StorageClass(params *CreateStorageV1StorageClassParams) (*CreateStorageV1StorageClassOK, *CreateStorageV1StorageClassCreated, *CreateStorageV1StorageClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1StorageClass",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1StorageClassOK:
		return value, nil, nil, nil
	case *CreateStorageV1StorageClassCreated:
		return nil, value, nil, nil
	case *CreateStorageV1StorageClassAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateStorageV1VolumeAttachment create a VolumeAttachment
*/
func (a *Client) CreateStorageV1VolumeAttachment(params *CreateStorageV1VolumeAttachmentParams) (*CreateStorageV1VolumeAttachmentOK, *CreateStorageV1VolumeAttachmentCreated, *CreateStorageV1VolumeAttachmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStorageV1VolumeAttachment",
		Method:             "POST",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateStorageV1VolumeAttachmentOK:
		return value, nil, nil, nil
	case *CreateStorageV1VolumeAttachmentCreated:
		return nil, value, nil, nil
	case *CreateStorageV1VolumeAttachmentAccepted:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CSIDriver delete a CSIDriver
*/
func (a *Client) DeleteStorageV1CSIDriver(params *DeleteStorageV1CSIDriverParams) (*DeleteStorageV1CSIDriverOK, *DeleteStorageV1CSIDriverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CSIDriver",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1CSIDriverOK:
		return value, nil, nil
	case *DeleteStorageV1CSIDriverAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CSINode delete a CSINode
*/
func (a *Client) DeleteStorageV1CSINode(params *DeleteStorageV1CSINodeParams) (*DeleteStorageV1CSINodeOK, *DeleteStorageV1CSINodeAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CSINode",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1CSINodeOK:
		return value, nil, nil
	case *DeleteStorageV1CSINodeAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CollectionCSIDriver delete collection of CSIDriver
*/
func (a *Client) DeleteStorageV1CollectionCSIDriver(params *DeleteStorageV1CollectionCSIDriverParams) (*DeleteStorageV1CollectionCSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CollectionCSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CollectionCSIDriver",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CollectionCSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1CollectionCSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1CollectionCSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CollectionCSINode delete collection of CSINode
*/
func (a *Client) DeleteStorageV1CollectionCSINode(params *DeleteStorageV1CollectionCSINodeParams) (*DeleteStorageV1CollectionCSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CollectionCSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CollectionCSINode",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CollectionCSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1CollectionCSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1CollectionCSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CollectionStorageClass delete collection of StorageClass
*/
func (a *Client) DeleteStorageV1CollectionStorageClass(params *DeleteStorageV1CollectionStorageClassParams) (*DeleteStorageV1CollectionStorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CollectionStorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CollectionStorageClass",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CollectionStorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1CollectionStorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1CollectionStorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1CollectionVolumeAttachment delete collection of VolumeAttachment
*/
func (a *Client) DeleteStorageV1CollectionVolumeAttachment(params *DeleteStorageV1CollectionVolumeAttachmentParams) (*DeleteStorageV1CollectionVolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1CollectionVolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1CollectionVolumeAttachment",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1CollectionVolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageV1CollectionVolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStorageV1CollectionVolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1StorageClass delete a StorageClass
*/
func (a *Client) DeleteStorageV1StorageClass(params *DeleteStorageV1StorageClassParams) (*DeleteStorageV1StorageClassOK, *DeleteStorageV1StorageClassAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1StorageClass",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1StorageClassOK:
		return value, nil, nil
	case *DeleteStorageV1StorageClassAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteStorageV1VolumeAttachment delete a VolumeAttachment
*/
func (a *Client) DeleteStorageV1VolumeAttachment(params *DeleteStorageV1VolumeAttachmentParams) (*DeleteStorageV1VolumeAttachmentOK, *DeleteStorageV1VolumeAttachmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStorageV1VolumeAttachment",
		Method:             "DELETE",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageV1VolumeAttachmentOK:
		return value, nil, nil
	case *DeleteStorageV1VolumeAttachmentAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStorageV1APIResources get available resources
*/
func (a *Client) GetStorageV1APIResources(params *GetStorageV1APIResourcesParams) (*GetStorageV1APIResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStorageV1APIResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStorageV1APIResources",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStorageV1APIResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStorageV1APIResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStorageV1APIResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1CSIDriver list or watch objects of kind CSIDriver
*/
func (a *Client) ListStorageV1CSIDriver(params *ListStorageV1CSIDriverParams) (*ListStorageV1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1CSINode list or watch objects of kind CSINode
*/
func (a *Client) ListStorageV1CSINode(params *ListStorageV1CSINodeParams) (*ListStorageV1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1StorageClass list or watch objects of kind StorageClass
*/
func (a *Client) ListStorageV1StorageClass(params *ListStorageV1StorageClassParams) (*ListStorageV1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStorageV1VolumeAttachment list or watch objects of kind VolumeAttachment
*/
func (a *Client) ListStorageV1VolumeAttachment(params *ListStorageV1VolumeAttachmentParams) (*ListStorageV1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStorageV1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStorageV1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listStorageV1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1CSIDriver partially update the specified CSIDriver
*/
func (a *Client) PatchStorageV1CSIDriver(params *PatchStorageV1CSIDriverParams) (*PatchStorageV1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1CSIDriver",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1CSINode partially update the specified CSINode
*/
func (a *Client) PatchStorageV1CSINode(params *PatchStorageV1CSINodeParams) (*PatchStorageV1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1CSINode",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1StorageClass partially update the specified StorageClass
*/
func (a *Client) PatchStorageV1StorageClass(params *PatchStorageV1StorageClassParams) (*PatchStorageV1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1StorageClass",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1VolumeAttachment partially update the specified VolumeAttachment
*/
func (a *Client) PatchStorageV1VolumeAttachment(params *PatchStorageV1VolumeAttachmentParams) (*PatchStorageV1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1VolumeAttachment",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchStorageV1VolumeAttachmentStatus partially update status of the specified VolumeAttachment
*/
func (a *Client) PatchStorageV1VolumeAttachmentStatus(params *PatchStorageV1VolumeAttachmentStatusParams) (*PatchStorageV1VolumeAttachmentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchStorageV1VolumeAttachmentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchStorageV1VolumeAttachmentStatus",
		Method:             "PATCH",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"application/apply-patch+yaml", "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchStorageV1VolumeAttachmentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchStorageV1VolumeAttachmentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchStorageV1VolumeAttachmentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1CSIDriver read the specified CSIDriver
*/
func (a *Client) ReadStorageV1CSIDriver(params *ReadStorageV1CSIDriverParams) (*ReadStorageV1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1CSINode read the specified CSINode
*/
func (a *Client) ReadStorageV1CSINode(params *ReadStorageV1CSINodeParams) (*ReadStorageV1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1StorageClass read the specified StorageClass
*/
func (a *Client) ReadStorageV1StorageClass(params *ReadStorageV1StorageClassParams) (*ReadStorageV1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1VolumeAttachment read the specified VolumeAttachment
*/
func (a *Client) ReadStorageV1VolumeAttachment(params *ReadStorageV1VolumeAttachmentParams) (*ReadStorageV1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReadStorageV1VolumeAttachmentStatus read status of the specified VolumeAttachment
*/
func (a *Client) ReadStorageV1VolumeAttachmentStatus(params *ReadStorageV1VolumeAttachmentStatusParams) (*ReadStorageV1VolumeAttachmentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadStorageV1VolumeAttachmentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "readStorageV1VolumeAttachmentStatus",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadStorageV1VolumeAttachmentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadStorageV1VolumeAttachmentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for readStorageV1VolumeAttachmentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1CSIDriver replace the specified CSIDriver
*/
func (a *Client) ReplaceStorageV1CSIDriver(params *ReplaceStorageV1CSIDriverParams) (*ReplaceStorageV1CSIDriverOK, *ReplaceStorageV1CSIDriverCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1CSIDriver",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1CSIDriverOK:
		return value, nil, nil
	case *ReplaceStorageV1CSIDriverCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1CSINode replace the specified CSINode
*/
func (a *Client) ReplaceStorageV1CSINode(params *ReplaceStorageV1CSINodeParams) (*ReplaceStorageV1CSINodeOK, *ReplaceStorageV1CSINodeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1CSINode",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1CSINodeOK:
		return value, nil, nil
	case *ReplaceStorageV1CSINodeCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1StorageClass replace the specified StorageClass
*/
func (a *Client) ReplaceStorageV1StorageClass(params *ReplaceStorageV1StorageClassParams) (*ReplaceStorageV1StorageClassOK, *ReplaceStorageV1StorageClassCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1StorageClass",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1StorageClassOK:
		return value, nil, nil
	case *ReplaceStorageV1StorageClassCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1VolumeAttachment replace the specified VolumeAttachment
*/
func (a *Client) ReplaceStorageV1VolumeAttachment(params *ReplaceStorageV1VolumeAttachmentParams) (*ReplaceStorageV1VolumeAttachmentOK, *ReplaceStorageV1VolumeAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1VolumeAttachment",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1VolumeAttachmentOK:
		return value, nil, nil
	case *ReplaceStorageV1VolumeAttachmentCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceStorageV1VolumeAttachmentStatus replace status of the specified VolumeAttachment
*/
func (a *Client) ReplaceStorageV1VolumeAttachmentStatus(params *ReplaceStorageV1VolumeAttachmentStatusParams) (*ReplaceStorageV1VolumeAttachmentStatusOK, *ReplaceStorageV1VolumeAttachmentStatusCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageV1VolumeAttachmentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceStorageV1VolumeAttachmentStatus",
		Method:             "PUT",
		PathPattern:        "/apis/storage.k8s.io/v1/volumeattachments/{name}/status",
		ProducesMediaTypes: []string{"application/json", "application/vnd.kubernetes.protobuf", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageV1VolumeAttachmentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageV1VolumeAttachmentStatusOK:
		return value, nil, nil
	case *ReplaceStorageV1VolumeAttachmentStatusCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storage_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1CSIDriver watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1CSIDriver(params *WatchStorageV1CSIDriverParams) (*WatchStorageV1CSIDriverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1CSIDriverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1CSIDriver",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/csidrivers/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1CSIDriverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1CSIDriverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1CSIDriver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1CSIDriverList watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1CSIDriverList(params *WatchStorageV1CSIDriverListParams) (*WatchStorageV1CSIDriverListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1CSIDriverListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1CSIDriverList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/csidrivers",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1CSIDriverListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1CSIDriverListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1CSIDriverList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1CSINode watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1CSINode(params *WatchStorageV1CSINodeParams) (*WatchStorageV1CSINodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1CSINodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1CSINode",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/csinodes/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1CSINodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1CSINodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1CSINode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1CSINodeList watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1CSINodeList(params *WatchStorageV1CSINodeListParams) (*WatchStorageV1CSINodeListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1CSINodeListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1CSINodeList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/csinodes",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1CSINodeListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1CSINodeListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1CSINodeList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1StorageClass watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1StorageClass(params *WatchStorageV1StorageClassParams) (*WatchStorageV1StorageClassOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1StorageClassParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1StorageClass",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/storageclasses/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1StorageClassReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1StorageClassOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1StorageClass: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1StorageClassList watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1StorageClassList(params *WatchStorageV1StorageClassListParams) (*WatchStorageV1StorageClassListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1StorageClassListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1StorageClassList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/storageclasses",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1StorageClassListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1StorageClassListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1StorageClassList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1VolumeAttachment watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
*/
func (a *Client) WatchStorageV1VolumeAttachment(params *WatchStorageV1VolumeAttachmentParams) (*WatchStorageV1VolumeAttachmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1VolumeAttachmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1VolumeAttachment",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/volumeattachments/{name}",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1VolumeAttachmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1VolumeAttachmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1VolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WatchStorageV1VolumeAttachmentList watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
*/
func (a *Client) WatchStorageV1VolumeAttachmentList(params *WatchStorageV1VolumeAttachmentListParams) (*WatchStorageV1VolumeAttachmentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWatchStorageV1VolumeAttachmentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "watchStorageV1VolumeAttachmentList",
		Method:             "GET",
		PathPattern:        "/apis/storage.k8s.io/v1/watch/volumeattachments",
		ProducesMediaTypes: []string{"application/json", "application/json;stream=watch", "application/vnd.kubernetes.protobuf", "application/vnd.kubernetes.protobuf;stream=watch", "application/yaml"},
		ConsumesMediaTypes: []string{"*/*"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WatchStorageV1VolumeAttachmentListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WatchStorageV1VolumeAttachmentListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for watchStorageV1VolumeAttachmentList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
