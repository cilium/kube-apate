// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1ScopedResourceSelectorRequirement A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
//
// swagger:model io.k8s.api.core.v1.ScopedResourceSelectorRequirement
type IoK8sAPICoreV1ScopedResourceSelectorRequirement struct {

	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
	// Required: true
	Operator *string `json:"operator"`

	// The name of the scope that the selector applies to.
	// Required: true
	ScopeName *string `json:"scopeName"`

	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// Validate validates this io k8s api core v1 scoped resource selector requirement
func (m *IoK8sAPICoreV1ScopedResourceSelectorRequirement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1ScopedResourceSelectorRequirement) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1ScopedResourceSelectorRequirement) validateScopeName(formats strfmt.Registry) error {

	if err := validate.Required("scopeName", "body", m.ScopeName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1ScopedResourceSelectorRequirement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1ScopedResourceSelectorRequirement) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1ScopedResourceSelectorRequirement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
