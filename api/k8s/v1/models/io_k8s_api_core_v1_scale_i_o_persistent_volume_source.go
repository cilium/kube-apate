// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1ScaleIOPersistentVolumeSource ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
//
// swagger:model io.k8s.api.core.v1.ScaleIOPersistentVolumeSource
type IoK8sAPICoreV1ScaleIOPersistentVolumeSource struct {

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
	FsType string `json:"fsType,omitempty"`

	// The host address of the ScaleIO API Gateway.
	// Required: true
	Gateway *string `json:"gateway"`

	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain string `json:"protectionDomain,omitempty"`

	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly bool `json:"readOnly,omitempty"`

	// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
	// Required: true
	SecretRef *IoK8sAPICoreV1SecretReference `json:"secretRef"`

	// Flag to enable/disable SSL communication with Gateway, default false
	SslEnabled bool `json:"sslEnabled,omitempty"`

	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
	StorageMode string `json:"storageMode,omitempty"`

	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool string `json:"storagePool,omitempty"`

	// The name of the storage system as configured in ScaleIO.
	// Required: true
	System *string `json:"system"`

	// The name of a volume already created in the ScaleIO system that is associated with this volume source.
	VolumeName string `json:"volumeName,omitempty"`
}

// Validate validates this io k8s api core v1 scale i o persistent volume source
func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) validateSecretRef(formats strfmt.Registry) error {

	if err := validate.Required("secretRef", "body", m.SecretRef); err != nil {
		return err
	}

	if m.SecretRef != nil {
		if err := m.SecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secretRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) validateSystem(formats strfmt.Registry) error {

	if err := validate.Required("system", "body", m.System); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1ScaleIOPersistentVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
