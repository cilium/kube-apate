// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIAppsV1DaemonSetStatus DaemonSetStatus represents the current status of a daemon set.
//
// swagger:model io.k8s.api.apps.v1.DaemonSetStatus
type IoK8sAPIAppsV1DaemonSetStatus struct {

	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount int32 `json:"collisionCount,omitempty"`

	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []*IoK8sAPIAppsV1DaemonSetCondition `json:"conditions"`

	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	// Required: true
	CurrentNumberScheduled *int32 `json:"currentNumberScheduled"`

	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	// Required: true
	DesiredNumberScheduled *int32 `json:"desiredNumberScheduled"`

	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable int32 `json:"numberAvailable,omitempty"`

	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	// Required: true
	NumberMisscheduled *int32 `json:"numberMisscheduled"`

	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
	// Required: true
	NumberReady *int32 `json:"numberReady"`

	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable int32 `json:"numberUnavailable,omitempty"`

	// The most recent generation observed by the daemon set controller.
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`

	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled int32 `json:"updatedNumberScheduled,omitempty"`
}

// Validate validates this io k8s api apps v1 daemon set status
func (m *IoK8sAPIAppsV1DaemonSetStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentNumberScheduled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredNumberScheduled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberMisscheduled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberReady(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetStatus) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetStatus) validateCurrentNumberScheduled(formats strfmt.Registry) error {

	if err := validate.Required("currentNumberScheduled", "body", m.CurrentNumberScheduled); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetStatus) validateDesiredNumberScheduled(formats strfmt.Registry) error {

	if err := validate.Required("desiredNumberScheduled", "body", m.DesiredNumberScheduled); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetStatus) validateNumberMisscheduled(formats strfmt.Registry) error {

	if err := validate.Required("numberMisscheduled", "body", m.NumberMisscheduled); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIAppsV1DaemonSetStatus) validateNumberReady(formats strfmt.Registry) error {

	if err := validate.Required("numberReady", "body", m.NumberReady); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIAppsV1DaemonSetStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIAppsV1DaemonSetStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIAppsV1DaemonSetStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
