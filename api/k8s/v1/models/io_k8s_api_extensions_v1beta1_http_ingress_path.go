// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIExtensionsV1beta1HTTPIngressPath HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
//
// swagger:model io.k8s.api.extensions.v1beta1.HTTPIngressPath
type IoK8sAPIExtensionsV1beta1HTTPIngressPath struct {

	// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
	// Required: true
	Backend *IoK8sAPIExtensionsV1beta1IngressBackend `json:"backend"`

	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
	Path string `json:"path,omitempty"`

	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//   done on a path element by element basis. A path element refers is the
	//   list of labels in the path split by the '/' separator. A request is a
	//   match for path p if every p is an element-wise prefix of p of the
	//   request path. Note that if the last element of the path is a substring
	//   of the last element in request path, it is not a match (e.g. /foo/bar
	//   matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	//   the IngressClass. Implementations can treat this as a separate PathType
	//   or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types. Defaults to ImplementationSpecific.
	PathType string `json:"pathType,omitempty"`
}

// Validate validates this io k8s api extensions v1beta1 HTTP ingress path
func (m *IoK8sAPIExtensionsV1beta1HTTPIngressPath) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackend(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIExtensionsV1beta1HTTPIngressPath) validateBackend(formats strfmt.Registry) error {

	if err := validate.Required("backend", "body", m.Backend); err != nil {
		return err
	}

	if m.Backend != nil {
		if err := m.Backend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backend")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIExtensionsV1beta1HTTPIngressPath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIExtensionsV1beta1HTTPIngressPath) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIExtensionsV1beta1HTTPIngressPath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
