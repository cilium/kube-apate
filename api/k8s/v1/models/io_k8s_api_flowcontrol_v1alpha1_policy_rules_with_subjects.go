// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
//
// swagger:model io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects
type IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects struct {

	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
	NonResourceRules []*IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule `json:"nonResourceRules"`

	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
	ResourceRules []*IoK8sAPIFlowcontrolV1alpha1ResourcePolicyRule `json:"resourceRules"`

	// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
	// Required: true
	Subjects []*IoK8sAPIFlowcontrolV1alpha1Subject `json:"subjects"`
}

// Validate validates this io k8s api flowcontrol v1alpha1 policy rules with subjects
func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonResourceRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) validateNonResourceRules(formats strfmt.Registry) error {

	if swag.IsZero(m.NonResourceRules) { // not required
		return nil
	}

	for i := 0; i < len(m.NonResourceRules); i++ {
		if swag.IsZero(m.NonResourceRules[i]) { // not required
			continue
		}

		if m.NonResourceRules[i] != nil {
			if err := m.NonResourceRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nonResourceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) validateResourceRules(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceRules) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceRules); i++ {
		if swag.IsZero(m.ResourceRules[i]) { // not required
			continue
		}

		if m.ResourceRules[i] != nil {
			if err := m.ResourceRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) validateSubjects(formats strfmt.Registry) error {

	if err := validate.Required("subjects", "body", m.Subjects); err != nil {
		return err
	}

	for i := 0; i < len(m.Subjects); i++ {
		if swag.IsZero(m.Subjects[i]) { // not required
			continue
		}

		if m.Subjects[i] != nil {
			if err := m.Subjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIFlowcontrolV1alpha1PolicyRulesWithSubjects
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
