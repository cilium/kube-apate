// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1ContainerPort ContainerPort represents a network port in a single container.
//
// swagger:model io.k8s.api.core.v1.ContainerPort
type IoK8sAPICoreV1ContainerPort struct {

	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	// Required: true
	ContainerPort *int32 `json:"containerPort"`

	// What host IP to bind the external port to.
	HostIP string `json:"hostIP,omitempty"`

	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
	HostPort int32 `json:"hostPort,omitempty"`

	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
	Name string `json:"name,omitempty"`

	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this io k8s api core v1 container port
func (m *IoK8sAPICoreV1ContainerPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1ContainerPort) validateContainerPort(formats strfmt.Registry) error {

	if err := validate.Required("containerPort", "body", m.ContainerPort); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1ContainerPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1ContainerPort) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1ContainerPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
