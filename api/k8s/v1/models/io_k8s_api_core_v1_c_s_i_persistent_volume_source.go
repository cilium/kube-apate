// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1CSIPersistentVolumeSource Represents storage that is managed by an external CSI volume driver (Beta feature)
//
// swagger:model io.k8s.api.core.v1.CSIPersistentVolumeSource
type IoK8sAPICoreV1CSIPersistentVolumeSource struct {

	// ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerExpandSecretRef *IoK8sAPICoreV1SecretReference `json:"controllerExpandSecretRef,omitempty"`

	// ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	ControllerPublishSecretRef *IoK8sAPICoreV1SecretReference `json:"controllerPublishSecretRef,omitempty"`

	// Driver is the name of the driver to use for this volume. Required.
	// Required: true
	Driver *string `json:"driver"`

	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
	FsType string `json:"fsType,omitempty"`

	// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodePublishSecretRef *IoK8sAPICoreV1SecretReference `json:"nodePublishSecretRef,omitempty"`

	// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
	NodeStageSecretRef *IoK8sAPICoreV1SecretReference `json:"nodeStageSecretRef,omitempty"`

	// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly bool `json:"readOnly,omitempty"`

	// Attributes of the volume to publish.
	VolumeAttributes map[string]string `json:"volumeAttributes,omitempty"`

	// VolumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.
	// Required: true
	VolumeHandle *string `json:"volumeHandle"`
}

// Validate validates this io k8s api core v1 c s i persistent volume source
func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerExpandSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllerPublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodePublishSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeStageSecretRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeHandle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateControllerExpandSecretRef(formats strfmt.Registry) error {

	if swag.IsZero(m.ControllerExpandSecretRef) { // not required
		return nil
	}

	if m.ControllerExpandSecretRef != nil {
		if err := m.ControllerExpandSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerExpandSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateControllerPublishSecretRef(formats strfmt.Registry) error {

	if swag.IsZero(m.ControllerPublishSecretRef) { // not required
		return nil
	}

	if m.ControllerPublishSecretRef != nil {
		if err := m.ControllerPublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerPublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateDriver(formats strfmt.Registry) error {

	if err := validate.Required("driver", "body", m.Driver); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateNodePublishSecretRef(formats strfmt.Registry) error {

	if swag.IsZero(m.NodePublishSecretRef) { // not required
		return nil
	}

	if m.NodePublishSecretRef != nil {
		if err := m.NodePublishSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodePublishSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateNodeStageSecretRef(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeStageSecretRef) { // not required
		return nil
	}

	if m.NodeStageSecretRef != nil {
		if err := m.NodeStageSecretRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeStageSecretRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) validateVolumeHandle(formats strfmt.Registry) error {

	if err := validate.Required("volumeHandle", "body", m.VolumeHandle); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1CSIPersistentVolumeSource) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1CSIPersistentVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
