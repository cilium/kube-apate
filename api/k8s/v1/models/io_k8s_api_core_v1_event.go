// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1Event Event is a report of an event somewhere in the cluster.
//
// swagger:model io.k8s.api.core.v1.Event
type IoK8sAPICoreV1Event struct {

	// What action was taken/failed regarding to the Regarding object.
	Action string `json:"action,omitempty"`

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion string `json:"apiVersion,omitempty"`

	// The number of times this event has occurred.
	Count int32 `json:"count,omitempty"`

	// Time when this Event was first observed.
	// Format: date-time
	EventTime IoK8sApimachineryPkgApisMetaV1MicroTime `json:"eventTime,omitempty"`

	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	// Format: date-time
	FirstTimestamp IoK8sApimachineryPkgApisMetaV1Time `json:"firstTimestamp,omitempty"`

	// The object that this event is about.
	// Required: true
	InvolvedObject *IoK8sAPICoreV1ObjectReference `json:"involvedObject"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind,omitempty"`

	// The time at which the most recent occurrence of this event was recorded.
	// Format: date-time
	LastTimestamp IoK8sApimachineryPkgApisMetaV1Time `json:"lastTimestamp,omitempty"`

	// A human-readable description of the status of this operation.
	Message string `json:"message,omitempty"`

	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// Required: true
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`

	// This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
	Reason string `json:"reason,omitempty"`

	// Optional secondary object for more complex actions.
	Related *IoK8sAPICoreV1ObjectReference `json:"related,omitempty"`

	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent string `json:"reportingComponent,omitempty"`

	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance string `json:"reportingInstance,omitempty"`

	// Data about the Event series this event represents or nil if it's a singleton Event.
	Series *IoK8sAPICoreV1EventSeries `json:"series,omitempty"`

	// The component reporting this event. Should be a short machine understandable string.
	Source *IoK8sAPICoreV1EventSource `json:"source,omitempty"`

	// Type of this event (Normal, Warning), new types could be added in the future
	Type string `json:"type,omitempty"`
}

// Validate validates this io k8s api core v1 event
func (m *IoK8sAPICoreV1Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvolvedObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1Event) validateEventTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTime) { // not required
		return nil
	}

	if err := m.EventTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventTime")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateFirstTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstTimestamp) { // not required
		return nil
	}

	if err := m.FirstTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firstTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateInvolvedObject(formats strfmt.Registry) error {

	if err := validate.Required("involvedObject", "body", m.InvolvedObject); err != nil {
		return err
	}

	if m.InvolvedObject != nil {
		if err := m.InvolvedObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("involvedObject")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateLastTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastTimestamp) { // not required
		return nil
	}

	if err := m.LastTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastTimestamp")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("metadata", "body", m.Metadata); err != nil {
		return err
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateRelated(formats strfmt.Registry) error {

	if swag.IsZero(m.Related) { // not required
		return nil
	}

	if m.Related != nil {
		if err := m.Related.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("related")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	if m.Series != nil {
		if err := m.Series.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("series")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1Event) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1Event) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
