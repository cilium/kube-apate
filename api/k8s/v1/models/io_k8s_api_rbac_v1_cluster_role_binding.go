// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIRbacV1ClusterRoleBinding ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
//
// swagger:model io.k8s.api.rbac.v1.ClusterRoleBinding
type IoK8sAPIRbacV1ClusterRoleBinding struct {

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	APIVersion string `json:"apiVersion,omitempty"`

	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind,omitempty"`

	// Standard object's metadata.
	Metadata *IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`

	// RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error.
	// Required: true
	RoleRef *IoK8sAPIRbacV1RoleRef `json:"roleRef"`

	// Subjects holds references to the objects the role applies to.
	Subjects []*IoK8sAPIRbacV1Subject `json:"subjects"`
}

// Validate validates this io k8s api rbac v1 cluster role binding
func (m *IoK8sAPIRbacV1ClusterRoleBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIRbacV1ClusterRoleBinding) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIRbacV1ClusterRoleBinding) validateRoleRef(formats strfmt.Registry) error {

	if err := validate.Required("roleRef", "body", m.RoleRef); err != nil {
		return err
	}

	if m.RoleRef != nil {
		if err := m.RoleRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleRef")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPIRbacV1ClusterRoleBinding) validateSubjects(formats strfmt.Registry) error {

	if swag.IsZero(m.Subjects) { // not required
		return nil
	}

	for i := 0; i < len(m.Subjects); i++ {
		if swag.IsZero(m.Subjects[i]) { // not required
			continue
		}

		if m.Subjects[i] != nil {
			if err := m.Subjects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subjects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIRbacV1ClusterRoleBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIRbacV1ClusterRoleBinding) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIRbacV1ClusterRoleBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
