// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1QuobyteVolumeSource Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
//
// swagger:model io.k8s.api.core.v1.QuobyteVolumeSource
type IoK8sAPICoreV1QuobyteVolumeSource struct {

	// Group to map volume access to Default is no group
	Group string `json:"group,omitempty"`

	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly bool `json:"readOnly,omitempty"`

	// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	// Required: true
	Registry *string `json:"registry"`

	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant string `json:"tenant,omitempty"`

	// User to map volume access to Defaults to serivceaccount user
	User string `json:"user,omitempty"`

	// Volume is a string that references an already created Quobyte volume by name.
	// Required: true
	Volume *string `json:"volume"`
}

// Validate validates this io k8s api core v1 quobyte volume source
func (m *IoK8sAPICoreV1QuobyteVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1QuobyteVolumeSource) validateRegistry(formats strfmt.Registry) error {

	if err := validate.Required("registry", "body", m.Registry); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1QuobyteVolumeSource) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volume", "body", m.Volume); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1QuobyteVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1QuobyteVolumeSource) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1QuobyteVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
