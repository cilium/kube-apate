// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPINodeV1alpha1RuntimeClassSpec RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
//
// swagger:model io.k8s.api.node.v1alpha1.RuntimeClassSpec
type IoK8sAPINodeV1alpha1RuntimeClassSpec struct {

	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
	Overhead *IoK8sAPINodeV1alpha1Overhead `json:"overhead,omitempty"`

	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.
	// Required: true
	RuntimeHandler *string `json:"runtimeHandler"`

	// Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
	Scheduling *IoK8sAPINodeV1alpha1Scheduling `json:"scheduling,omitempty"`
}

// Validate validates this io k8s api node v1alpha1 runtime class spec
func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOverhead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduling(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) validateOverhead(formats strfmt.Registry) error {

	if swag.IsZero(m.Overhead) { // not required
		return nil
	}

	if m.Overhead != nil {
		if err := m.Overhead.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overhead")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) validateRuntimeHandler(formats strfmt.Registry) error {

	if err := validate.Required("runtimeHandler", "body", m.RuntimeHandler); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) validateScheduling(formats strfmt.Registry) error {

	if swag.IsZero(m.Scheduling) { // not required
		return nil
	}

	if m.Scheduling != nil {
		if err := m.Scheduling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduling")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPINodeV1alpha1RuntimeClassSpec) UnmarshalBinary(b []byte) error {
	var res IoK8sAPINodeV1alpha1RuntimeClassSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
