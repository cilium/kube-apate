// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1EndpointAddress EndpointAddress is a tuple that describes single IP address.
//
// swagger:model io.k8s.api.core.v1.EndpointAddress
type IoK8sAPICoreV1EndpointAddress struct {

	// The Hostname of this endpoint
	Hostname string `json:"hostname,omitempty"`

	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	// Required: true
	IP *string `json:"ip"`

	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName string `json:"nodeName,omitempty"`

	// Reference to object providing the endpoint.
	TargetRef *IoK8sAPICoreV1ObjectReference `json:"targetRef,omitempty"`
}

// Validate validates this io k8s api core v1 endpoint address
func (m *IoK8sAPICoreV1EndpointAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1EndpointAddress) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1EndpointAddress) validateTargetRef(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetRef) { // not required
		return nil
	}

	if m.TargetRef != nil {
		if err := m.TargetRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1EndpointAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1EndpointAddress) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1EndpointAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
