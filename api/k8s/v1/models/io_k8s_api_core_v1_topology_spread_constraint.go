// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1TopologySpreadConstraint TopologySpreadConstraint specifies how to spread matching pods among the given topology.
//
// swagger:model io.k8s.api.core.v1.TopologySpreadConstraint
type IoK8sAPICoreV1TopologySpreadConstraint struct {

	// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
	LabelSelector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`

	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	// Required: true
	MaxSkew *int32 `json:"maxSkew"`

	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
	// Required: true
	TopologyKey *string `json:"topologyKey"`

	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
	// Required: true
	WhenUnsatisfiable *string `json:"whenUnsatisfiable"`
}

// Validate validates this io k8s api core v1 topology spread constraint
func (m *IoK8sAPICoreV1TopologySpreadConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSkew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopologyKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhenUnsatisfiable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1TopologySpreadConstraint) validateLabelSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.LabelSelector) { // not required
		return nil
	}

	if m.LabelSelector != nil {
		if err := m.LabelSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sAPICoreV1TopologySpreadConstraint) validateMaxSkew(formats strfmt.Registry) error {

	if err := validate.Required("maxSkew", "body", m.MaxSkew); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1TopologySpreadConstraint) validateTopologyKey(formats strfmt.Registry) error {

	if err := validate.Required("topologyKey", "body", m.TopologyKey); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1TopologySpreadConstraint) validateWhenUnsatisfiable(formats strfmt.Registry) error {

	if err := validate.Required("whenUnsatisfiable", "body", m.WhenUnsatisfiable); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1TopologySpreadConstraint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1TopologySpreadConstraint) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1TopologySpreadConstraint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
