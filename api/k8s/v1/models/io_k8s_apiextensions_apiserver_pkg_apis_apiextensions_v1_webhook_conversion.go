// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion WebhookConversion describes how to call a conversion webhook
//
// swagger:model io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion struct {

	// clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.
	ClientConfig *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig `json:"clientConfig,omitempty"`

	// conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
	// Required: true
	ConversionReviewVersions []string `json:"conversionReviewVersions"`
}

// Validate validates this io k8s apiextensions apiserver pkg apis apiextensions v1 webhook conversion
func (m *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversionReviewVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) validateClientConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientConfig) { // not required
		return nil
	}

	if m.ClientConfig != nil {
		if err := m.ClientConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientConfig")
			}
			return err
		}
	}

	return nil
}

func (m *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) validateConversionReviewVersions(formats strfmt.Registry) error {

	if err := validate.Required("conversionReviewVersions", "body", m.ConversionReviewVersions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) UnmarshalBinary(b []byte) error {
	var res IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
