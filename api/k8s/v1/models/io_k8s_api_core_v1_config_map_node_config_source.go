// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPICoreV1ConfigMapNodeConfigSource ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
//
// swagger:model io.k8s.api.core.v1.ConfigMapNodeConfigSource
type IoK8sAPICoreV1ConfigMapNodeConfigSource struct {

	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
	// Required: true
	KubeletConfigKey *string `json:"kubeletConfigKey"`

	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	// Required: true
	Name *string `json:"name"`

	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
	// Required: true
	Namespace *string `json:"namespace"`

	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
	UID string `json:"uid,omitempty"`
}

// Validate validates this io k8s api core v1 config map node config source
func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubeletConfigKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) validateKubeletConfigKey(formats strfmt.Registry) error {

	if err := validate.Required("kubeletConfigKey", "body", m.KubeletConfigKey); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPICoreV1ConfigMapNodeConfigSource) UnmarshalBinary(b []byte) error {
	var res IoK8sAPICoreV1ConfigMapNodeConfigSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
