// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
//
// swagger:model io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec
type IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec struct {

	// An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable IoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxUnavailable,omitempty"`

	// An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
	MinAvailable IoK8sApimachineryPkgUtilIntstrIntOrString `json:"minAvailable,omitempty"`

	// Label query over pods whose evictions are managed by the disruption budget.
	Selector *IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector,omitempty"`
}

// Validate validates this io k8s api policy v1beta1 pod disruption budget spec
func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxUnavailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) validateMaxUnavailable(formats strfmt.Registry) error {

	if swag.IsZero(m.MaxUnavailable) { // not required
		return nil
	}

	if err := m.MaxUnavailable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("maxUnavailable")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) validateMinAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.MinAvailable) { // not required
		return nil
	}

	if err := m.MinAvailable.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("minAvailable")
		}
		return err
	}

	return nil
}

func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) validateSelector(formats strfmt.Registry) error {

	if swag.IsZero(m.Selector) { // not required
		return nil
	}

	if m.Selector != nil {
		if err := m.Selector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("selector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
