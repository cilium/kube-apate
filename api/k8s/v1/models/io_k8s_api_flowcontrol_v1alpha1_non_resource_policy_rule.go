// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
//
// swagger:model io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule
type IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule struct {

	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
	//   - "/healthz" is legal
	//   - "/hea*" is illegal
	//   - "/hea" is legal but matches nothing
	//   - "/hea/*" also matches nothing
	//   - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	// Required: true
	NonResourceURLs []string `json:"nonResourceURLs"`

	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
	// Required: true
	Verbs []string `json:"verbs"`
}

// Validate validates this io k8s api flowcontrol v1alpha1 non resource policy rule
func (m *IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonResourceURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerbs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule) validateNonResourceURLs(formats strfmt.Registry) error {

	if err := validate.Required("nonResourceURLs", "body", m.NonResourceURLs); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule) validateVerbs(formats strfmt.Registry) error {

	if err := validate.Required("verbs", "body", m.Verbs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIFlowcontrolV1alpha1NonResourcePolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
