// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoK8sAPIAuthorizationV1SubjectRulesReviewStatus SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
//
// swagger:model io.k8s.api.authorization.v1.SubjectRulesReviewStatus
type IoK8sAPIAuthorizationV1SubjectRulesReviewStatus struct {

	// EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
	EvaluationError string `json:"evaluationError,omitempty"`

	// Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
	// Required: true
	Incomplete *bool `json:"incomplete"`

	// NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	// Required: true
	NonResourceRules []*IoK8sAPIAuthorizationV1NonResourceRule `json:"nonResourceRules"`

	// ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
	// Required: true
	ResourceRules []*IoK8sAPIAuthorizationV1ResourceRule `json:"resourceRules"`
}

// Validate validates this io k8s api authorization v1 subject rules review status
func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncomplete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonResourceRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) validateIncomplete(formats strfmt.Registry) error {

	if err := validate.Required("incomplete", "body", m.Incomplete); err != nil {
		return err
	}

	return nil
}

func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) validateNonResourceRules(formats strfmt.Registry) error {

	if err := validate.Required("nonResourceRules", "body", m.NonResourceRules); err != nil {
		return err
	}

	for i := 0; i < len(m.NonResourceRules); i++ {
		if swag.IsZero(m.NonResourceRules[i]) { // not required
			continue
		}

		if m.NonResourceRules[i] != nil {
			if err := m.NonResourceRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nonResourceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) validateResourceRules(formats strfmt.Registry) error {

	if err := validate.Required("resourceRules", "body", m.ResourceRules); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceRules); i++ {
		if swag.IsZero(m.ResourceRules[i]) { // not required
			continue
		}

		if m.ResourceRules[i] != nil {
			if err := m.ResourceRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoK8sAPIAuthorizationV1SubjectRulesReviewStatus) UnmarshalBinary(b []byte) error {
	var res IoK8sAPIAuthorizationV1SubjectRulesReviewStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
