// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchStorageV1alpha1VolumeAttachmentHandlerFunc turns a function with the right signature into a patch storage v1alpha1 volume attachment handler
type PatchStorageV1alpha1VolumeAttachmentHandlerFunc func(PatchStorageV1alpha1VolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchStorageV1alpha1VolumeAttachmentHandlerFunc) Handle(params PatchStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// PatchStorageV1alpha1VolumeAttachmentHandler interface for that can handle valid patch storage v1alpha1 volume attachment params
type PatchStorageV1alpha1VolumeAttachmentHandler interface {
	Handle(PatchStorageV1alpha1VolumeAttachmentParams) middleware.Responder
}

// NewPatchStorageV1alpha1VolumeAttachment creates a new http.Handler for the patch storage v1alpha1 volume attachment operation
func NewPatchStorageV1alpha1VolumeAttachment(ctx *middleware.Context, handler PatchStorageV1alpha1VolumeAttachmentHandler) *PatchStorageV1alpha1VolumeAttachment {
	return &PatchStorageV1alpha1VolumeAttachment{Context: ctx, Handler: handler}
}

/*PatchStorageV1alpha1VolumeAttachment swagger:route PATCH /apis/storage.k8s.io/v1alpha1/volumeattachments/{name} storage_v1alpha1 patchStorageV1alpha1VolumeAttachment

partially update the specified VolumeAttachment

*/
type PatchStorageV1alpha1VolumeAttachment struct {
	Context *middleware.Context
	Handler PatchStorageV1alpha1VolumeAttachmentHandler
}

func (o *PatchStorageV1alpha1VolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchStorageV1alpha1VolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
