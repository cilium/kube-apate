// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package node_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchNodeV1alpha1RuntimeClassHandlerFunc turns a function with the right signature into a patch node v1alpha1 runtime class handler
type PatchNodeV1alpha1RuntimeClassHandlerFunc func(PatchNodeV1alpha1RuntimeClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchNodeV1alpha1RuntimeClassHandlerFunc) Handle(params PatchNodeV1alpha1RuntimeClassParams) middleware.Responder {
	return fn(params)
}

// PatchNodeV1alpha1RuntimeClassHandler interface for that can handle valid patch node v1alpha1 runtime class params
type PatchNodeV1alpha1RuntimeClassHandler interface {
	Handle(PatchNodeV1alpha1RuntimeClassParams) middleware.Responder
}

// NewPatchNodeV1alpha1RuntimeClass creates a new http.Handler for the patch node v1alpha1 runtime class operation
func NewPatchNodeV1alpha1RuntimeClass(ctx *middleware.Context, handler PatchNodeV1alpha1RuntimeClassHandler) *PatchNodeV1alpha1RuntimeClass {
	return &PatchNodeV1alpha1RuntimeClass{Context: ctx, Handler: handler}
}

/*PatchNodeV1alpha1RuntimeClass swagger:route PATCH /apis/node.k8s.io/v1alpha1/runtimeclasses/{name} node_v1alpha1 patchNodeV1alpha1RuntimeClass

partially update the specified RuntimeClass

*/
type PatchNodeV1alpha1RuntimeClass struct {
	Context *middleware.Context
	Handler PatchNodeV1alpha1RuntimeClassHandler
}

func (o *PatchNodeV1alpha1RuntimeClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchNodeV1alpha1RuntimeClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
