// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package events_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchEventsV1EventListForAllNamespacesHandlerFunc turns a function with the right signature into a watch events v1 event list for all namespaces handler
type WatchEventsV1EventListForAllNamespacesHandlerFunc func(WatchEventsV1EventListForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchEventsV1EventListForAllNamespacesHandlerFunc) Handle(params WatchEventsV1EventListForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// WatchEventsV1EventListForAllNamespacesHandler interface for that can handle valid watch events v1 event list for all namespaces params
type WatchEventsV1EventListForAllNamespacesHandler interface {
	Handle(WatchEventsV1EventListForAllNamespacesParams) middleware.Responder
}

// NewWatchEventsV1EventListForAllNamespaces creates a new http.Handler for the watch events v1 event list for all namespaces operation
func NewWatchEventsV1EventListForAllNamespaces(ctx *middleware.Context, handler WatchEventsV1EventListForAllNamespacesHandler) *WatchEventsV1EventListForAllNamespaces {
	return &WatchEventsV1EventListForAllNamespaces{Context: ctx, Handler: handler}
}

/*WatchEventsV1EventListForAllNamespaces swagger:route GET /apis/events.k8s.io/v1/watch/events events_v1 watchEventsV1EventListForAllNamespaces

watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchEventsV1EventListForAllNamespaces struct {
	Context *middleware.Context
	Handler WatchEventsV1EventListForAllNamespacesHandler
}

func (o *WatchEventsV1EventListForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchEventsV1EventListForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
