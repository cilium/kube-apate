// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package events_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/cilium/kube-apate/api/k8s/v1/models"
)

// ReplaceEventsV1NamespacedEventOKCode is the HTTP code returned for type ReplaceEventsV1NamespacedEventOK
const ReplaceEventsV1NamespacedEventOKCode int = 200

/*ReplaceEventsV1NamespacedEventOK OK

swagger:response replaceEventsV1NamespacedEventOK
*/
type ReplaceEventsV1NamespacedEventOK struct {

	/*
	  In: Body
	*/
	Payload *models.IoK8sAPIEventsV1Event `json:"body,omitempty"`
}

// NewReplaceEventsV1NamespacedEventOK creates ReplaceEventsV1NamespacedEventOK with default headers values
func NewReplaceEventsV1NamespacedEventOK() *ReplaceEventsV1NamespacedEventOK {

	return &ReplaceEventsV1NamespacedEventOK{}
}

// WithPayload adds the payload to the replace events v1 namespaced event o k response
func (o *ReplaceEventsV1NamespacedEventOK) WithPayload(payload *models.IoK8sAPIEventsV1Event) *ReplaceEventsV1NamespacedEventOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace events v1 namespaced event o k response
func (o *ReplaceEventsV1NamespacedEventOK) SetPayload(payload *models.IoK8sAPIEventsV1Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceEventsV1NamespacedEventOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceEventsV1NamespacedEventCreatedCode is the HTTP code returned for type ReplaceEventsV1NamespacedEventCreated
const ReplaceEventsV1NamespacedEventCreatedCode int = 201

/*ReplaceEventsV1NamespacedEventCreated Created

swagger:response replaceEventsV1NamespacedEventCreated
*/
type ReplaceEventsV1NamespacedEventCreated struct {

	/*
	  In: Body
	*/
	Payload *models.IoK8sAPIEventsV1Event `json:"body,omitempty"`
}

// NewReplaceEventsV1NamespacedEventCreated creates ReplaceEventsV1NamespacedEventCreated with default headers values
func NewReplaceEventsV1NamespacedEventCreated() *ReplaceEventsV1NamespacedEventCreated {

	return &ReplaceEventsV1NamespacedEventCreated{}
}

// WithPayload adds the payload to the replace events v1 namespaced event created response
func (o *ReplaceEventsV1NamespacedEventCreated) WithPayload(payload *models.IoK8sAPIEventsV1Event) *ReplaceEventsV1NamespacedEventCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the replace events v1 namespaced event created response
func (o *ReplaceEventsV1NamespacedEventCreated) SetPayload(payload *models.IoK8sAPIEventsV1Event) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplaceEventsV1NamespacedEventCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplaceEventsV1NamespacedEventUnauthorizedCode is the HTTP code returned for type ReplaceEventsV1NamespacedEventUnauthorized
const ReplaceEventsV1NamespacedEventUnauthorizedCode int = 401

/*ReplaceEventsV1NamespacedEventUnauthorized Unauthorized

swagger:response replaceEventsV1NamespacedEventUnauthorized
*/
type ReplaceEventsV1NamespacedEventUnauthorized struct {
}

// NewReplaceEventsV1NamespacedEventUnauthorized creates ReplaceEventsV1NamespacedEventUnauthorized with default headers values
func NewReplaceEventsV1NamespacedEventUnauthorized() *ReplaceEventsV1NamespacedEventUnauthorized {

	return &ReplaceEventsV1NamespacedEventUnauthorized{}
}

// WriteResponse to the client
func (o *ReplaceEventsV1NamespacedEventUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}
