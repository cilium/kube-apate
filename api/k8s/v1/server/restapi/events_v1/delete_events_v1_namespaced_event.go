// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package events_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteEventsV1NamespacedEventHandlerFunc turns a function with the right signature into a delete events v1 namespaced event handler
type DeleteEventsV1NamespacedEventHandlerFunc func(DeleteEventsV1NamespacedEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEventsV1NamespacedEventHandlerFunc) Handle(params DeleteEventsV1NamespacedEventParams) middleware.Responder {
	return fn(params)
}

// DeleteEventsV1NamespacedEventHandler interface for that can handle valid delete events v1 namespaced event params
type DeleteEventsV1NamespacedEventHandler interface {
	Handle(DeleteEventsV1NamespacedEventParams) middleware.Responder
}

// NewDeleteEventsV1NamespacedEvent creates a new http.Handler for the delete events v1 namespaced event operation
func NewDeleteEventsV1NamespacedEvent(ctx *middleware.Context, handler DeleteEventsV1NamespacedEventHandler) *DeleteEventsV1NamespacedEvent {
	return &DeleteEventsV1NamespacedEvent{Context: ctx, Handler: handler}
}

/*DeleteEventsV1NamespacedEvent swagger:route DELETE /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name} events_v1 deleteEventsV1NamespacedEvent

delete an Event

*/
type DeleteEventsV1NamespacedEvent struct {
	Context *middleware.Context
	Handler DeleteEventsV1NamespacedEventHandler
}

func (o *DeleteEventsV1NamespacedEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteEventsV1NamespacedEventParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
