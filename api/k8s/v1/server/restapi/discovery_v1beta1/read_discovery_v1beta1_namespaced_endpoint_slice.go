// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package discovery_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc turns a function with the right signature into a read discovery v1beta1 namespaced endpoint slice handler
type ReadDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc func(ReadDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc) Handle(params ReadDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
	return fn(params)
}

// ReadDiscoveryV1beta1NamespacedEndpointSliceHandler interface for that can handle valid read discovery v1beta1 namespaced endpoint slice params
type ReadDiscoveryV1beta1NamespacedEndpointSliceHandler interface {
	Handle(ReadDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder
}

// NewReadDiscoveryV1beta1NamespacedEndpointSlice creates a new http.Handler for the read discovery v1beta1 namespaced endpoint slice operation
func NewReadDiscoveryV1beta1NamespacedEndpointSlice(ctx *middleware.Context, handler ReadDiscoveryV1beta1NamespacedEndpointSliceHandler) *ReadDiscoveryV1beta1NamespacedEndpointSlice {
	return &ReadDiscoveryV1beta1NamespacedEndpointSlice{Context: ctx, Handler: handler}
}

/*ReadDiscoveryV1beta1NamespacedEndpointSlice swagger:route GET /apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name} discovery_v1beta1 readDiscoveryV1beta1NamespacedEndpointSlice

read the specified EndpointSlice

*/
type ReadDiscoveryV1beta1NamespacedEndpointSlice struct {
	Context *middleware.Context
	Handler ReadDiscoveryV1beta1NamespacedEndpointSliceHandler
}

func (o *ReadDiscoveryV1beta1NamespacedEndpointSlice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadDiscoveryV1beta1NamespacedEndpointSliceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
