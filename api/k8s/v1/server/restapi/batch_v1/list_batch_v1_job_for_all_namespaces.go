// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListBatchV1JobForAllNamespacesHandlerFunc turns a function with the right signature into a list batch v1 job for all namespaces handler
type ListBatchV1JobForAllNamespacesHandlerFunc func(ListBatchV1JobForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListBatchV1JobForAllNamespacesHandlerFunc) Handle(params ListBatchV1JobForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListBatchV1JobForAllNamespacesHandler interface for that can handle valid list batch v1 job for all namespaces params
type ListBatchV1JobForAllNamespacesHandler interface {
	Handle(ListBatchV1JobForAllNamespacesParams) middleware.Responder
}

// NewListBatchV1JobForAllNamespaces creates a new http.Handler for the list batch v1 job for all namespaces operation
func NewListBatchV1JobForAllNamespaces(ctx *middleware.Context, handler ListBatchV1JobForAllNamespacesHandler) *ListBatchV1JobForAllNamespaces {
	return &ListBatchV1JobForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListBatchV1JobForAllNamespaces swagger:route GET /apis/batch/v1/jobs batch_v1 listBatchV1JobForAllNamespaces

list or watch objects of kind Job

*/
type ListBatchV1JobForAllNamespaces struct {
	Context *middleware.Context
	Handler ListBatchV1JobForAllNamespacesHandler
}

func (o *ListBatchV1JobForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListBatchV1JobForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
