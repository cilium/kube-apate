// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadBatchV1NamespacedJobStatusHandlerFunc turns a function with the right signature into a read batch v1 namespaced job status handler
type ReadBatchV1NamespacedJobStatusHandlerFunc func(ReadBatchV1NamespacedJobStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadBatchV1NamespacedJobStatusHandlerFunc) Handle(params ReadBatchV1NamespacedJobStatusParams) middleware.Responder {
	return fn(params)
}

// ReadBatchV1NamespacedJobStatusHandler interface for that can handle valid read batch v1 namespaced job status params
type ReadBatchV1NamespacedJobStatusHandler interface {
	Handle(ReadBatchV1NamespacedJobStatusParams) middleware.Responder
}

// NewReadBatchV1NamespacedJobStatus creates a new http.Handler for the read batch v1 namespaced job status operation
func NewReadBatchV1NamespacedJobStatus(ctx *middleware.Context, handler ReadBatchV1NamespacedJobStatusHandler) *ReadBatchV1NamespacedJobStatus {
	return &ReadBatchV1NamespacedJobStatus{Context: ctx, Handler: handler}
}

/*ReadBatchV1NamespacedJobStatus swagger:route GET /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status batch_v1 readBatchV1NamespacedJobStatus

read status of the specified Job

*/
type ReadBatchV1NamespacedJobStatus struct {
	Context *middleware.Context
	Handler ReadBatchV1NamespacedJobStatusHandler
}

func (o *ReadBatchV1NamespacedJobStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadBatchV1NamespacedJobStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
