// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchBatchV1JobListForAllNamespacesHandlerFunc turns a function with the right signature into a watch batch v1 job list for all namespaces handler
type WatchBatchV1JobListForAllNamespacesHandlerFunc func(WatchBatchV1JobListForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchBatchV1JobListForAllNamespacesHandlerFunc) Handle(params WatchBatchV1JobListForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// WatchBatchV1JobListForAllNamespacesHandler interface for that can handle valid watch batch v1 job list for all namespaces params
type WatchBatchV1JobListForAllNamespacesHandler interface {
	Handle(WatchBatchV1JobListForAllNamespacesParams) middleware.Responder
}

// NewWatchBatchV1JobListForAllNamespaces creates a new http.Handler for the watch batch v1 job list for all namespaces operation
func NewWatchBatchV1JobListForAllNamespaces(ctx *middleware.Context, handler WatchBatchV1JobListForAllNamespacesHandler) *WatchBatchV1JobListForAllNamespaces {
	return &WatchBatchV1JobListForAllNamespaces{Context: ctx, Handler: handler}
}

/*WatchBatchV1JobListForAllNamespaces swagger:route GET /apis/batch/v1/watch/jobs batch_v1 watchBatchV1JobListForAllNamespaces

watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchBatchV1JobListForAllNamespaces struct {
	Context *middleware.Context
	Handler WatchBatchV1JobListForAllNamespacesHandler
}

func (o *WatchBatchV1JobListForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchBatchV1JobListForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
