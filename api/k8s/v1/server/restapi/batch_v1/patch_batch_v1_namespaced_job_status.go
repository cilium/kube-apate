// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchBatchV1NamespacedJobStatusHandlerFunc turns a function with the right signature into a patch batch v1 namespaced job status handler
type PatchBatchV1NamespacedJobStatusHandlerFunc func(PatchBatchV1NamespacedJobStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchBatchV1NamespacedJobStatusHandlerFunc) Handle(params PatchBatchV1NamespacedJobStatusParams) middleware.Responder {
	return fn(params)
}

// PatchBatchV1NamespacedJobStatusHandler interface for that can handle valid patch batch v1 namespaced job status params
type PatchBatchV1NamespacedJobStatusHandler interface {
	Handle(PatchBatchV1NamespacedJobStatusParams) middleware.Responder
}

// NewPatchBatchV1NamespacedJobStatus creates a new http.Handler for the patch batch v1 namespaced job status operation
func NewPatchBatchV1NamespacedJobStatus(ctx *middleware.Context, handler PatchBatchV1NamespacedJobStatusHandler) *PatchBatchV1NamespacedJobStatus {
	return &PatchBatchV1NamespacedJobStatus{Context: ctx, Handler: handler}
}

/*PatchBatchV1NamespacedJobStatus swagger:route PATCH /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status batch_v1 patchBatchV1NamespacedJobStatus

partially update status of the specified Job

*/
type PatchBatchV1NamespacedJobStatus struct {
	Context *middleware.Context
	Handler PatchBatchV1NamespacedJobStatusHandler
}

func (o *PatchBatchV1NamespacedJobStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchBatchV1NamespacedJobStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
