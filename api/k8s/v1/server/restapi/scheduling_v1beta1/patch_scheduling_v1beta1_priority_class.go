// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package scheduling_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchSchedulingV1beta1PriorityClassHandlerFunc turns a function with the right signature into a patch scheduling v1beta1 priority class handler
type PatchSchedulingV1beta1PriorityClassHandlerFunc func(PatchSchedulingV1beta1PriorityClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchSchedulingV1beta1PriorityClassHandlerFunc) Handle(params PatchSchedulingV1beta1PriorityClassParams) middleware.Responder {
	return fn(params)
}

// PatchSchedulingV1beta1PriorityClassHandler interface for that can handle valid patch scheduling v1beta1 priority class params
type PatchSchedulingV1beta1PriorityClassHandler interface {
	Handle(PatchSchedulingV1beta1PriorityClassParams) middleware.Responder
}

// NewPatchSchedulingV1beta1PriorityClass creates a new http.Handler for the patch scheduling v1beta1 priority class operation
func NewPatchSchedulingV1beta1PriorityClass(ctx *middleware.Context, handler PatchSchedulingV1beta1PriorityClassHandler) *PatchSchedulingV1beta1PriorityClass {
	return &PatchSchedulingV1beta1PriorityClass{Context: ctx, Handler: handler}
}

/*PatchSchedulingV1beta1PriorityClass swagger:route PATCH /apis/scheduling.k8s.io/v1beta1/priorityclasses/{name} scheduling_v1beta1 patchSchedulingV1beta1PriorityClass

partially update the specified PriorityClass

*/
type PatchSchedulingV1beta1PriorityClass struct {
	Context *middleware.Context
	Handler PatchSchedulingV1beta1PriorityClassHandler
}

func (o *PatchSchedulingV1beta1PriorityClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchSchedulingV1beta1PriorityClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
