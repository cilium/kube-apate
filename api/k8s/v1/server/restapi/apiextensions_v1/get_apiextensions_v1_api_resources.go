// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apiextensions_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetApiextensionsV1APIResourcesHandlerFunc turns a function with the right signature into a get apiextensions v1 API resources handler
type GetApiextensionsV1APIResourcesHandlerFunc func(GetApiextensionsV1APIResourcesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetApiextensionsV1APIResourcesHandlerFunc) Handle(params GetApiextensionsV1APIResourcesParams) middleware.Responder {
	return fn(params)
}

// GetApiextensionsV1APIResourcesHandler interface for that can handle valid get apiextensions v1 API resources params
type GetApiextensionsV1APIResourcesHandler interface {
	Handle(GetApiextensionsV1APIResourcesParams) middleware.Responder
}

// NewGetApiextensionsV1APIResources creates a new http.Handler for the get apiextensions v1 API resources operation
func NewGetApiextensionsV1APIResources(ctx *middleware.Context, handler GetApiextensionsV1APIResourcesHandler) *GetApiextensionsV1APIResources {
	return &GetApiextensionsV1APIResources{Context: ctx, Handler: handler}
}

/*GetApiextensionsV1APIResources swagger:route GET /apis/apiextensions.k8s.io/v1/ apiextensions_v1 getApiextensionsV1ApiResources

get available resources

*/
type GetApiextensionsV1APIResources struct {
	Context *middleware.Context
	Handler GetApiextensionsV1APIResourcesHandler
}

func (o *GetApiextensionsV1APIResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetApiextensionsV1APIResourcesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
