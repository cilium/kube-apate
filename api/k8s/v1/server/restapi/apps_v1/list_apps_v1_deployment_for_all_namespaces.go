// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAppsV1DeploymentForAllNamespacesHandlerFunc turns a function with the right signature into a list apps v1 deployment for all namespaces handler
type ListAppsV1DeploymentForAllNamespacesHandlerFunc func(ListAppsV1DeploymentForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAppsV1DeploymentForAllNamespacesHandlerFunc) Handle(params ListAppsV1DeploymentForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListAppsV1DeploymentForAllNamespacesHandler interface for that can handle valid list apps v1 deployment for all namespaces params
type ListAppsV1DeploymentForAllNamespacesHandler interface {
	Handle(ListAppsV1DeploymentForAllNamespacesParams) middleware.Responder
}

// NewListAppsV1DeploymentForAllNamespaces creates a new http.Handler for the list apps v1 deployment for all namespaces operation
func NewListAppsV1DeploymentForAllNamespaces(ctx *middleware.Context, handler ListAppsV1DeploymentForAllNamespacesHandler) *ListAppsV1DeploymentForAllNamespaces {
	return &ListAppsV1DeploymentForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListAppsV1DeploymentForAllNamespaces swagger:route GET /apis/apps/v1/deployments apps_v1 listAppsV1DeploymentForAllNamespaces

list or watch objects of kind Deployment

*/
type ListAppsV1DeploymentForAllNamespaces struct {
	Context *middleware.Context
	Handler ListAppsV1DeploymentForAllNamespacesHandler
}

func (o *ListAppsV1DeploymentForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAppsV1DeploymentForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
