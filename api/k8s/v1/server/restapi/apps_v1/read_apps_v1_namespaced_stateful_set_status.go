// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadAppsV1NamespacedStatefulSetStatusHandlerFunc turns a function with the right signature into a read apps v1 namespaced stateful set status handler
type ReadAppsV1NamespacedStatefulSetStatusHandlerFunc func(ReadAppsV1NamespacedStatefulSetStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadAppsV1NamespacedStatefulSetStatusHandlerFunc) Handle(params ReadAppsV1NamespacedStatefulSetStatusParams) middleware.Responder {
	return fn(params)
}

// ReadAppsV1NamespacedStatefulSetStatusHandler interface for that can handle valid read apps v1 namespaced stateful set status params
type ReadAppsV1NamespacedStatefulSetStatusHandler interface {
	Handle(ReadAppsV1NamespacedStatefulSetStatusParams) middleware.Responder
}

// NewReadAppsV1NamespacedStatefulSetStatus creates a new http.Handler for the read apps v1 namespaced stateful set status operation
func NewReadAppsV1NamespacedStatefulSetStatus(ctx *middleware.Context, handler ReadAppsV1NamespacedStatefulSetStatusHandler) *ReadAppsV1NamespacedStatefulSetStatus {
	return &ReadAppsV1NamespacedStatefulSetStatus{Context: ctx, Handler: handler}
}

/*ReadAppsV1NamespacedStatefulSetStatus swagger:route GET /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status apps_v1 readAppsV1NamespacedStatefulSetStatus

read status of the specified StatefulSet

*/
type ReadAppsV1NamespacedStatefulSetStatus struct {
	Context *middleware.Context
	Handler ReadAppsV1NamespacedStatefulSetStatusHandler
}

func (o *ReadAppsV1NamespacedStatefulSetStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadAppsV1NamespacedStatefulSetStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
