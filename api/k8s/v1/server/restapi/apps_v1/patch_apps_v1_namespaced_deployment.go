// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchAppsV1NamespacedDeploymentHandlerFunc turns a function with the right signature into a patch apps v1 namespaced deployment handler
type PatchAppsV1NamespacedDeploymentHandlerFunc func(PatchAppsV1NamespacedDeploymentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchAppsV1NamespacedDeploymentHandlerFunc) Handle(params PatchAppsV1NamespacedDeploymentParams) middleware.Responder {
	return fn(params)
}

// PatchAppsV1NamespacedDeploymentHandler interface for that can handle valid patch apps v1 namespaced deployment params
type PatchAppsV1NamespacedDeploymentHandler interface {
	Handle(PatchAppsV1NamespacedDeploymentParams) middleware.Responder
}

// NewPatchAppsV1NamespacedDeployment creates a new http.Handler for the patch apps v1 namespaced deployment operation
func NewPatchAppsV1NamespacedDeployment(ctx *middleware.Context, handler PatchAppsV1NamespacedDeploymentHandler) *PatchAppsV1NamespacedDeployment {
	return &PatchAppsV1NamespacedDeployment{Context: ctx, Handler: handler}
}

/*PatchAppsV1NamespacedDeployment swagger:route PATCH /apis/apps/v1/namespaces/{namespace}/deployments/{name} apps_v1 patchAppsV1NamespacedDeployment

partially update the specified Deployment

*/
type PatchAppsV1NamespacedDeployment struct {
	Context *middleware.Context
	Handler PatchAppsV1NamespacedDeploymentHandler
}

func (o *PatchAppsV1NamespacedDeployment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchAppsV1NamespacedDeploymentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
