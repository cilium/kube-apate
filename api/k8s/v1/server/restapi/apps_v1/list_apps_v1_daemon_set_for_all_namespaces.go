// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAppsV1DaemonSetForAllNamespacesHandlerFunc turns a function with the right signature into a list apps v1 daemon set for all namespaces handler
type ListAppsV1DaemonSetForAllNamespacesHandlerFunc func(ListAppsV1DaemonSetForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAppsV1DaemonSetForAllNamespacesHandlerFunc) Handle(params ListAppsV1DaemonSetForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListAppsV1DaemonSetForAllNamespacesHandler interface for that can handle valid list apps v1 daemon set for all namespaces params
type ListAppsV1DaemonSetForAllNamespacesHandler interface {
	Handle(ListAppsV1DaemonSetForAllNamespacesParams) middleware.Responder
}

// NewListAppsV1DaemonSetForAllNamespaces creates a new http.Handler for the list apps v1 daemon set for all namespaces operation
func NewListAppsV1DaemonSetForAllNamespaces(ctx *middleware.Context, handler ListAppsV1DaemonSetForAllNamespacesHandler) *ListAppsV1DaemonSetForAllNamespaces {
	return &ListAppsV1DaemonSetForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListAppsV1DaemonSetForAllNamespaces swagger:route GET /apis/apps/v1/daemonsets apps_v1 listAppsV1DaemonSetForAllNamespaces

list or watch objects of kind DaemonSet

*/
type ListAppsV1DaemonSetForAllNamespaces struct {
	Context *middleware.Context
	Handler ListAppsV1DaemonSetForAllNamespacesHandler
}

func (o *ListAppsV1DaemonSetForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAppsV1DaemonSetForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
