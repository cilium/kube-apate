// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc turns a function with the right signature into a read certificates v1beta1 certificate signing request status handler
type ReadCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc func(ReadCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc) Handle(params ReadCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder {
	return fn(params)
}

// ReadCertificatesV1beta1CertificateSigningRequestStatusHandler interface for that can handle valid read certificates v1beta1 certificate signing request status params
type ReadCertificatesV1beta1CertificateSigningRequestStatusHandler interface {
	Handle(ReadCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder
}

// NewReadCertificatesV1beta1CertificateSigningRequestStatus creates a new http.Handler for the read certificates v1beta1 certificate signing request status operation
func NewReadCertificatesV1beta1CertificateSigningRequestStatus(ctx *middleware.Context, handler ReadCertificatesV1beta1CertificateSigningRequestStatusHandler) *ReadCertificatesV1beta1CertificateSigningRequestStatus {
	return &ReadCertificatesV1beta1CertificateSigningRequestStatus{Context: ctx, Handler: handler}
}

/*ReadCertificatesV1beta1CertificateSigningRequestStatus swagger:route GET /apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status certificates_v1beta1 readCertificatesV1beta1CertificateSigningRequestStatus

read status of the specified CertificateSigningRequest

*/
type ReadCertificatesV1beta1CertificateSigningRequestStatus struct {
	Context *middleware.Context
	Handler ReadCertificatesV1beta1CertificateSigningRequestStatusHandler
}

func (o *ReadCertificatesV1beta1CertificateSigningRequestStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadCertificatesV1beta1CertificateSigningRequestStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
