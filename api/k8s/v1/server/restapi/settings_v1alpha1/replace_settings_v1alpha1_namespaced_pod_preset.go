// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package settings_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceSettingsV1alpha1NamespacedPodPresetHandlerFunc turns a function with the right signature into a replace settings v1alpha1 namespaced pod preset handler
type ReplaceSettingsV1alpha1NamespacedPodPresetHandlerFunc func(ReplaceSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceSettingsV1alpha1NamespacedPodPresetHandlerFunc) Handle(params ReplaceSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
	return fn(params)
}

// ReplaceSettingsV1alpha1NamespacedPodPresetHandler interface for that can handle valid replace settings v1alpha1 namespaced pod preset params
type ReplaceSettingsV1alpha1NamespacedPodPresetHandler interface {
	Handle(ReplaceSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder
}

// NewReplaceSettingsV1alpha1NamespacedPodPreset creates a new http.Handler for the replace settings v1alpha1 namespaced pod preset operation
func NewReplaceSettingsV1alpha1NamespacedPodPreset(ctx *middleware.Context, handler ReplaceSettingsV1alpha1NamespacedPodPresetHandler) *ReplaceSettingsV1alpha1NamespacedPodPreset {
	return &ReplaceSettingsV1alpha1NamespacedPodPreset{Context: ctx, Handler: handler}
}

/*ReplaceSettingsV1alpha1NamespacedPodPreset swagger:route PUT /apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name} settings_v1alpha1 replaceSettingsV1alpha1NamespacedPodPreset

replace the specified PodPreset

*/
type ReplaceSettingsV1alpha1NamespacedPodPreset struct {
	Context *middleware.Context
	Handler ReplaceSettingsV1alpha1NamespacedPodPresetHandler
}

func (o *ReplaceSettingsV1alpha1NamespacedPodPreset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceSettingsV1alpha1NamespacedPodPresetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
