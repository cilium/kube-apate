// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package settings_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListSettingsV1alpha1PodPresetForAllNamespacesHandlerFunc turns a function with the right signature into a list settings v1alpha1 pod preset for all namespaces handler
type ListSettingsV1alpha1PodPresetForAllNamespacesHandlerFunc func(ListSettingsV1alpha1PodPresetForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListSettingsV1alpha1PodPresetForAllNamespacesHandlerFunc) Handle(params ListSettingsV1alpha1PodPresetForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListSettingsV1alpha1PodPresetForAllNamespacesHandler interface for that can handle valid list settings v1alpha1 pod preset for all namespaces params
type ListSettingsV1alpha1PodPresetForAllNamespacesHandler interface {
	Handle(ListSettingsV1alpha1PodPresetForAllNamespacesParams) middleware.Responder
}

// NewListSettingsV1alpha1PodPresetForAllNamespaces creates a new http.Handler for the list settings v1alpha1 pod preset for all namespaces operation
func NewListSettingsV1alpha1PodPresetForAllNamespaces(ctx *middleware.Context, handler ListSettingsV1alpha1PodPresetForAllNamespacesHandler) *ListSettingsV1alpha1PodPresetForAllNamespaces {
	return &ListSettingsV1alpha1PodPresetForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListSettingsV1alpha1PodPresetForAllNamespaces swagger:route GET /apis/settings.k8s.io/v1alpha1/podpresets settings_v1alpha1 listSettingsV1alpha1PodPresetForAllNamespaces

list or watch objects of kind PodPreset

*/
type ListSettingsV1alpha1PodPresetForAllNamespaces struct {
	Context *middleware.Context
	Handler ListSettingsV1alpha1PodPresetForAllNamespacesHandler
}

func (o *ListSettingsV1alpha1PodPresetForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListSettingsV1alpha1PodPresetForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
