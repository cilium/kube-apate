// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/runtime/yamlpc"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/admissionregistration"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/admissionregistration_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/admissionregistration_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiextensions"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiextensions_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiextensions_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiregistration"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiregistration_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apiregistration_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apis"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apps"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/apps_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authentication"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authentication_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authentication_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authorization"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authorization_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/authorization_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/autoscaling"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/autoscaling_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/autoscaling_v2beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/autoscaling_v2beta2"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/batch"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/batch_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/batch_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/batch_v2alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/certificates"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/certificates_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/certificates_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/cilium"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/coordination"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/coordination_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/coordination_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/core"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/core_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/discovery"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/discovery_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/events"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/events_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/events_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/extensions"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/extensions_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/flowcontrol_apiserver"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/flowcontrol_apiserver_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/logs"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/networking"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/networking_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/networking_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/node"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/node_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/node_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/policy"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/policy_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/rbac_authorization"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/rbac_authorization_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/rbac_authorization_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/rbac_authorization_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/scheduling"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/scheduling_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/scheduling_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/scheduling_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/settings"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/settings_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/storage"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/storage_v1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/storage_v1alpha1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/storage_v1beta1"
	"github.com/cilium/kube-apate/api/k8s/v1/server/restapi/version"
)

// NewKubernetesAPI creates a new Kubernetes instance
func NewKubernetesAPI(spec *loads.Document) *KubernetesAPI {
	return &KubernetesAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		EmptyConsumer: runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
			return errors.NotImplemented(" consumer has not yet been implemented")
		}),
		JSONConsumer: runtime.JSONConsumer(),
		ProtobufConsumer: runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
			return errors.NotImplemented("protobuf consumer has not yet been implemented")
		}),
		YamlConsumer: yamlpc.YAMLConsumer(),

		EmptyProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented(" producer has not yet been implemented")
		}),
		JSONProducer: runtime.JSONProducer(),
		ProtobufProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("protobuf producer has not yet been implemented")
		}),
		TxtProducer:  runtime.TextProducer(),
		YamlProducer: yamlpc.YAMLProducer(),

		CiliumDeleteApisCiliumIoV2CiliumEndpointHandler: cilium.DeleteApisCiliumIoV2CiliumEndpointHandlerFunc(func(params cilium.DeleteApisCiliumIoV2CiliumEndpointParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.DeleteApisCiliumIoV2CiliumEndpoint has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler: cilium.ListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicy has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler: cilium.ListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumClusterwideNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumClusterwideNetworkPolicy has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumEndpointHandler: cilium.ListApisCiliumIoV2CiliumEndpointHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumEndpointParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumEndpoint has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumIdentityHandler: cilium.ListApisCiliumIoV2CiliumIdentityHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumIdentityParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumIdentity has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumLocalRedirectPolicyHandler: cilium.ListApisCiliumIoV2CiliumLocalRedirectPolicyHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumLocalRedirectPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumLocalRedirectPolicy has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumNetworkPolicyHandler: cilium.ListApisCiliumIoV2CiliumNetworkPolicyHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumNetworkPolicy has not yet been implemented")
		}),
		CiliumListApisCiliumIoV2CiliumNodesHandler: cilium.ListApisCiliumIoV2CiliumNodesHandlerFunc(func(params cilium.ListApisCiliumIoV2CiliumNodesParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ListApisCiliumIoV2CiliumNodes has not yet been implemented")
		}),
		CiliumPatchApisCiliumIoV2CiliumEndpointStatusHandler: cilium.PatchApisCiliumIoV2CiliumEndpointStatusHandlerFunc(func(params cilium.PatchApisCiliumIoV2CiliumEndpointStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.PatchApisCiliumIoV2CiliumEndpointStatus has not yet been implemented")
		}),
		CiliumPatchApisCiliumIoV2CiliumIdentityStatusHandler: cilium.PatchApisCiliumIoV2CiliumIdentityStatusHandlerFunc(func(params cilium.PatchApisCiliumIoV2CiliumIdentityStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.PatchApisCiliumIoV2CiliumIdentityStatus has not yet been implemented")
		}),
		CiliumPostApisCiliumIoV2CiliumEndpointHandler: cilium.PostApisCiliumIoV2CiliumEndpointHandlerFunc(func(params cilium.PostApisCiliumIoV2CiliumEndpointParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.PostApisCiliumIoV2CiliumEndpoint has not yet been implemented")
		}),
		CiliumPostApisCiliumIoV2CiliumNodesHandler: cilium.PostApisCiliumIoV2CiliumNodesHandlerFunc(func(params cilium.PostApisCiliumIoV2CiliumNodesParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.PostApisCiliumIoV2CiliumNodes has not yet been implemented")
		}),
		CiliumPutApisCiliumIoV2CiliumNodesHandler: cilium.PutApisCiliumIoV2CiliumNodesHandlerFunc(func(params cilium.PutApisCiliumIoV2CiliumNodesParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.PutApisCiliumIoV2CiliumNodes has not yet been implemented")
		}),
		CiliumReadApisCiliumIoV2CiliumNodeHandler: cilium.ReadApisCiliumIoV2CiliumNodeHandlerFunc(func(params cilium.ReadApisCiliumIoV2CiliumNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation cilium.ReadApisCiliumIoV2CiliumNode has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNamespacedPodProxyHandler: core_v1.ConnectCoreV1DeleteNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1DeleteNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNamespacedServiceProxyHandler: core_v1.ConnectCoreV1DeleteNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNodeProxyHandler: core_v1.ConnectCoreV1DeleteNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1DeleteNodeProxyWithPathHandler: core_v1.ConnectCoreV1DeleteNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1DeleteNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1DeleteNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedPodAttachHandler: core_v1.ConnectCoreV1GetNamespacedPodAttachHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedPodAttachParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedPodAttach has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedPodExecHandler: core_v1.ConnectCoreV1GetNamespacedPodExecHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedPodExecParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedPodExec has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedPodPortforwardHandler: core_v1.ConnectCoreV1GetNamespacedPodPortforwardHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedPodPortforwardParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedPodPortforward has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedPodProxyHandler: core_v1.ConnectCoreV1GetNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1GetNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedServiceProxyHandler: core_v1.ConnectCoreV1GetNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1GetNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1GetNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNodeProxyHandler: core_v1.ConnectCoreV1GetNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1GetNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1GetNodeProxyWithPathHandler: core_v1.ConnectCoreV1GetNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1GetNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1GetNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNamespacedPodProxyHandler: core_v1.ConnectCoreV1HeadNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1HeadNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1HeadNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1HeadNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNamespacedServiceProxyHandler: core_v1.ConnectCoreV1HeadNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1HeadNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1HeadNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1HeadNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNodeProxyHandler: core_v1.ConnectCoreV1HeadNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1HeadNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1HeadNodeProxyWithPathHandler: core_v1.ConnectCoreV1HeadNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1HeadNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1HeadNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNamespacedPodProxyHandler: core_v1.ConnectCoreV1OptionsNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1OptionsNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNamespacedServiceProxyHandler: core_v1.ConnectCoreV1OptionsNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNodeProxyHandler: core_v1.ConnectCoreV1OptionsNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1OptionsNodeProxyWithPathHandler: core_v1.ConnectCoreV1OptionsNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1OptionsNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1OptionsNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNamespacedPodProxyHandler: core_v1.ConnectCoreV1PatchNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1PatchNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1PatchNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PatchNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNamespacedServiceProxyHandler: core_v1.ConnectCoreV1PatchNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1PatchNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1PatchNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PatchNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNodeProxyHandler: core_v1.ConnectCoreV1PatchNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1PatchNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PatchNodeProxyWithPathHandler: core_v1.ConnectCoreV1PatchNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PatchNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PatchNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedPodAttachHandler: core_v1.ConnectCoreV1PostNamespacedPodAttachHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedPodAttachParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedPodAttach has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedPodExecHandler: core_v1.ConnectCoreV1PostNamespacedPodExecHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedPodExecParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedPodExec has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedPodPortforwardHandler: core_v1.ConnectCoreV1PostNamespacedPodPortforwardHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedPodPortforwardParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedPodPortforward has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedPodProxyHandler: core_v1.ConnectCoreV1PostNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1PostNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedServiceProxyHandler: core_v1.ConnectCoreV1PostNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1PostNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PostNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNodeProxyHandler: core_v1.ConnectCoreV1PostNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1PostNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PostNodeProxyWithPathHandler: core_v1.ConnectCoreV1PostNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PostNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PostNodeProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNamespacedPodProxyHandler: core_v1.ConnectCoreV1PutNamespacedPodProxyHandlerFunc(func(params core_v1.ConnectCoreV1PutNamespacedPodProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNamespacedPodProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNamespacedPodProxyWithPathHandler: core_v1.ConnectCoreV1PutNamespacedPodProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PutNamespacedPodProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNamespacedPodProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNamespacedServiceProxyHandler: core_v1.ConnectCoreV1PutNamespacedServiceProxyHandlerFunc(func(params core_v1.ConnectCoreV1PutNamespacedServiceProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNamespacedServiceProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNamespacedServiceProxyWithPathHandler: core_v1.ConnectCoreV1PutNamespacedServiceProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PutNamespacedServiceProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNamespacedServiceProxyWithPath has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNodeProxyHandler: core_v1.ConnectCoreV1PutNodeProxyHandlerFunc(func(params core_v1.ConnectCoreV1PutNodeProxyParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNodeProxy has not yet been implemented")
		}),
		CoreV1ConnectCoreV1PutNodeProxyWithPathHandler: core_v1.ConnectCoreV1PutNodeProxyWithPathHandlerFunc(func(params core_v1.ConnectCoreV1PutNodeProxyWithPathParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ConnectCoreV1PutNodeProxyWithPath has not yet been implemented")
		}),
		AdmissionregistrationV1CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.CreateAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.CreateAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.CreateAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.CreateAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.CreateAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1CreateApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.CreateApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.CreateApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.CreateApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1CreateApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.CreateApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.CreateApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.CreateApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiregistrationV1CreateApiregistrationV1APIServiceHandler: apiregistration_v1.CreateApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.CreateApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.CreateApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1CreateApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.CreateApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.CreateApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.CreateApiregistrationV1beta1APIService has not yet been implemented")
		}),
		AppsV1CreateAppsV1NamespacedControllerRevisionHandler: apps_v1.CreateAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.CreateAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.CreateAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1CreateAppsV1NamespacedDaemonSetHandler: apps_v1.CreateAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.CreateAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.CreateAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1CreateAppsV1NamespacedDeploymentHandler: apps_v1.CreateAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.CreateAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.CreateAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1CreateAppsV1NamespacedReplicaSetHandler: apps_v1.CreateAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.CreateAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.CreateAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1CreateAppsV1NamespacedStatefulSetHandler: apps_v1.CreateAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.CreateAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.CreateAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AuthenticationV1CreateAuthenticationV1TokenReviewHandler: authentication_v1.CreateAuthenticationV1TokenReviewHandlerFunc(func(params authentication_v1.CreateAuthenticationV1TokenReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authentication_v1.CreateAuthenticationV1TokenReview has not yet been implemented")
		}),
		AuthenticationV1beta1CreateAuthenticationV1beta1TokenReviewHandler: authentication_v1beta1.CreateAuthenticationV1beta1TokenReviewHandlerFunc(func(params authentication_v1beta1.CreateAuthenticationV1beta1TokenReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authentication_v1beta1.CreateAuthenticationV1beta1TokenReview has not yet been implemented")
		}),
		AuthorizationV1CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler: authorization_v1.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandlerFunc(func(params authorization_v1.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1.CreateAuthorizationV1NamespacedLocalSubjectAccessReview has not yet been implemented")
		}),
		AuthorizationV1CreateAuthorizationV1SelfSubjectAccessReviewHandler: authorization_v1.CreateAuthorizationV1SelfSubjectAccessReviewHandlerFunc(func(params authorization_v1.CreateAuthorizationV1SelfSubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1.CreateAuthorizationV1SelfSubjectAccessReview has not yet been implemented")
		}),
		AuthorizationV1CreateAuthorizationV1SelfSubjectRulesReviewHandler: authorization_v1.CreateAuthorizationV1SelfSubjectRulesReviewHandlerFunc(func(params authorization_v1.CreateAuthorizationV1SelfSubjectRulesReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1.CreateAuthorizationV1SelfSubjectRulesReview has not yet been implemented")
		}),
		AuthorizationV1CreateAuthorizationV1SubjectAccessReviewHandler: authorization_v1.CreateAuthorizationV1SubjectAccessReviewHandlerFunc(func(params authorization_v1.CreateAuthorizationV1SubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1.CreateAuthorizationV1SubjectAccessReview has not yet been implemented")
		}),
		AuthorizationV1beta1CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler: authorization_v1beta1.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandlerFunc(func(params authorization_v1beta1.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1beta1.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview has not yet been implemented")
		}),
		AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler: authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectAccessReviewHandlerFunc(func(params authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectAccessReview has not yet been implemented")
		}),
		AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler: authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectRulesReviewHandlerFunc(func(params authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectRulesReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectRulesReview has not yet been implemented")
		}),
		AuthorizationV1beta1CreateAuthorizationV1beta1SubjectAccessReviewHandler: authorization_v1beta1.CreateAuthorizationV1beta1SubjectAccessReviewHandlerFunc(func(params authorization_v1beta1.CreateAuthorizationV1beta1SubjectAccessReviewParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1beta1.CreateAuthorizationV1beta1SubjectAccessReview has not yet been implemented")
		}),
		AutoscalingV1CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.CreateAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		BatchV1CreateBatchV1NamespacedJobHandler: batch_v1.CreateBatchV1NamespacedJobHandlerFunc(func(params batch_v1.CreateBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.CreateBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1beta1CreateBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.CreateBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.CreateBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.CreateBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1CreateBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.CreateBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.CreateBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.CreateBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		CertificatesV1CreateCertificatesV1CertificateSigningRequestHandler: certificates_v1.CreateCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.CreateCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.CreateCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1CreateCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.CreateCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.CreateCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.CreateCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CoordinationV1CreateCoordinationV1NamespacedLeaseHandler: coordination_v1.CreateCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.CreateCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.CreateCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1CreateCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.CreateCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.CreateCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.CreateCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespaceHandler: core_v1.CreateCoreV1NamespaceHandlerFunc(func(params core_v1.CreateCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1Namespace has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedBindingHandler: core_v1.CreateCoreV1NamespacedBindingHandlerFunc(func(params core_v1.CreateCoreV1NamespacedBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedBinding has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedConfigMapHandler: core_v1.CreateCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.CreateCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedEndpointsHandler: core_v1.CreateCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.CreateCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedEventHandler: core_v1.CreateCoreV1NamespacedEventHandlerFunc(func(params core_v1.CreateCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedLimitRangeHandler: core_v1.CreateCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.CreateCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.CreateCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.CreateCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedPodHandler: core_v1.CreateCoreV1NamespacedPodHandlerFunc(func(params core_v1.CreateCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedPodBindingHandler: core_v1.CreateCoreV1NamespacedPodBindingHandlerFunc(func(params core_v1.CreateCoreV1NamespacedPodBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedPodBinding has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedPodEvictionHandler: core_v1.CreateCoreV1NamespacedPodEvictionHandlerFunc(func(params core_v1.CreateCoreV1NamespacedPodEvictionParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedPodEviction has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedPodTemplateHandler: core_v1.CreateCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.CreateCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedReplicationControllerHandler: core_v1.CreateCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.CreateCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedResourceQuotaHandler: core_v1.CreateCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.CreateCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedSecretHandler: core_v1.CreateCoreV1NamespacedSecretHandlerFunc(func(params core_v1.CreateCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedServiceHandler: core_v1.CreateCoreV1NamespacedServiceHandlerFunc(func(params core_v1.CreateCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedServiceAccountHandler: core_v1.CreateCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.CreateCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1CreateCoreV1NamespacedServiceAccountTokenHandler: core_v1.CreateCoreV1NamespacedServiceAccountTokenHandlerFunc(func(params core_v1.CreateCoreV1NamespacedServiceAccountTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1NamespacedServiceAccountToken has not yet been implemented")
		}),
		CoreV1CreateCoreV1NodeHandler: core_v1.CreateCoreV1NodeHandlerFunc(func(params core_v1.CreateCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1Node has not yet been implemented")
		}),
		CoreV1CreateCoreV1PersistentVolumeHandler: core_v1.CreateCoreV1PersistentVolumeHandlerFunc(func(params core_v1.CreateCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.CreateCoreV1PersistentVolume has not yet been implemented")
		}),
		DiscoveryV1beta1CreateDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.CreateDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.CreateDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.CreateDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1CreateEventsV1NamespacedEventHandler: events_v1.CreateEventsV1NamespacedEventHandlerFunc(func(params events_v1.CreateEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.CreateEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1CreateEventsV1beta1NamespacedEventHandler: events_v1beta1.CreateEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.CreateEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.CreateEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1CreateExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.CreateExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.CreateExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.CreateExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		NetworkingV1CreateNetworkingV1IngressClassHandler: networking_v1.CreateNetworkingV1IngressClassHandlerFunc(func(params networking_v1.CreateNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.CreateNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1CreateNetworkingV1NamespacedIngressHandler: networking_v1.CreateNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.CreateNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.CreateNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1CreateNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.CreateNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.CreateNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.CreateNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1beta1CreateNetworkingV1beta1IngressClassHandler: networking_v1beta1.CreateNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.CreateNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.CreateNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1CreateNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.CreateNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.CreateNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.CreateNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NodeV1alpha1CreateNodeV1alpha1RuntimeClassHandler: node_v1alpha1.CreateNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.CreateNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.CreateNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1CreateNodeV1beta1RuntimeClassHandler: node_v1beta1.CreateNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.CreateNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.CreateNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.CreatePolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.CreatePolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1CreatePolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.CreatePolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.CreatePolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.CreatePolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		SchedulingV1CreateSchedulingV1PriorityClassHandler: scheduling_v1.CreateSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.CreateSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.CreateSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1CreateSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.CreateSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.CreateSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.CreateSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1CreateSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.CreateSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.CreateSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.CreateSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1CreateSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.CreateSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.CreateSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.CreateSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		StorageV1CreateStorageV1CSIDriverHandler: storage_v1.CreateStorageV1CSIDriverHandlerFunc(func(params storage_v1.CreateStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.CreateStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1CreateStorageV1CSINodeHandler: storage_v1.CreateStorageV1CSINodeHandlerFunc(func(params storage_v1.CreateStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.CreateStorageV1CSINode has not yet been implemented")
		}),
		StorageV1CreateStorageV1StorageClassHandler: storage_v1.CreateStorageV1StorageClassHandlerFunc(func(params storage_v1.CreateStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.CreateStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1CreateStorageV1VolumeAttachmentHandler: storage_v1.CreateStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.CreateStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.CreateStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1alpha1CreateStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.CreateStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.CreateStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.CreateStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1CreateStorageV1beta1CSIDriverHandler: storage_v1beta1.CreateStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.CreateStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.CreateStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1CreateStorageV1beta1CSINodeHandler: storage_v1beta1.CreateStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.CreateStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.CreateStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1CreateStorageV1beta1StorageClassHandler: storage_v1beta1.CreateStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.CreateStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.CreateStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1CreateStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.CreateStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.CreateStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.CreateStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler: admissionregistration_v1.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler: admissionregistration_v1.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.DeleteAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.DeleteAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.DeleteAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.DeleteAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler: admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler: apiextensions_v1.DeleteApiextensionsV1CollectionCustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.DeleteApiextensionsV1CollectionCustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.DeleteApiextensionsV1CollectionCustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1DeleteApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.DeleteApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.DeleteApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.DeleteApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler: apiextensions_v1beta1.DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.DeleteApiextensionsV1beta1CollectionCustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1DeleteApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.DeleteApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.DeleteApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.DeleteApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiregistrationV1DeleteApiregistrationV1APIServiceHandler: apiregistration_v1.DeleteApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.DeleteApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.DeleteApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1DeleteApiregistrationV1CollectionAPIServiceHandler: apiregistration_v1.DeleteApiregistrationV1CollectionAPIServiceHandlerFunc(func(params apiregistration_v1.DeleteApiregistrationV1CollectionAPIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.DeleteApiregistrationV1CollectionAPIService has not yet been implemented")
		}),
		ApiregistrationV1beta1DeleteApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.DeleteApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.DeleteApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.DeleteApiregistrationV1beta1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1DeleteApiregistrationV1beta1CollectionAPIServiceHandler: apiregistration_v1beta1.DeleteApiregistrationV1beta1CollectionAPIServiceHandlerFunc(func(params apiregistration_v1beta1.DeleteApiregistrationV1beta1CollectionAPIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.DeleteApiregistrationV1beta1CollectionAPIService has not yet been implemented")
		}),
		AppsV1DeleteAppsV1CollectionNamespacedControllerRevisionHandler: apps_v1.DeleteAppsV1CollectionNamespacedControllerRevisionHandlerFunc(func(params apps_v1.DeleteAppsV1CollectionNamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1CollectionNamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1DeleteAppsV1CollectionNamespacedDaemonSetHandler: apps_v1.DeleteAppsV1CollectionNamespacedDaemonSetHandlerFunc(func(params apps_v1.DeleteAppsV1CollectionNamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1CollectionNamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1DeleteAppsV1CollectionNamespacedDeploymentHandler: apps_v1.DeleteAppsV1CollectionNamespacedDeploymentHandlerFunc(func(params apps_v1.DeleteAppsV1CollectionNamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1CollectionNamespacedDeployment has not yet been implemented")
		}),
		AppsV1DeleteAppsV1CollectionNamespacedReplicaSetHandler: apps_v1.DeleteAppsV1CollectionNamespacedReplicaSetHandlerFunc(func(params apps_v1.DeleteAppsV1CollectionNamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1CollectionNamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1DeleteAppsV1CollectionNamespacedStatefulSetHandler: apps_v1.DeleteAppsV1CollectionNamespacedStatefulSetHandlerFunc(func(params apps_v1.DeleteAppsV1CollectionNamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1CollectionNamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1DeleteAppsV1NamespacedControllerRevisionHandler: apps_v1.DeleteAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.DeleteAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1DeleteAppsV1NamespacedDaemonSetHandler: apps_v1.DeleteAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.DeleteAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1DeleteAppsV1NamespacedDeploymentHandler: apps_v1.DeleteAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.DeleteAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1DeleteAppsV1NamespacedReplicaSetHandler: apps_v1.DeleteAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.DeleteAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1DeleteAppsV1NamespacedStatefulSetHandler: apps_v1.DeleteAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.DeleteAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.DeleteAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AutoscalingV1DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV1DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.DeleteAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		BatchV1DeleteBatchV1CollectionNamespacedJobHandler: batch_v1.DeleteBatchV1CollectionNamespacedJobHandlerFunc(func(params batch_v1.DeleteBatchV1CollectionNamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.DeleteBatchV1CollectionNamespacedJob has not yet been implemented")
		}),
		BatchV1DeleteBatchV1NamespacedJobHandler: batch_v1.DeleteBatchV1NamespacedJobHandlerFunc(func(params batch_v1.DeleteBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.DeleteBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1beta1DeleteBatchV1beta1CollectionNamespacedCronJobHandler: batch_v1beta1.DeleteBatchV1beta1CollectionNamespacedCronJobHandlerFunc(func(params batch_v1beta1.DeleteBatchV1beta1CollectionNamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.DeleteBatchV1beta1CollectionNamespacedCronJob has not yet been implemented")
		}),
		BatchV1beta1DeleteBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.DeleteBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.DeleteBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.DeleteBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1DeleteBatchV2alpha1CollectionNamespacedCronJobHandler: batch_v2alpha1.DeleteBatchV2alpha1CollectionNamespacedCronJobHandlerFunc(func(params batch_v2alpha1.DeleteBatchV2alpha1CollectionNamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.DeleteBatchV2alpha1CollectionNamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1DeleteBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.DeleteBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.DeleteBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.DeleteBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		CertificatesV1DeleteCertificatesV1CertificateSigningRequestHandler: certificates_v1.DeleteCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.DeleteCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.DeleteCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1DeleteCertificatesV1CollectionCertificateSigningRequestHandler: certificates_v1.DeleteCertificatesV1CollectionCertificateSigningRequestHandlerFunc(func(params certificates_v1.DeleteCertificatesV1CollectionCertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.DeleteCertificatesV1CollectionCertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1DeleteCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.DeleteCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.DeleteCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.DeleteCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler: certificates_v1beta1.DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.DeleteCertificatesV1beta1CollectionCertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.DeleteCertificatesV1beta1CollectionCertificateSigningRequest has not yet been implemented")
		}),
		CoordinationV1DeleteCoordinationV1CollectionNamespacedLeaseHandler: coordination_v1.DeleteCoordinationV1CollectionNamespacedLeaseHandlerFunc(func(params coordination_v1.DeleteCoordinationV1CollectionNamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.DeleteCoordinationV1CollectionNamespacedLease has not yet been implemented")
		}),
		CoordinationV1DeleteCoordinationV1NamespacedLeaseHandler: coordination_v1.DeleteCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.DeleteCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.DeleteCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler: coordination_v1beta1.DeleteCoordinationV1beta1CollectionNamespacedLeaseHandlerFunc(func(params coordination_v1beta1.DeleteCoordinationV1beta1CollectionNamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.DeleteCoordinationV1beta1CollectionNamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1DeleteCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.DeleteCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.DeleteCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.DeleteCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedConfigMapHandler: core_v1.DeleteCoreV1CollectionNamespacedConfigMapHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedConfigMap has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedEndpointsHandler: core_v1.DeleteCoreV1CollectionNamespacedEndpointsHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedEndpoints has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedEventHandler: core_v1.DeleteCoreV1CollectionNamespacedEventHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedEvent has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedLimitRangeHandler: core_v1.DeleteCoreV1CollectionNamespacedLimitRangeHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedLimitRange has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler: core_v1.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedPodHandler: core_v1.DeleteCoreV1CollectionNamespacedPodHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedPod has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedPodTemplateHandler: core_v1.DeleteCoreV1CollectionNamespacedPodTemplateHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedReplicationControllerHandler: core_v1.DeleteCoreV1CollectionNamespacedReplicationControllerHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedReplicationController has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedResourceQuotaHandler: core_v1.DeleteCoreV1CollectionNamespacedResourceQuotaHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedSecretHandler: core_v1.DeleteCoreV1CollectionNamespacedSecretHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedSecret has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNamespacedServiceAccountHandler: core_v1.DeleteCoreV1CollectionNamespacedServiceAccountHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionNodeHandler: core_v1.DeleteCoreV1CollectionNodeHandlerFunc(func(params core_v1.DeleteCoreV1CollectionNodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionNode has not yet been implemented")
		}),
		CoreV1DeleteCoreV1CollectionPersistentVolumeHandler: core_v1.DeleteCoreV1CollectionPersistentVolumeHandlerFunc(func(params core_v1.DeleteCoreV1CollectionPersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1CollectionPersistentVolume has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespaceHandler: core_v1.DeleteCoreV1NamespaceHandlerFunc(func(params core_v1.DeleteCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1Namespace has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedConfigMapHandler: core_v1.DeleteCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedEndpointsHandler: core_v1.DeleteCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedEventHandler: core_v1.DeleteCoreV1NamespacedEventHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedLimitRangeHandler: core_v1.DeleteCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.DeleteCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedPodHandler: core_v1.DeleteCoreV1NamespacedPodHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedPodTemplateHandler: core_v1.DeleteCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedReplicationControllerHandler: core_v1.DeleteCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedResourceQuotaHandler: core_v1.DeleteCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedSecretHandler: core_v1.DeleteCoreV1NamespacedSecretHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedServiceHandler: core_v1.DeleteCoreV1NamespacedServiceHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NamespacedServiceAccountHandler: core_v1.DeleteCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.DeleteCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1DeleteCoreV1NodeHandler: core_v1.DeleteCoreV1NodeHandlerFunc(func(params core_v1.DeleteCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1Node has not yet been implemented")
		}),
		CoreV1DeleteCoreV1PersistentVolumeHandler: core_v1.DeleteCoreV1PersistentVolumeHandlerFunc(func(params core_v1.DeleteCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.DeleteCoreV1PersistentVolume has not yet been implemented")
		}),
		DiscoveryV1beta1DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler: discovery_v1beta1.DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.DeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice has not yet been implemented")
		}),
		DiscoveryV1beta1DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.DeleteDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.DeleteDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.DeleteDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1DeleteEventsV1CollectionNamespacedEventHandler: events_v1.DeleteEventsV1CollectionNamespacedEventHandlerFunc(func(params events_v1.DeleteEventsV1CollectionNamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.DeleteEventsV1CollectionNamespacedEvent has not yet been implemented")
		}),
		EventsV1DeleteEventsV1NamespacedEventHandler: events_v1.DeleteEventsV1NamespacedEventHandlerFunc(func(params events_v1.DeleteEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.DeleteEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1DeleteEventsV1beta1CollectionNamespacedEventHandler: events_v1beta1.DeleteEventsV1beta1CollectionNamespacedEventHandlerFunc(func(params events_v1beta1.DeleteEventsV1beta1CollectionNamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.DeleteEventsV1beta1CollectionNamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1DeleteEventsV1beta1NamespacedEventHandler: events_v1beta1.DeleteEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.DeleteEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.DeleteEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1DeleteExtensionsV1beta1CollectionNamespacedIngressHandler: extensions_v1beta1.DeleteExtensionsV1beta1CollectionNamespacedIngressHandlerFunc(func(params extensions_v1beta1.DeleteExtensionsV1beta1CollectionNamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.DeleteExtensionsV1beta1CollectionNamespacedIngress has not yet been implemented")
		}),
		ExtensionsV1beta1DeleteExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.DeleteExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.DeleteExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.DeleteExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler: flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1CollectionIngressClassHandler: networking_v1.DeleteNetworkingV1CollectionIngressClassHandlerFunc(func(params networking_v1.DeleteNetworkingV1CollectionIngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1CollectionIngressClass has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1CollectionNamespacedIngressHandler: networking_v1.DeleteNetworkingV1CollectionNamespacedIngressHandlerFunc(func(params networking_v1.DeleteNetworkingV1CollectionNamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1CollectionNamespacedIngress has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler: networking_v1.DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandlerFunc(func(params networking_v1.DeleteNetworkingV1CollectionNamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1CollectionNamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1IngressClassHandler: networking_v1.DeleteNetworkingV1IngressClassHandlerFunc(func(params networking_v1.DeleteNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1NamespacedIngressHandler: networking_v1.DeleteNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.DeleteNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1DeleteNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.DeleteNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.DeleteNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.DeleteNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1beta1DeleteNetworkingV1beta1CollectionIngressClassHandler: networking_v1beta1.DeleteNetworkingV1beta1CollectionIngressClassHandlerFunc(func(params networking_v1beta1.DeleteNetworkingV1beta1CollectionIngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.DeleteNetworkingV1beta1CollectionIngressClass has not yet been implemented")
		}),
		NetworkingV1beta1DeleteNetworkingV1beta1CollectionNamespacedIngressHandler: networking_v1beta1.DeleteNetworkingV1beta1CollectionNamespacedIngressHandlerFunc(func(params networking_v1beta1.DeleteNetworkingV1beta1CollectionNamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.DeleteNetworkingV1beta1CollectionNamespacedIngress has not yet been implemented")
		}),
		NetworkingV1beta1DeleteNetworkingV1beta1IngressClassHandler: networking_v1beta1.DeleteNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.DeleteNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.DeleteNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1DeleteNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.DeleteNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.DeleteNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.DeleteNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NodeV1alpha1DeleteNodeV1alpha1CollectionRuntimeClassHandler: node_v1alpha1.DeleteNodeV1alpha1CollectionRuntimeClassHandlerFunc(func(params node_v1alpha1.DeleteNodeV1alpha1CollectionRuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.DeleteNodeV1alpha1CollectionRuntimeClass has not yet been implemented")
		}),
		NodeV1alpha1DeleteNodeV1alpha1RuntimeClassHandler: node_v1alpha1.DeleteNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.DeleteNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.DeleteNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1DeleteNodeV1beta1CollectionRuntimeClassHandler: node_v1beta1.DeleteNodeV1beta1CollectionRuntimeClassHandlerFunc(func(params node_v1beta1.DeleteNodeV1beta1CollectionRuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.DeleteNodeV1beta1CollectionRuntimeClass has not yet been implemented")
		}),
		NodeV1beta1DeleteNodeV1beta1RuntimeClassHandler: node_v1beta1.DeleteNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.DeleteNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.DeleteNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler: policy_v1beta1.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1DeletePolicyV1beta1CollectionPodSecurityPolicyHandler: policy_v1beta1.DeletePolicyV1beta1CollectionPodSecurityPolicyHandlerFunc(func(params policy_v1beta1.DeletePolicyV1beta1CollectionPodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.DeletePolicyV1beta1CollectionPodSecurityPolicy has not yet been implemented")
		}),
		PolicyV1beta1DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.DeletePolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.DeletePolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1DeletePolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.DeletePolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.DeletePolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.DeletePolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		SchedulingV1DeleteSchedulingV1CollectionPriorityClassHandler: scheduling_v1.DeleteSchedulingV1CollectionPriorityClassHandlerFunc(func(params scheduling_v1.DeleteSchedulingV1CollectionPriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.DeleteSchedulingV1CollectionPriorityClass has not yet been implemented")
		}),
		SchedulingV1DeleteSchedulingV1PriorityClassHandler: scheduling_v1.DeleteSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.DeleteSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.DeleteSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1DeleteSchedulingV1alpha1CollectionPriorityClassHandler: scheduling_v1alpha1.DeleteSchedulingV1alpha1CollectionPriorityClassHandlerFunc(func(params scheduling_v1alpha1.DeleteSchedulingV1alpha1CollectionPriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.DeleteSchedulingV1alpha1CollectionPriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1DeleteSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.DeleteSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.DeleteSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.DeleteSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1DeleteSchedulingV1beta1CollectionPriorityClassHandler: scheduling_v1beta1.DeleteSchedulingV1beta1CollectionPriorityClassHandlerFunc(func(params scheduling_v1beta1.DeleteSchedulingV1beta1CollectionPriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.DeleteSchedulingV1beta1CollectionPriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1DeleteSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.DeleteSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.DeleteSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.DeleteSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler: settings_v1alpha1.DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.DeleteSettingsV1alpha1CollectionNamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.DeleteSettingsV1alpha1CollectionNamespacedPodPreset has not yet been implemented")
		}),
		SettingsV1alpha1DeleteSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.DeleteSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.DeleteSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.DeleteSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CSIDriverHandler: storage_v1.DeleteStorageV1CSIDriverHandlerFunc(func(params storage_v1.DeleteStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CSINodeHandler: storage_v1.DeleteStorageV1CSINodeHandlerFunc(func(params storage_v1.DeleteStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CSINode has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CollectionCSIDriverHandler: storage_v1.DeleteStorageV1CollectionCSIDriverHandlerFunc(func(params storage_v1.DeleteStorageV1CollectionCSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CollectionCSIDriver has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CollectionCSINodeHandler: storage_v1.DeleteStorageV1CollectionCSINodeHandlerFunc(func(params storage_v1.DeleteStorageV1CollectionCSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CollectionCSINode has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CollectionStorageClassHandler: storage_v1.DeleteStorageV1CollectionStorageClassHandlerFunc(func(params storage_v1.DeleteStorageV1CollectionStorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CollectionStorageClass has not yet been implemented")
		}),
		StorageV1DeleteStorageV1CollectionVolumeAttachmentHandler: storage_v1.DeleteStorageV1CollectionVolumeAttachmentHandlerFunc(func(params storage_v1.DeleteStorageV1CollectionVolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1CollectionVolumeAttachment has not yet been implemented")
		}),
		StorageV1DeleteStorageV1StorageClassHandler: storage_v1.DeleteStorageV1StorageClassHandlerFunc(func(params storage_v1.DeleteStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1DeleteStorageV1VolumeAttachmentHandler: storage_v1.DeleteStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.DeleteStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.DeleteStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1alpha1DeleteStorageV1alpha1CollectionVolumeAttachmentHandler: storage_v1alpha1.DeleteStorageV1alpha1CollectionVolumeAttachmentHandlerFunc(func(params storage_v1alpha1.DeleteStorageV1alpha1CollectionVolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.DeleteStorageV1alpha1CollectionVolumeAttachment has not yet been implemented")
		}),
		StorageV1alpha1DeleteStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.DeleteStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.DeleteStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.DeleteStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CSIDriverHandler: storage_v1beta1.DeleteStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CSINodeHandler: storage_v1beta1.DeleteStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CollectionCSIDriverHandler: storage_v1beta1.DeleteStorageV1beta1CollectionCSIDriverHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CollectionCSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CollectionCSIDriver has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CollectionCSINodeHandler: storage_v1beta1.DeleteStorageV1beta1CollectionCSINodeHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CollectionCSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CollectionCSINode has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CollectionStorageClassHandler: storage_v1beta1.DeleteStorageV1beta1CollectionStorageClassHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CollectionStorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CollectionStorageClass has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1CollectionVolumeAttachmentHandler: storage_v1beta1.DeleteStorageV1beta1CollectionVolumeAttachmentHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1CollectionVolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1CollectionVolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1StorageClassHandler: storage_v1beta1.DeleteStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1DeleteStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.DeleteStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.DeleteStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.DeleteStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		ApisGetAPIVersionsHandler: apis.GetAPIVersionsHandlerFunc(func(params apis.GetAPIVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation apis.GetAPIVersions has not yet been implemented")
		}),
		AdmissionregistrationGetAdmissionregistrationAPIGroupHandler: admissionregistration.GetAdmissionregistrationAPIGroupHandlerFunc(func(params admissionregistration.GetAdmissionregistrationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration.GetAdmissionregistrationAPIGroup has not yet been implemented")
		}),
		AdmissionregistrationV1GetAdmissionregistrationV1APIResourcesHandler: admissionregistration_v1.GetAdmissionregistrationV1APIResourcesHandlerFunc(func(params admissionregistration_v1.GetAdmissionregistrationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.GetAdmissionregistrationV1APIResources has not yet been implemented")
		}),
		AdmissionregistrationV1beta1GetAdmissionregistrationV1beta1APIResourcesHandler: admissionregistration_v1beta1.GetAdmissionregistrationV1beta1APIResourcesHandlerFunc(func(params admissionregistration_v1beta1.GetAdmissionregistrationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.GetAdmissionregistrationV1beta1APIResources has not yet been implemented")
		}),
		ApiextensionsGetApiextensionsAPIGroupHandler: apiextensions.GetApiextensionsAPIGroupHandlerFunc(func(params apiextensions.GetApiextensionsAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions.GetApiextensionsAPIGroup has not yet been implemented")
		}),
		ApiextensionsV1GetApiextensionsV1APIResourcesHandler: apiextensions_v1.GetApiextensionsV1APIResourcesHandlerFunc(func(params apiextensions_v1.GetApiextensionsV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.GetApiextensionsV1APIResources has not yet been implemented")
		}),
		ApiextensionsV1beta1GetApiextensionsV1beta1APIResourcesHandler: apiextensions_v1beta1.GetApiextensionsV1beta1APIResourcesHandlerFunc(func(params apiextensions_v1beta1.GetApiextensionsV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.GetApiextensionsV1beta1APIResources has not yet been implemented")
		}),
		ApiregistrationGetApiregistrationAPIGroupHandler: apiregistration.GetApiregistrationAPIGroupHandlerFunc(func(params apiregistration.GetApiregistrationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration.GetApiregistrationAPIGroup has not yet been implemented")
		}),
		ApiregistrationV1GetApiregistrationV1APIResourcesHandler: apiregistration_v1.GetApiregistrationV1APIResourcesHandlerFunc(func(params apiregistration_v1.GetApiregistrationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.GetApiregistrationV1APIResources has not yet been implemented")
		}),
		ApiregistrationV1beta1GetApiregistrationV1beta1APIResourcesHandler: apiregistration_v1beta1.GetApiregistrationV1beta1APIResourcesHandlerFunc(func(params apiregistration_v1beta1.GetApiregistrationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.GetApiregistrationV1beta1APIResources has not yet been implemented")
		}),
		AppsGetAppsAPIGroupHandler: apps.GetAppsAPIGroupHandlerFunc(func(params apps.GetAppsAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation apps.GetAppsAPIGroup has not yet been implemented")
		}),
		AppsV1GetAppsV1APIResourcesHandler: apps_v1.GetAppsV1APIResourcesHandlerFunc(func(params apps_v1.GetAppsV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.GetAppsV1APIResources has not yet been implemented")
		}),
		AuthenticationGetAuthenticationAPIGroupHandler: authentication.GetAuthenticationAPIGroupHandlerFunc(func(params authentication.GetAuthenticationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation authentication.GetAuthenticationAPIGroup has not yet been implemented")
		}),
		AuthenticationV1GetAuthenticationV1APIResourcesHandler: authentication_v1.GetAuthenticationV1APIResourcesHandlerFunc(func(params authentication_v1.GetAuthenticationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation authentication_v1.GetAuthenticationV1APIResources has not yet been implemented")
		}),
		AuthenticationV1beta1GetAuthenticationV1beta1APIResourcesHandler: authentication_v1beta1.GetAuthenticationV1beta1APIResourcesHandlerFunc(func(params authentication_v1beta1.GetAuthenticationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation authentication_v1beta1.GetAuthenticationV1beta1APIResources has not yet been implemented")
		}),
		AuthorizationGetAuthorizationAPIGroupHandler: authorization.GetAuthorizationAPIGroupHandlerFunc(func(params authorization.GetAuthorizationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization.GetAuthorizationAPIGroup has not yet been implemented")
		}),
		AuthorizationV1GetAuthorizationV1APIResourcesHandler: authorization_v1.GetAuthorizationV1APIResourcesHandlerFunc(func(params authorization_v1.GetAuthorizationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1.GetAuthorizationV1APIResources has not yet been implemented")
		}),
		AuthorizationV1beta1GetAuthorizationV1beta1APIResourcesHandler: authorization_v1beta1.GetAuthorizationV1beta1APIResourcesHandlerFunc(func(params authorization_v1beta1.GetAuthorizationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation authorization_v1beta1.GetAuthorizationV1beta1APIResources has not yet been implemented")
		}),
		AutoscalingGetAutoscalingAPIGroupHandler: autoscaling.GetAutoscalingAPIGroupHandlerFunc(func(params autoscaling.GetAutoscalingAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling.GetAutoscalingAPIGroup has not yet been implemented")
		}),
		AutoscalingV1GetAutoscalingV1APIResourcesHandler: autoscaling_v1.GetAutoscalingV1APIResourcesHandlerFunc(func(params autoscaling_v1.GetAutoscalingV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.GetAutoscalingV1APIResources has not yet been implemented")
		}),
		AutoscalingV2beta1GetAutoscalingV2beta1APIResourcesHandler: autoscaling_v2beta1.GetAutoscalingV2beta1APIResourcesHandlerFunc(func(params autoscaling_v2beta1.GetAutoscalingV2beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.GetAutoscalingV2beta1APIResources has not yet been implemented")
		}),
		AutoscalingV2beta2GetAutoscalingV2beta2APIResourcesHandler: autoscaling_v2beta2.GetAutoscalingV2beta2APIResourcesHandlerFunc(func(params autoscaling_v2beta2.GetAutoscalingV2beta2APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.GetAutoscalingV2beta2APIResources has not yet been implemented")
		}),
		BatchGetBatchAPIGroupHandler: batch.GetBatchAPIGroupHandlerFunc(func(params batch.GetBatchAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation batch.GetBatchAPIGroup has not yet been implemented")
		}),
		BatchV1GetBatchV1APIResourcesHandler: batch_v1.GetBatchV1APIResourcesHandlerFunc(func(params batch_v1.GetBatchV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.GetBatchV1APIResources has not yet been implemented")
		}),
		BatchV1beta1GetBatchV1beta1APIResourcesHandler: batch_v1beta1.GetBatchV1beta1APIResourcesHandlerFunc(func(params batch_v1beta1.GetBatchV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.GetBatchV1beta1APIResources has not yet been implemented")
		}),
		BatchV2alpha1GetBatchV2alpha1APIResourcesHandler: batch_v2alpha1.GetBatchV2alpha1APIResourcesHandlerFunc(func(params batch_v2alpha1.GetBatchV2alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.GetBatchV2alpha1APIResources has not yet been implemented")
		}),
		CertificatesGetCertificatesAPIGroupHandler: certificates.GetCertificatesAPIGroupHandlerFunc(func(params certificates.GetCertificatesAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates.GetCertificatesAPIGroup has not yet been implemented")
		}),
		CertificatesV1GetCertificatesV1APIResourcesHandler: certificates_v1.GetCertificatesV1APIResourcesHandlerFunc(func(params certificates_v1.GetCertificatesV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.GetCertificatesV1APIResources has not yet been implemented")
		}),
		CertificatesV1beta1GetCertificatesV1beta1APIResourcesHandler: certificates_v1beta1.GetCertificatesV1beta1APIResourcesHandlerFunc(func(params certificates_v1beta1.GetCertificatesV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.GetCertificatesV1beta1APIResources has not yet been implemented")
		}),
		VersionGetCodeVersionHandler: version.GetCodeVersionHandlerFunc(func(params version.GetCodeVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation version.GetCodeVersion has not yet been implemented")
		}),
		CoordinationGetCoordinationAPIGroupHandler: coordination.GetCoordinationAPIGroupHandlerFunc(func(params coordination.GetCoordinationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination.GetCoordinationAPIGroup has not yet been implemented")
		}),
		CoordinationV1GetCoordinationV1APIResourcesHandler: coordination_v1.GetCoordinationV1APIResourcesHandlerFunc(func(params coordination_v1.GetCoordinationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.GetCoordinationV1APIResources has not yet been implemented")
		}),
		CoordinationV1beta1GetCoordinationV1beta1APIResourcesHandler: coordination_v1beta1.GetCoordinationV1beta1APIResourcesHandlerFunc(func(params coordination_v1beta1.GetCoordinationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.GetCoordinationV1beta1APIResources has not yet been implemented")
		}),
		CoreGetCoreAPIVersionsHandler: core.GetCoreAPIVersionsHandlerFunc(func(params core.GetCoreAPIVersionsParams) middleware.Responder {
			return middleware.NotImplemented("operation core.GetCoreAPIVersions has not yet been implemented")
		}),
		CoreV1GetCoreV1APIResourcesHandler: core_v1.GetCoreV1APIResourcesHandlerFunc(func(params core_v1.GetCoreV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.GetCoreV1APIResources has not yet been implemented")
		}),
		DiscoveryGetDiscoveryAPIGroupHandler: discovery.GetDiscoveryAPIGroupHandlerFunc(func(params discovery.GetDiscoveryAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery.GetDiscoveryAPIGroup has not yet been implemented")
		}),
		DiscoveryV1beta1GetDiscoveryV1beta1APIResourcesHandler: discovery_v1beta1.GetDiscoveryV1beta1APIResourcesHandlerFunc(func(params discovery_v1beta1.GetDiscoveryV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.GetDiscoveryV1beta1APIResources has not yet been implemented")
		}),
		EventsGetEventsAPIGroupHandler: events.GetEventsAPIGroupHandlerFunc(func(params events.GetEventsAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation events.GetEventsAPIGroup has not yet been implemented")
		}),
		EventsV1GetEventsV1APIResourcesHandler: events_v1.GetEventsV1APIResourcesHandlerFunc(func(params events_v1.GetEventsV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.GetEventsV1APIResources has not yet been implemented")
		}),
		EventsV1beta1GetEventsV1beta1APIResourcesHandler: events_v1beta1.GetEventsV1beta1APIResourcesHandlerFunc(func(params events_v1beta1.GetEventsV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.GetEventsV1beta1APIResources has not yet been implemented")
		}),
		ExtensionsGetExtensionsAPIGroupHandler: extensions.GetExtensionsAPIGroupHandlerFunc(func(params extensions.GetExtensionsAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions.GetExtensionsAPIGroup has not yet been implemented")
		}),
		ExtensionsV1beta1GetExtensionsV1beta1APIResourcesHandler: extensions_v1beta1.GetExtensionsV1beta1APIResourcesHandlerFunc(func(params extensions_v1beta1.GetExtensionsV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.GetExtensionsV1beta1APIResources has not yet been implemented")
		}),
		FlowcontrolApiserverGetFlowcontrolApiserverAPIGroupHandler: flowcontrol_apiserver.GetFlowcontrolApiserverAPIGroupHandlerFunc(func(params flowcontrol_apiserver.GetFlowcontrolApiserverAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver.GetFlowcontrolApiserverAPIGroup has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1GetFlowcontrolApiserverV1alpha1APIResourcesHandler: flowcontrol_apiserver_v1alpha1.GetFlowcontrolApiserverV1alpha1APIResourcesHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.GetFlowcontrolApiserverV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.GetFlowcontrolApiserverV1alpha1APIResources has not yet been implemented")
		}),
		NetworkingGetNetworkingAPIGroupHandler: networking.GetNetworkingAPIGroupHandlerFunc(func(params networking.GetNetworkingAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation networking.GetNetworkingAPIGroup has not yet been implemented")
		}),
		NetworkingV1GetNetworkingV1APIResourcesHandler: networking_v1.GetNetworkingV1APIResourcesHandlerFunc(func(params networking_v1.GetNetworkingV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.GetNetworkingV1APIResources has not yet been implemented")
		}),
		NetworkingV1beta1GetNetworkingV1beta1APIResourcesHandler: networking_v1beta1.GetNetworkingV1beta1APIResourcesHandlerFunc(func(params networking_v1beta1.GetNetworkingV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.GetNetworkingV1beta1APIResources has not yet been implemented")
		}),
		NodeGetNodeAPIGroupHandler: node.GetNodeAPIGroupHandlerFunc(func(params node.GetNodeAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation node.GetNodeAPIGroup has not yet been implemented")
		}),
		NodeV1alpha1GetNodeV1alpha1APIResourcesHandler: node_v1alpha1.GetNodeV1alpha1APIResourcesHandlerFunc(func(params node_v1alpha1.GetNodeV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.GetNodeV1alpha1APIResources has not yet been implemented")
		}),
		NodeV1beta1GetNodeV1beta1APIResourcesHandler: node_v1beta1.GetNodeV1beta1APIResourcesHandlerFunc(func(params node_v1beta1.GetNodeV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.GetNodeV1beta1APIResources has not yet been implemented")
		}),
		PolicyGetPolicyAPIGroupHandler: policy.GetPolicyAPIGroupHandlerFunc(func(params policy.GetPolicyAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation policy.GetPolicyAPIGroup has not yet been implemented")
		}),
		PolicyV1beta1GetPolicyV1beta1APIResourcesHandler: policy_v1beta1.GetPolicyV1beta1APIResourcesHandlerFunc(func(params policy_v1beta1.GetPolicyV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.GetPolicyV1beta1APIResources has not yet been implemented")
		}),
		RbacAuthorizationGetRbacAuthorizationAPIGroupHandler: rbac_authorization.GetRbacAuthorizationAPIGroupHandlerFunc(func(params rbac_authorization.GetRbacAuthorizationAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization.GetRbacAuthorizationAPIGroup has not yet been implemented")
		}),
		RbacAuthorizationV1GetRbacAuthorizationV1APIResourcesHandler: rbac_authorization_v1.GetRbacAuthorizationV1APIResourcesHandlerFunc(func(params rbac_authorization_v1.GetRbacAuthorizationV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.GetRbacAuthorizationV1APIResources has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1GetRbacAuthorizationV1alpha1APIResourcesHandler: rbac_authorization_v1alpha1.GetRbacAuthorizationV1alpha1APIResourcesHandlerFunc(func(params rbac_authorization_v1alpha1.GetRbacAuthorizationV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.GetRbacAuthorizationV1alpha1APIResources has not yet been implemented")
		}),
		RbacAuthorizationV1beta1GetRbacAuthorizationV1beta1APIResourcesHandler: rbac_authorization_v1beta1.GetRbacAuthorizationV1beta1APIResourcesHandlerFunc(func(params rbac_authorization_v1beta1.GetRbacAuthorizationV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.GetRbacAuthorizationV1beta1APIResources has not yet been implemented")
		}),
		SchedulingGetSchedulingAPIGroupHandler: scheduling.GetSchedulingAPIGroupHandlerFunc(func(params scheduling.GetSchedulingAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling.GetSchedulingAPIGroup has not yet been implemented")
		}),
		SchedulingV1GetSchedulingV1APIResourcesHandler: scheduling_v1.GetSchedulingV1APIResourcesHandlerFunc(func(params scheduling_v1.GetSchedulingV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.GetSchedulingV1APIResources has not yet been implemented")
		}),
		SchedulingV1alpha1GetSchedulingV1alpha1APIResourcesHandler: scheduling_v1alpha1.GetSchedulingV1alpha1APIResourcesHandlerFunc(func(params scheduling_v1alpha1.GetSchedulingV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.GetSchedulingV1alpha1APIResources has not yet been implemented")
		}),
		SchedulingV1beta1GetSchedulingV1beta1APIResourcesHandler: scheduling_v1beta1.GetSchedulingV1beta1APIResourcesHandlerFunc(func(params scheduling_v1beta1.GetSchedulingV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.GetSchedulingV1beta1APIResources has not yet been implemented")
		}),
		SettingsGetSettingsAPIGroupHandler: settings.GetSettingsAPIGroupHandlerFunc(func(params settings.GetSettingsAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation settings.GetSettingsAPIGroup has not yet been implemented")
		}),
		SettingsV1alpha1GetSettingsV1alpha1APIResourcesHandler: settings_v1alpha1.GetSettingsV1alpha1APIResourcesHandlerFunc(func(params settings_v1alpha1.GetSettingsV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.GetSettingsV1alpha1APIResources has not yet been implemented")
		}),
		StorageGetStorageAPIGroupHandler: storage.GetStorageAPIGroupHandlerFunc(func(params storage.GetStorageAPIGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation storage.GetStorageAPIGroup has not yet been implemented")
		}),
		StorageV1GetStorageV1APIResourcesHandler: storage_v1.GetStorageV1APIResourcesHandlerFunc(func(params storage_v1.GetStorageV1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.GetStorageV1APIResources has not yet been implemented")
		}),
		StorageV1alpha1GetStorageV1alpha1APIResourcesHandler: storage_v1alpha1.GetStorageV1alpha1APIResourcesHandlerFunc(func(params storage_v1alpha1.GetStorageV1alpha1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.GetStorageV1alpha1APIResources has not yet been implemented")
		}),
		StorageV1beta1GetStorageV1beta1APIResourcesHandler: storage_v1beta1.GetStorageV1beta1APIResourcesHandlerFunc(func(params storage_v1beta1.GetStorageV1beta1APIResourcesParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.GetStorageV1beta1APIResources has not yet been implemented")
		}),
		AdmissionregistrationV1ListAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.ListAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ListAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ListAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.ListAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ListAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ListAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ListAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ListAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1ListApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.ListApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.ListApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.ListApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1ListApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.ListApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.ListApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.ListApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiregistrationV1ListApiregistrationV1APIServiceHandler: apiregistration_v1.ListApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.ListApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.ListApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1ListApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.ListApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.ListApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.ListApiregistrationV1beta1APIService has not yet been implemented")
		}),
		AppsV1ListAppsV1ControllerRevisionForAllNamespacesHandler: apps_v1.ListAppsV1ControllerRevisionForAllNamespacesHandlerFunc(func(params apps_v1.ListAppsV1ControllerRevisionForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1ControllerRevisionForAllNamespaces has not yet been implemented")
		}),
		AppsV1ListAppsV1DaemonSetForAllNamespacesHandler: apps_v1.ListAppsV1DaemonSetForAllNamespacesHandlerFunc(func(params apps_v1.ListAppsV1DaemonSetForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1DaemonSetForAllNamespaces has not yet been implemented")
		}),
		AppsV1ListAppsV1DeploymentForAllNamespacesHandler: apps_v1.ListAppsV1DeploymentForAllNamespacesHandlerFunc(func(params apps_v1.ListAppsV1DeploymentForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1DeploymentForAllNamespaces has not yet been implemented")
		}),
		AppsV1ListAppsV1NamespacedControllerRevisionHandler: apps_v1.ListAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.ListAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1ListAppsV1NamespacedDaemonSetHandler: apps_v1.ListAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.ListAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1ListAppsV1NamespacedDeploymentHandler: apps_v1.ListAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.ListAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1ListAppsV1NamespacedReplicaSetHandler: apps_v1.ListAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.ListAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1ListAppsV1NamespacedStatefulSetHandler: apps_v1.ListAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.ListAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1ListAppsV1ReplicaSetForAllNamespacesHandler: apps_v1.ListAppsV1ReplicaSetForAllNamespacesHandlerFunc(func(params apps_v1.ListAppsV1ReplicaSetForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1ReplicaSetForAllNamespaces has not yet been implemented")
		}),
		AppsV1ListAppsV1StatefulSetForAllNamespacesHandler: apps_v1.ListAppsV1StatefulSetForAllNamespacesHandlerFunc(func(params apps_v1.ListAppsV1StatefulSetForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ListAppsV1StatefulSetForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV1ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler: autoscaling_v1.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandlerFunc(func(params autoscaling_v1.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV1ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ListAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler: autoscaling_v2beta1.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandlerFunc(func(params autoscaling_v2beta1.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV2beta1ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler: autoscaling_v2beta2.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandlerFunc(func(params autoscaling_v2beta2.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV2beta2ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		BatchV1ListBatchV1JobForAllNamespacesHandler: batch_v1.ListBatchV1JobForAllNamespacesHandlerFunc(func(params batch_v1.ListBatchV1JobForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ListBatchV1JobForAllNamespaces has not yet been implemented")
		}),
		BatchV1ListBatchV1NamespacedJobHandler: batch_v1.ListBatchV1NamespacedJobHandlerFunc(func(params batch_v1.ListBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ListBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1beta1ListBatchV1beta1CronJobForAllNamespacesHandler: batch_v1beta1.ListBatchV1beta1CronJobForAllNamespacesHandlerFunc(func(params batch_v1beta1.ListBatchV1beta1CronJobForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ListBatchV1beta1CronJobForAllNamespaces has not yet been implemented")
		}),
		BatchV1beta1ListBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.ListBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.ListBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ListBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1ListBatchV2alpha1CronJobForAllNamespacesHandler: batch_v2alpha1.ListBatchV2alpha1CronJobForAllNamespacesHandlerFunc(func(params batch_v2alpha1.ListBatchV2alpha1CronJobForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ListBatchV2alpha1CronJobForAllNamespaces has not yet been implemented")
		}),
		BatchV2alpha1ListBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.ListBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.ListBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ListBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		CertificatesV1ListCertificatesV1CertificateSigningRequestHandler: certificates_v1.ListCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.ListCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ListCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1ListCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.ListCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.ListCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ListCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CoordinationV1ListCoordinationV1LeaseForAllNamespacesHandler: coordination_v1.ListCoordinationV1LeaseForAllNamespacesHandlerFunc(func(params coordination_v1.ListCoordinationV1LeaseForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.ListCoordinationV1LeaseForAllNamespaces has not yet been implemented")
		}),
		CoordinationV1ListCoordinationV1NamespacedLeaseHandler: coordination_v1.ListCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.ListCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.ListCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1ListCoordinationV1beta1LeaseForAllNamespacesHandler: coordination_v1beta1.ListCoordinationV1beta1LeaseForAllNamespacesHandlerFunc(func(params coordination_v1beta1.ListCoordinationV1beta1LeaseForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.ListCoordinationV1beta1LeaseForAllNamespaces has not yet been implemented")
		}),
		CoordinationV1beta1ListCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.ListCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.ListCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.ListCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1ListCoreV1ComponentStatusHandler: core_v1.ListCoreV1ComponentStatusHandlerFunc(func(params core_v1.ListCoreV1ComponentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ComponentStatus has not yet been implemented")
		}),
		CoreV1ListCoreV1ConfigMapForAllNamespacesHandler: core_v1.ListCoreV1ConfigMapForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1ConfigMapForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ConfigMapForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1EndpointsForAllNamespacesHandler: core_v1.ListCoreV1EndpointsForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1EndpointsForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1EndpointsForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1EventForAllNamespacesHandler: core_v1.ListCoreV1EventForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1EventForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1EventForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1LimitRangeForAllNamespacesHandler: core_v1.ListCoreV1LimitRangeForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1LimitRangeForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1LimitRangeForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespaceHandler: core_v1.ListCoreV1NamespaceHandlerFunc(func(params core_v1.ListCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1Namespace has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedConfigMapHandler: core_v1.ListCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.ListCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedEndpointsHandler: core_v1.ListCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.ListCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedEventHandler: core_v1.ListCoreV1NamespacedEventHandlerFunc(func(params core_v1.ListCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedLimitRangeHandler: core_v1.ListCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.ListCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.ListCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.ListCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedPodHandler: core_v1.ListCoreV1NamespacedPodHandlerFunc(func(params core_v1.ListCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedPodTemplateHandler: core_v1.ListCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.ListCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedReplicationControllerHandler: core_v1.ListCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.ListCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedResourceQuotaHandler: core_v1.ListCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.ListCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedSecretHandler: core_v1.ListCoreV1NamespacedSecretHandlerFunc(func(params core_v1.ListCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedServiceHandler: core_v1.ListCoreV1NamespacedServiceHandlerFunc(func(params core_v1.ListCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1ListCoreV1NamespacedServiceAccountHandler: core_v1.ListCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.ListCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1ListCoreV1NodeHandler: core_v1.ListCoreV1NodeHandlerFunc(func(params core_v1.ListCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1Node has not yet been implemented")
		}),
		CoreV1ListCoreV1PersistentVolumeHandler: core_v1.ListCoreV1PersistentVolumeHandlerFunc(func(params core_v1.ListCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1PersistentVolume has not yet been implemented")
		}),
		CoreV1ListCoreV1PersistentVolumeClaimForAllNamespacesHandler: core_v1.ListCoreV1PersistentVolumeClaimForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1PersistentVolumeClaimForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1PersistentVolumeClaimForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1PodForAllNamespacesHandler: core_v1.ListCoreV1PodForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1PodForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1PodForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1PodTemplateForAllNamespacesHandler: core_v1.ListCoreV1PodTemplateForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1PodTemplateForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1PodTemplateForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1ReplicationControllerForAllNamespacesHandler: core_v1.ListCoreV1ReplicationControllerForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1ReplicationControllerForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ReplicationControllerForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1ResourceQuotaForAllNamespacesHandler: core_v1.ListCoreV1ResourceQuotaForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1ResourceQuotaForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ResourceQuotaForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1SecretForAllNamespacesHandler: core_v1.ListCoreV1SecretForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1SecretForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1SecretForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1ServiceAccountForAllNamespacesHandler: core_v1.ListCoreV1ServiceAccountForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1ServiceAccountForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ServiceAccountForAllNamespaces has not yet been implemented")
		}),
		CoreV1ListCoreV1ServiceForAllNamespacesHandler: core_v1.ListCoreV1ServiceForAllNamespacesHandlerFunc(func(params core_v1.ListCoreV1ServiceForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ListCoreV1ServiceForAllNamespaces has not yet been implemented")
		}),
		DiscoveryV1beta1ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler: discovery_v1beta1.ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandlerFunc(func(params discovery_v1beta1.ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.ListDiscoveryV1beta1EndpointSliceForAllNamespaces has not yet been implemented")
		}),
		DiscoveryV1beta1ListDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.ListDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.ListDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.ListDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1ListEventsV1EventForAllNamespacesHandler: events_v1.ListEventsV1EventForAllNamespacesHandlerFunc(func(params events_v1.ListEventsV1EventForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.ListEventsV1EventForAllNamespaces has not yet been implemented")
		}),
		EventsV1ListEventsV1NamespacedEventHandler: events_v1.ListEventsV1NamespacedEventHandlerFunc(func(params events_v1.ListEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.ListEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1ListEventsV1beta1EventForAllNamespacesHandler: events_v1beta1.ListEventsV1beta1EventForAllNamespacesHandlerFunc(func(params events_v1beta1.ListEventsV1beta1EventForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.ListEventsV1beta1EventForAllNamespaces has not yet been implemented")
		}),
		EventsV1beta1ListEventsV1beta1NamespacedEventHandler: events_v1beta1.ListEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.ListEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.ListEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1ListExtensionsV1beta1IngressForAllNamespacesHandler: extensions_v1beta1.ListExtensionsV1beta1IngressForAllNamespacesHandlerFunc(func(params extensions_v1beta1.ListExtensionsV1beta1IngressForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ListExtensionsV1beta1IngressForAllNamespaces has not yet been implemented")
		}),
		ExtensionsV1beta1ListExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.ListExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.ListExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ListExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		NetworkingV1ListNetworkingV1IngressClassHandler: networking_v1.ListNetworkingV1IngressClassHandlerFunc(func(params networking_v1.ListNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ListNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1ListNetworkingV1IngressForAllNamespacesHandler: networking_v1.ListNetworkingV1IngressForAllNamespacesHandlerFunc(func(params networking_v1.ListNetworkingV1IngressForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ListNetworkingV1IngressForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1ListNetworkingV1NamespacedIngressHandler: networking_v1.ListNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.ListNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ListNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1ListNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.ListNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.ListNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ListNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1ListNetworkingV1NetworkPolicyForAllNamespacesHandler: networking_v1.ListNetworkingV1NetworkPolicyForAllNamespacesHandlerFunc(func(params networking_v1.ListNetworkingV1NetworkPolicyForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ListNetworkingV1NetworkPolicyForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1beta1ListNetworkingV1beta1IngressClassHandler: networking_v1beta1.ListNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.ListNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ListNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1ListNetworkingV1beta1IngressForAllNamespacesHandler: networking_v1beta1.ListNetworkingV1beta1IngressForAllNamespacesHandlerFunc(func(params networking_v1beta1.ListNetworkingV1beta1IngressForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ListNetworkingV1beta1IngressForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1beta1ListNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.ListNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.ListNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ListNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NodeV1alpha1ListNodeV1alpha1RuntimeClassHandler: node_v1alpha1.ListNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.ListNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.ListNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1ListNodeV1beta1RuntimeClassHandler: node_v1beta1.ListNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.ListNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.ListNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.ListPolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.ListPolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ListPolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler: policy_v1beta1.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandlerFunc(func(params policy_v1beta1.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces has not yet been implemented")
		}),
		PolicyV1beta1ListPolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.ListPolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.ListPolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ListPolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler: rbac_authorization_v1.ListRbacAuthorizationV1RoleBindingForAllNamespacesHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1RoleBindingForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1RoleBindingForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1ListRbacAuthorizationV1RoleForAllNamespacesHandler: rbac_authorization_v1.ListRbacAuthorizationV1RoleForAllNamespacesHandlerFunc(func(params rbac_authorization_v1.ListRbacAuthorizationV1RoleForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ListRbacAuthorizationV1RoleForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler: rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandlerFunc(func(params rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleBindingForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler: rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleForAllNamespacesHandlerFunc(func(params rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleForAllNamespaces has not yet been implemented")
		}),
		SchedulingV1ListSchedulingV1PriorityClassHandler: scheduling_v1.ListSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.ListSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.ListSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1ListSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.ListSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.ListSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.ListSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1ListSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.ListSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.ListSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.ListSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1ListSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.ListSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.ListSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.ListSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		SettingsV1alpha1ListSettingsV1alpha1PodPresetForAllNamespacesHandler: settings_v1alpha1.ListSettingsV1alpha1PodPresetForAllNamespacesHandlerFunc(func(params settings_v1alpha1.ListSettingsV1alpha1PodPresetForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.ListSettingsV1alpha1PodPresetForAllNamespaces has not yet been implemented")
		}),
		StorageV1ListStorageV1CSIDriverHandler: storage_v1.ListStorageV1CSIDriverHandlerFunc(func(params storage_v1.ListStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ListStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1ListStorageV1CSINodeHandler: storage_v1.ListStorageV1CSINodeHandlerFunc(func(params storage_v1.ListStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ListStorageV1CSINode has not yet been implemented")
		}),
		StorageV1ListStorageV1StorageClassHandler: storage_v1.ListStorageV1StorageClassHandlerFunc(func(params storage_v1.ListStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ListStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1ListStorageV1VolumeAttachmentHandler: storage_v1.ListStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.ListStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ListStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1alpha1ListStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.ListStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.ListStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.ListStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1ListStorageV1beta1CSIDriverHandler: storage_v1beta1.ListStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.ListStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ListStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1ListStorageV1beta1CSINodeHandler: storage_v1beta1.ListStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.ListStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ListStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1ListStorageV1beta1StorageClassHandler: storage_v1beta1.ListStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.ListStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ListStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1ListStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.ListStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.ListStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ListStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		LogsLogFileHandlerHandler: logs.LogFileHandlerHandlerFunc(func(params logs.LogFileHandlerParams) middleware.Responder {
			return middleware.NotImplemented("operation logs.LogFileHandler has not yet been implemented")
		}),
		LogsLogFileListHandlerHandler: logs.LogFileListHandlerHandlerFunc(func(params logs.LogFileListHandlerParams) middleware.Responder {
			return middleware.NotImplemented("operation logs.LogFileListHandler has not yet been implemented")
		}),
		AdmissionregistrationV1PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.PatchAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.PatchAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.PatchAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.PatchAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.PatchAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.PatchApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionStatusHandler: apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler: apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiregistrationV1PatchApiregistrationV1APIServiceHandler: apiregistration_v1.PatchApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.PatchApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.PatchApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1PatchApiregistrationV1APIServiceStatusHandler: apiregistration_v1.PatchApiregistrationV1APIServiceStatusHandlerFunc(func(params apiregistration_v1.PatchApiregistrationV1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.PatchApiregistrationV1APIServiceStatus has not yet been implemented")
		}),
		ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.PatchApiregistrationV1beta1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceStatusHandler: apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceStatusHandlerFunc(func(params apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceStatus has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedControllerRevisionHandler: apps_v1.PatchAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedDaemonSetHandler: apps_v1.PatchAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedDaemonSetStatusHandler: apps_v1.PatchAppsV1NamespacedDaemonSetStatusHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedDaemonSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedDaemonSetStatus has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedDeploymentHandler: apps_v1.PatchAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedDeploymentScaleHandler: apps_v1.PatchAppsV1NamespacedDeploymentScaleHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedDeploymentScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedDeploymentScale has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedDeploymentStatusHandler: apps_v1.PatchAppsV1NamespacedDeploymentStatusHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedDeploymentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedDeploymentStatus has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedReplicaSetHandler: apps_v1.PatchAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedReplicaSetScaleHandler: apps_v1.PatchAppsV1NamespacedReplicaSetScaleHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedReplicaSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedReplicaSetScale has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedReplicaSetStatusHandler: apps_v1.PatchAppsV1NamespacedReplicaSetStatusHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedReplicaSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedReplicaSetStatus has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedStatefulSetHandler: apps_v1.PatchAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedStatefulSetScaleHandler: apps_v1.PatchAppsV1NamespacedStatefulSetScaleHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedStatefulSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedStatefulSetScale has not yet been implemented")
		}),
		AppsV1PatchAppsV1NamespacedStatefulSetStatusHandler: apps_v1.PatchAppsV1NamespacedStatefulSetStatusHandlerFunc(func(params apps_v1.PatchAppsV1NamespacedStatefulSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.PatchAppsV1NamespacedStatefulSetStatus has not yet been implemented")
		}),
		AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		BatchV1PatchBatchV1NamespacedJobHandler: batch_v1.PatchBatchV1NamespacedJobHandlerFunc(func(params batch_v1.PatchBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.PatchBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1PatchBatchV1NamespacedJobStatusHandler: batch_v1.PatchBatchV1NamespacedJobStatusHandlerFunc(func(params batch_v1.PatchBatchV1NamespacedJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.PatchBatchV1NamespacedJobStatus has not yet been implemented")
		}),
		BatchV1beta1PatchBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.PatchBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.PatchBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.PatchBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV1beta1PatchBatchV1beta1NamespacedCronJobStatusHandler: batch_v1beta1.PatchBatchV1beta1NamespacedCronJobStatusHandlerFunc(func(params batch_v1beta1.PatchBatchV1beta1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.PatchBatchV1beta1NamespacedCronJobStatus has not yet been implemented")
		}),
		BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobStatusHandler: batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobStatusHandlerFunc(func(params batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobStatus has not yet been implemented")
		}),
		CertificatesV1PatchCertificatesV1CertificateSigningRequestHandler: certificates_v1.PatchCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.PatchCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.PatchCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1PatchCertificatesV1CertificateSigningRequestApprovalHandler: certificates_v1.PatchCertificatesV1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1.PatchCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.PatchCertificatesV1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1PatchCertificatesV1CertificateSigningRequestStatusHandler: certificates_v1.PatchCertificatesV1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1.PatchCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.PatchCertificatesV1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler: certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestStatusHandler: certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CoordinationV1PatchCoordinationV1NamespacedLeaseHandler: coordination_v1.PatchCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.PatchCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.PatchCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1PatchCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.PatchCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.PatchCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.PatchCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespaceHandler: core_v1.PatchCoreV1NamespaceHandlerFunc(func(params core_v1.PatchCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1Namespace has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespaceStatusHandler: core_v1.PatchCoreV1NamespaceStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespaceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespaceStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedConfigMapHandler: core_v1.PatchCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.PatchCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedEndpointsHandler: core_v1.PatchCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.PatchCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedEventHandler: core_v1.PatchCoreV1NamespacedEventHandlerFunc(func(params core_v1.PatchCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedLimitRangeHandler: core_v1.PatchCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.PatchCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.PatchCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.PatchCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler: core_v1.PatchCoreV1NamespacedPersistentVolumeClaimStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespacedPersistentVolumeClaimStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedPersistentVolumeClaimStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedPodHandler: core_v1.PatchCoreV1NamespacedPodHandlerFunc(func(params core_v1.PatchCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedPodStatusHandler: core_v1.PatchCoreV1NamespacedPodStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespacedPodStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedPodStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedPodTemplateHandler: core_v1.PatchCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.PatchCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedReplicationControllerHandler: core_v1.PatchCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.PatchCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedReplicationControllerScaleHandler: core_v1.PatchCoreV1NamespacedReplicationControllerScaleHandlerFunc(func(params core_v1.PatchCoreV1NamespacedReplicationControllerScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedReplicationControllerScale has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedReplicationControllerStatusHandler: core_v1.PatchCoreV1NamespacedReplicationControllerStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespacedReplicationControllerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedReplicationControllerStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedResourceQuotaHandler: core_v1.PatchCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.PatchCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedResourceQuotaStatusHandler: core_v1.PatchCoreV1NamespacedResourceQuotaStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespacedResourceQuotaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedResourceQuotaStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedSecretHandler: core_v1.PatchCoreV1NamespacedSecretHandlerFunc(func(params core_v1.PatchCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedServiceHandler: core_v1.PatchCoreV1NamespacedServiceHandlerFunc(func(params core_v1.PatchCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedServiceAccountHandler: core_v1.PatchCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.PatchCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1PatchCoreV1NamespacedServiceStatusHandler: core_v1.PatchCoreV1NamespacedServiceStatusHandlerFunc(func(params core_v1.PatchCoreV1NamespacedServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NamespacedServiceStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1NodeHandler: core_v1.PatchCoreV1NodeHandlerFunc(func(params core_v1.PatchCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1Node has not yet been implemented")
		}),
		CoreV1PatchCoreV1NodeStatusHandler: core_v1.PatchCoreV1NodeStatusHandlerFunc(func(params core_v1.PatchCoreV1NodeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1NodeStatus has not yet been implemented")
		}),
		CoreV1PatchCoreV1PersistentVolumeHandler: core_v1.PatchCoreV1PersistentVolumeHandlerFunc(func(params core_v1.PatchCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1PersistentVolume has not yet been implemented")
		}),
		CoreV1PatchCoreV1PersistentVolumeStatusHandler: core_v1.PatchCoreV1PersistentVolumeStatusHandlerFunc(func(params core_v1.PatchCoreV1PersistentVolumeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.PatchCoreV1PersistentVolumeStatus has not yet been implemented")
		}),
		DiscoveryV1beta1PatchDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.PatchDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.PatchDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.PatchDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1PatchEventsV1NamespacedEventHandler: events_v1.PatchEventsV1NamespacedEventHandlerFunc(func(params events_v1.PatchEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.PatchEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1PatchEventsV1beta1NamespacedEventHandler: events_v1beta1.PatchEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.PatchEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.PatchEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressStatusHandler: extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressStatusHandlerFunc(func(params extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler: flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler: flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus has not yet been implemented")
		}),
		NetworkingV1PatchNetworkingV1IngressClassHandler: networking_v1.PatchNetworkingV1IngressClassHandlerFunc(func(params networking_v1.PatchNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.PatchNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1PatchNetworkingV1NamespacedIngressHandler: networking_v1.PatchNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.PatchNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.PatchNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1PatchNetworkingV1NamespacedIngressStatusHandler: networking_v1.PatchNetworkingV1NamespacedIngressStatusHandlerFunc(func(params networking_v1.PatchNetworkingV1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.PatchNetworkingV1NamespacedIngressStatus has not yet been implemented")
		}),
		NetworkingV1PatchNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.PatchNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.PatchNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.PatchNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1beta1PatchNetworkingV1beta1IngressClassHandler: networking_v1beta1.PatchNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.PatchNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.PatchNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.PatchNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressStatusHandler: networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressStatusHandlerFunc(func(params networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		NodeV1alpha1PatchNodeV1alpha1RuntimeClassHandler: node_v1alpha1.PatchNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.PatchNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.PatchNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1PatchNodeV1beta1RuntimeClassHandler: node_v1beta1.PatchNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.PatchNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.PatchNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler: policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandlerFunc(func(params policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus has not yet been implemented")
		}),
		PolicyV1beta1PatchPolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.PatchPolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.PatchPolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.PatchPolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		SchedulingV1PatchSchedulingV1PriorityClassHandler: scheduling_v1.PatchSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.PatchSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.PatchSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1PatchSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.PatchSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.PatchSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.PatchSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1PatchSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.PatchSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.PatchSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.PatchSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1PatchSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.PatchSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.PatchSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.PatchSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		StorageV1PatchStorageV1CSIDriverHandler: storage_v1.PatchStorageV1CSIDriverHandlerFunc(func(params storage_v1.PatchStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.PatchStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1PatchStorageV1CSINodeHandler: storage_v1.PatchStorageV1CSINodeHandlerFunc(func(params storage_v1.PatchStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.PatchStorageV1CSINode has not yet been implemented")
		}),
		StorageV1PatchStorageV1StorageClassHandler: storage_v1.PatchStorageV1StorageClassHandlerFunc(func(params storage_v1.PatchStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.PatchStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1PatchStorageV1VolumeAttachmentHandler: storage_v1.PatchStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.PatchStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.PatchStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1PatchStorageV1VolumeAttachmentStatusHandler: storage_v1.PatchStorageV1VolumeAttachmentStatusHandlerFunc(func(params storage_v1.PatchStorageV1VolumeAttachmentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.PatchStorageV1VolumeAttachmentStatus has not yet been implemented")
		}),
		StorageV1alpha1PatchStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.PatchStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.PatchStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.PatchStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1PatchStorageV1beta1CSIDriverHandler: storage_v1beta1.PatchStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.PatchStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.PatchStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1PatchStorageV1beta1CSINodeHandler: storage_v1beta1.PatchStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.PatchStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.PatchStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1PatchStorageV1beta1StorageClassHandler: storage_v1beta1.PatchStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.PatchStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.PatchStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1PatchStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.PatchStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.PatchStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.PatchStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		AdmissionregistrationV1ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.ReadAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ReadAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ReadAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ReadAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.ReadApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionStatusHandler: apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler: apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiregistrationV1ReadApiregistrationV1APIServiceHandler: apiregistration_v1.ReadApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.ReadApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.ReadApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1ReadApiregistrationV1APIServiceStatusHandler: apiregistration_v1.ReadApiregistrationV1APIServiceStatusHandlerFunc(func(params apiregistration_v1.ReadApiregistrationV1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.ReadApiregistrationV1APIServiceStatus has not yet been implemented")
		}),
		ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.ReadApiregistrationV1beta1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceStatusHandler: apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceStatusHandlerFunc(func(params apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceStatus has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedControllerRevisionHandler: apps_v1.ReadAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedDaemonSetHandler: apps_v1.ReadAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedDaemonSetStatusHandler: apps_v1.ReadAppsV1NamespacedDaemonSetStatusHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedDaemonSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedDaemonSetStatus has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedDeploymentHandler: apps_v1.ReadAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedDeploymentScaleHandler: apps_v1.ReadAppsV1NamespacedDeploymentScaleHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedDeploymentScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedDeploymentScale has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedDeploymentStatusHandler: apps_v1.ReadAppsV1NamespacedDeploymentStatusHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedDeploymentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedDeploymentStatus has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedReplicaSetHandler: apps_v1.ReadAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedReplicaSetScaleHandler: apps_v1.ReadAppsV1NamespacedReplicaSetScaleHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedReplicaSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedReplicaSetScale has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedReplicaSetStatusHandler: apps_v1.ReadAppsV1NamespacedReplicaSetStatusHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedReplicaSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedReplicaSetStatus has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedStatefulSetHandler: apps_v1.ReadAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedStatefulSetScaleHandler: apps_v1.ReadAppsV1NamespacedStatefulSetScaleHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedStatefulSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedStatefulSetScale has not yet been implemented")
		}),
		AppsV1ReadAppsV1NamespacedStatefulSetStatusHandler: apps_v1.ReadAppsV1NamespacedStatefulSetStatusHandlerFunc(func(params apps_v1.ReadAppsV1NamespacedStatefulSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReadAppsV1NamespacedStatefulSetStatus has not yet been implemented")
		}),
		AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		BatchV1ReadBatchV1NamespacedJobHandler: batch_v1.ReadBatchV1NamespacedJobHandlerFunc(func(params batch_v1.ReadBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ReadBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1ReadBatchV1NamespacedJobStatusHandler: batch_v1.ReadBatchV1NamespacedJobStatusHandlerFunc(func(params batch_v1.ReadBatchV1NamespacedJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ReadBatchV1NamespacedJobStatus has not yet been implemented")
		}),
		BatchV1beta1ReadBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.ReadBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.ReadBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ReadBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV1beta1ReadBatchV1beta1NamespacedCronJobStatusHandler: batch_v1beta1.ReadBatchV1beta1NamespacedCronJobStatusHandlerFunc(func(params batch_v1beta1.ReadBatchV1beta1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ReadBatchV1beta1NamespacedCronJobStatus has not yet been implemented")
		}),
		BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobStatusHandler: batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobStatusHandlerFunc(func(params batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobStatus has not yet been implemented")
		}),
		CertificatesV1ReadCertificatesV1CertificateSigningRequestHandler: certificates_v1.ReadCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.ReadCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReadCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1ReadCertificatesV1CertificateSigningRequestApprovalHandler: certificates_v1.ReadCertificatesV1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1.ReadCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReadCertificatesV1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1ReadCertificatesV1CertificateSigningRequestStatusHandler: certificates_v1.ReadCertificatesV1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1.ReadCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReadCertificatesV1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler: certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestStatusHandler: certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CoordinationV1ReadCoordinationV1NamespacedLeaseHandler: coordination_v1.ReadCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.ReadCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.ReadCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1ReadCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.ReadCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.ReadCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.ReadCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1ReadCoreV1ComponentStatusHandler: core_v1.ReadCoreV1ComponentStatusHandlerFunc(func(params core_v1.ReadCoreV1ComponentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1ComponentStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespaceHandler: core_v1.ReadCoreV1NamespaceHandlerFunc(func(params core_v1.ReadCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1Namespace has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespaceStatusHandler: core_v1.ReadCoreV1NamespaceStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespaceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespaceStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedConfigMapHandler: core_v1.ReadCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.ReadCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedEndpointsHandler: core_v1.ReadCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.ReadCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedEventHandler: core_v1.ReadCoreV1NamespacedEventHandlerFunc(func(params core_v1.ReadCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedLimitRangeHandler: core_v1.ReadCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.ReadCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.ReadCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler: core_v1.ReadCoreV1NamespacedPersistentVolumeClaimStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPersistentVolumeClaimStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPersistentVolumeClaimStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPodHandler: core_v1.ReadCoreV1NamespacedPodHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPodLogHandler: core_v1.ReadCoreV1NamespacedPodLogHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPodLogParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPodLog has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPodStatusHandler: core_v1.ReadCoreV1NamespacedPodStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPodStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPodStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedPodTemplateHandler: core_v1.ReadCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.ReadCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedReplicationControllerHandler: core_v1.ReadCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.ReadCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedReplicationControllerScaleHandler: core_v1.ReadCoreV1NamespacedReplicationControllerScaleHandlerFunc(func(params core_v1.ReadCoreV1NamespacedReplicationControllerScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedReplicationControllerScale has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedReplicationControllerStatusHandler: core_v1.ReadCoreV1NamespacedReplicationControllerStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespacedReplicationControllerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedReplicationControllerStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedResourceQuotaHandler: core_v1.ReadCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.ReadCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedResourceQuotaStatusHandler: core_v1.ReadCoreV1NamespacedResourceQuotaStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespacedResourceQuotaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedResourceQuotaStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedSecretHandler: core_v1.ReadCoreV1NamespacedSecretHandlerFunc(func(params core_v1.ReadCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedServiceHandler: core_v1.ReadCoreV1NamespacedServiceHandlerFunc(func(params core_v1.ReadCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedServiceAccountHandler: core_v1.ReadCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.ReadCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1ReadCoreV1NamespacedServiceStatusHandler: core_v1.ReadCoreV1NamespacedServiceStatusHandlerFunc(func(params core_v1.ReadCoreV1NamespacedServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NamespacedServiceStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1NodeHandler: core_v1.ReadCoreV1NodeHandlerFunc(func(params core_v1.ReadCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1Node has not yet been implemented")
		}),
		CoreV1ReadCoreV1NodeStatusHandler: core_v1.ReadCoreV1NodeStatusHandlerFunc(func(params core_v1.ReadCoreV1NodeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1NodeStatus has not yet been implemented")
		}),
		CoreV1ReadCoreV1PersistentVolumeHandler: core_v1.ReadCoreV1PersistentVolumeHandlerFunc(func(params core_v1.ReadCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1PersistentVolume has not yet been implemented")
		}),
		CoreV1ReadCoreV1PersistentVolumeStatusHandler: core_v1.ReadCoreV1PersistentVolumeStatusHandlerFunc(func(params core_v1.ReadCoreV1PersistentVolumeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReadCoreV1PersistentVolumeStatus has not yet been implemented")
		}),
		DiscoveryV1beta1ReadDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.ReadDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.ReadDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.ReadDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1ReadEventsV1NamespacedEventHandler: events_v1.ReadEventsV1NamespacedEventHandlerFunc(func(params events_v1.ReadEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.ReadEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1ReadEventsV1beta1NamespacedEventHandler: events_v1beta1.ReadEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.ReadEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.ReadEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressStatusHandler: extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressStatusHandlerFunc(func(params extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler: flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler: flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus has not yet been implemented")
		}),
		NetworkingV1ReadNetworkingV1IngressClassHandler: networking_v1.ReadNetworkingV1IngressClassHandlerFunc(func(params networking_v1.ReadNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReadNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1ReadNetworkingV1NamespacedIngressHandler: networking_v1.ReadNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.ReadNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReadNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1ReadNetworkingV1NamespacedIngressStatusHandler: networking_v1.ReadNetworkingV1NamespacedIngressStatusHandlerFunc(func(params networking_v1.ReadNetworkingV1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReadNetworkingV1NamespacedIngressStatus has not yet been implemented")
		}),
		NetworkingV1ReadNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.ReadNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.ReadNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReadNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1beta1ReadNetworkingV1beta1IngressClassHandler: networking_v1beta1.ReadNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.ReadNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReadNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReadNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressStatusHandler: networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressStatusHandlerFunc(func(params networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		NodeV1alpha1ReadNodeV1alpha1RuntimeClassHandler: node_v1alpha1.ReadNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.ReadNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.ReadNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1ReadNodeV1beta1RuntimeClassHandler: node_v1beta1.ReadNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.ReadNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.ReadNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler: policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandlerFunc(func(params policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus has not yet been implemented")
		}),
		PolicyV1beta1ReadPolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.ReadPolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.ReadPolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReadPolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		SchedulingV1ReadSchedulingV1PriorityClassHandler: scheduling_v1.ReadSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.ReadSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.ReadSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1ReadSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.ReadSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.ReadSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.ReadSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1ReadSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.ReadSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.ReadSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.ReadSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1ReadSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.ReadSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.ReadSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.ReadSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		StorageV1ReadStorageV1CSIDriverHandler: storage_v1.ReadStorageV1CSIDriverHandlerFunc(func(params storage_v1.ReadStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReadStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1ReadStorageV1CSINodeHandler: storage_v1.ReadStorageV1CSINodeHandlerFunc(func(params storage_v1.ReadStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReadStorageV1CSINode has not yet been implemented")
		}),
		StorageV1ReadStorageV1StorageClassHandler: storage_v1.ReadStorageV1StorageClassHandlerFunc(func(params storage_v1.ReadStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReadStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1ReadStorageV1VolumeAttachmentHandler: storage_v1.ReadStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.ReadStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReadStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1ReadStorageV1VolumeAttachmentStatusHandler: storage_v1.ReadStorageV1VolumeAttachmentStatusHandlerFunc(func(params storage_v1.ReadStorageV1VolumeAttachmentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReadStorageV1VolumeAttachmentStatus has not yet been implemented")
		}),
		StorageV1alpha1ReadStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.ReadStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.ReadStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.ReadStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1ReadStorageV1beta1CSIDriverHandler: storage_v1beta1.ReadStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.ReadStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReadStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1ReadStorageV1beta1CSINodeHandler: storage_v1beta1.ReadStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.ReadStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReadStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1ReadStorageV1beta1StorageClassHandler: storage_v1beta1.ReadStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.ReadStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReadStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1ReadStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.ReadStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.ReadStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReadStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		AdmissionregistrationV1ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ReplaceAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ReplaceAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.ReplaceAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler: apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler: apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandlerFunc(func(params apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatus has not yet been implemented")
		}),
		ApiregistrationV1ReplaceApiregistrationV1APIServiceHandler: apiregistration_v1.ReplaceApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.ReplaceApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.ReplaceApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1ReplaceApiregistrationV1APIServiceStatusHandler: apiregistration_v1.ReplaceApiregistrationV1APIServiceStatusHandlerFunc(func(params apiregistration_v1.ReplaceApiregistrationV1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.ReplaceApiregistrationV1APIServiceStatus has not yet been implemented")
		}),
		ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceStatusHandler: apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceStatusHandlerFunc(func(params apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceStatus has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedControllerRevisionHandler: apps_v1.ReplaceAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedDaemonSetHandler: apps_v1.ReplaceAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedDaemonSetStatusHandler: apps_v1.ReplaceAppsV1NamespacedDaemonSetStatusHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedDaemonSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedDaemonSetStatus has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedDeploymentHandler: apps_v1.ReplaceAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedDeploymentScaleHandler: apps_v1.ReplaceAppsV1NamespacedDeploymentScaleHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedDeploymentScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedDeploymentScale has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedDeploymentStatusHandler: apps_v1.ReplaceAppsV1NamespacedDeploymentStatusHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedDeploymentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedDeploymentStatus has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedReplicaSetHandler: apps_v1.ReplaceAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedReplicaSetScaleHandler: apps_v1.ReplaceAppsV1NamespacedReplicaSetScaleHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedReplicaSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedReplicaSetScale has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedReplicaSetStatusHandler: apps_v1.ReplaceAppsV1NamespacedReplicaSetStatusHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedReplicaSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedReplicaSetStatus has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedStatefulSetHandler: apps_v1.ReplaceAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedStatefulSetScaleHandler: apps_v1.ReplaceAppsV1NamespacedStatefulSetScaleHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedStatefulSetScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedStatefulSetScale has not yet been implemented")
		}),
		AppsV1ReplaceAppsV1NamespacedStatefulSetStatusHandler: apps_v1.ReplaceAppsV1NamespacedStatefulSetStatusHandlerFunc(func(params apps_v1.ReplaceAppsV1NamespacedStatefulSetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.ReplaceAppsV1NamespacedStatefulSetStatus has not yet been implemented")
		}),
		AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler: autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandlerFunc(func(params autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus has not yet been implemented")
		}),
		BatchV1ReplaceBatchV1NamespacedJobHandler: batch_v1.ReplaceBatchV1NamespacedJobHandlerFunc(func(params batch_v1.ReplaceBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ReplaceBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1ReplaceBatchV1NamespacedJobStatusHandler: batch_v1.ReplaceBatchV1NamespacedJobStatusHandlerFunc(func(params batch_v1.ReplaceBatchV1NamespacedJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.ReplaceBatchV1NamespacedJobStatus has not yet been implemented")
		}),
		BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobStatusHandler: batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobStatusHandlerFunc(func(params batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobStatus has not yet been implemented")
		}),
		BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobStatusHandler: batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobStatusHandlerFunc(func(params batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobStatus has not yet been implemented")
		}),
		CertificatesV1ReplaceCertificatesV1CertificateSigningRequestHandler: certificates_v1.ReplaceCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.ReplaceCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReplaceCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1ReplaceCertificatesV1CertificateSigningRequestApprovalHandler: certificates_v1.ReplaceCertificatesV1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1.ReplaceCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReplaceCertificatesV1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1ReplaceCertificatesV1CertificateSigningRequestStatusHandler: certificates_v1.ReplaceCertificatesV1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1.ReplaceCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.ReplaceCertificatesV1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler: certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandlerFunc(func(params certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestApproval has not yet been implemented")
		}),
		CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler: certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandlerFunc(func(params certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestStatus has not yet been implemented")
		}),
		CoordinationV1ReplaceCoordinationV1NamespacedLeaseHandler: coordination_v1.ReplaceCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.ReplaceCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.ReplaceCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1ReplaceCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.ReplaceCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.ReplaceCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.ReplaceCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespaceHandler: core_v1.ReplaceCoreV1NamespaceHandlerFunc(func(params core_v1.ReplaceCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1Namespace has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespaceFinalizeHandler: core_v1.ReplaceCoreV1NamespaceFinalizeHandlerFunc(func(params core_v1.ReplaceCoreV1NamespaceFinalizeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespaceFinalize has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespaceStatusHandler: core_v1.ReplaceCoreV1NamespaceStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespaceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespaceStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedConfigMapHandler: core_v1.ReplaceCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedEndpointsHandler: core_v1.ReplaceCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedEventHandler: core_v1.ReplaceCoreV1NamespacedEventHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedLimitRangeHandler: core_v1.ReplaceCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler: core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedPodHandler: core_v1.ReplaceCoreV1NamespacedPodHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedPodStatusHandler: core_v1.ReplaceCoreV1NamespacedPodStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedPodStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedPodStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedPodTemplateHandler: core_v1.ReplaceCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedReplicationControllerHandler: core_v1.ReplaceCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedReplicationControllerScaleHandler: core_v1.ReplaceCoreV1NamespacedReplicationControllerScaleHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedReplicationControllerScaleParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedReplicationControllerScale has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedReplicationControllerStatusHandler: core_v1.ReplaceCoreV1NamespacedReplicationControllerStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedReplicationControllerStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedReplicationControllerStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedResourceQuotaHandler: core_v1.ReplaceCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedResourceQuotaStatusHandler: core_v1.ReplaceCoreV1NamespacedResourceQuotaStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedResourceQuotaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedResourceQuotaStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedSecretHandler: core_v1.ReplaceCoreV1NamespacedSecretHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedServiceHandler: core_v1.ReplaceCoreV1NamespacedServiceHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedServiceAccountHandler: core_v1.ReplaceCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NamespacedServiceStatusHandler: core_v1.ReplaceCoreV1NamespacedServiceStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NamespacedServiceStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NamespacedServiceStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NodeHandler: core_v1.ReplaceCoreV1NodeHandlerFunc(func(params core_v1.ReplaceCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1Node has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1NodeStatusHandler: core_v1.ReplaceCoreV1NodeStatusHandlerFunc(func(params core_v1.ReplaceCoreV1NodeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1NodeStatus has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1PersistentVolumeHandler: core_v1.ReplaceCoreV1PersistentVolumeHandlerFunc(func(params core_v1.ReplaceCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1PersistentVolume has not yet been implemented")
		}),
		CoreV1ReplaceCoreV1PersistentVolumeStatusHandler: core_v1.ReplaceCoreV1PersistentVolumeStatusHandlerFunc(func(params core_v1.ReplaceCoreV1PersistentVolumeStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.ReplaceCoreV1PersistentVolumeStatus has not yet been implemented")
		}),
		DiscoveryV1beta1ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.ReplaceDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.ReplaceDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		EventsV1ReplaceEventsV1NamespacedEventHandler: events_v1.ReplaceEventsV1NamespacedEventHandlerFunc(func(params events_v1.ReplaceEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.ReplaceEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1ReplaceEventsV1beta1NamespacedEventHandler: events_v1beta1.ReplaceEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.ReplaceEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.ReplaceEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressStatusHandler: extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressStatusHandlerFunc(func(params extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler: flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatus has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler: flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus has not yet been implemented")
		}),
		NetworkingV1ReplaceNetworkingV1IngressClassHandler: networking_v1.ReplaceNetworkingV1IngressClassHandlerFunc(func(params networking_v1.ReplaceNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReplaceNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1ReplaceNetworkingV1NamespacedIngressHandler: networking_v1.ReplaceNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.ReplaceNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReplaceNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1ReplaceNetworkingV1NamespacedIngressStatusHandler: networking_v1.ReplaceNetworkingV1NamespacedIngressStatusHandlerFunc(func(params networking_v1.ReplaceNetworkingV1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReplaceNetworkingV1NamespacedIngressStatus has not yet been implemented")
		}),
		NetworkingV1ReplaceNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.ReplaceNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.ReplaceNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.ReplaceNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1beta1ReplaceNetworkingV1beta1IngressClassHandler: networking_v1beta1.ReplaceNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.ReplaceNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReplaceNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressStatusHandler: networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressStatusHandlerFunc(func(params networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressStatus has not yet been implemented")
		}),
		NodeV1alpha1ReplaceNodeV1alpha1RuntimeClassHandler: node_v1alpha1.ReplaceNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.ReplaceNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.ReplaceNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1ReplaceNodeV1beta1RuntimeClassHandler: node_v1beta1.ReplaceNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.ReplaceNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.ReplaceNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler: policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandlerFunc(func(params policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus has not yet been implemented")
		}),
		PolicyV1beta1ReplacePolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.ReplacePolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.ReplacePolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.ReplacePolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		SchedulingV1ReplaceSchedulingV1PriorityClassHandler: scheduling_v1.ReplaceSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.ReplaceSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.ReplaceSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1ReplaceSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.ReplaceSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.ReplaceSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.ReplaceSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1ReplaceSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.ReplaceSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.ReplaceSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.ReplaceSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SettingsV1alpha1ReplaceSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.ReplaceSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.ReplaceSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.ReplaceSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		StorageV1ReplaceStorageV1CSIDriverHandler: storage_v1.ReplaceStorageV1CSIDriverHandlerFunc(func(params storage_v1.ReplaceStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReplaceStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1ReplaceStorageV1CSINodeHandler: storage_v1.ReplaceStorageV1CSINodeHandlerFunc(func(params storage_v1.ReplaceStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReplaceStorageV1CSINode has not yet been implemented")
		}),
		StorageV1ReplaceStorageV1StorageClassHandler: storage_v1.ReplaceStorageV1StorageClassHandlerFunc(func(params storage_v1.ReplaceStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReplaceStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1ReplaceStorageV1VolumeAttachmentHandler: storage_v1.ReplaceStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.ReplaceStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReplaceStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1ReplaceStorageV1VolumeAttachmentStatusHandler: storage_v1.ReplaceStorageV1VolumeAttachmentStatusHandlerFunc(func(params storage_v1.ReplaceStorageV1VolumeAttachmentStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.ReplaceStorageV1VolumeAttachmentStatus has not yet been implemented")
		}),
		StorageV1alpha1ReplaceStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.ReplaceStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.ReplaceStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.ReplaceStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1ReplaceStorageV1beta1CSIDriverHandler: storage_v1beta1.ReplaceStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.ReplaceStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReplaceStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1ReplaceStorageV1beta1CSINodeHandler: storage_v1beta1.ReplaceStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.ReplaceStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReplaceStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1ReplaceStorageV1beta1StorageClassHandler: storage_v1beta1.ReplaceStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.ReplaceStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReplaceStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1ReplaceStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.ReplaceStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.ReplaceStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.ReplaceStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler: admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler: admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandlerFunc(func(params admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationList has not yet been implemented")
		}),
		AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler: admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler: admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandlerFunc(func(params admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationList has not yet been implemented")
		}),
		AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler: admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler: admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandlerFunc(func(params admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationList has not yet been implemented")
		}),
		AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler: admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandlerFunc(func(params admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfiguration has not yet been implemented")
		}),
		AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler: admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandlerFunc(func(params admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListParams) middleware.Responder {
			return middleware.NotImplemented("operation admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList has not yet been implemented")
		}),
		ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionHandler: apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.WatchApiextensionsV1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionListHandler: apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionListHandlerFunc(func(params apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionListParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionList has not yet been implemented")
		}),
		ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionHandler: apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionHandlerFunc(func(params apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinition has not yet been implemented")
		}),
		ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionListHandler: apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionListHandlerFunc(func(params apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionListParams) middleware.Responder {
			return middleware.NotImplemented("operation apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionList has not yet been implemented")
		}),
		ApiregistrationV1WatchApiregistrationV1APIServiceHandler: apiregistration_v1.WatchApiregistrationV1APIServiceHandlerFunc(func(params apiregistration_v1.WatchApiregistrationV1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.WatchApiregistrationV1APIService has not yet been implemented")
		}),
		ApiregistrationV1WatchApiregistrationV1APIServiceListHandler: apiregistration_v1.WatchApiregistrationV1APIServiceListHandlerFunc(func(params apiregistration_v1.WatchApiregistrationV1APIServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1.WatchApiregistrationV1APIServiceList has not yet been implemented")
		}),
		ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceHandler: apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceHandlerFunc(func(params apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.WatchApiregistrationV1beta1APIService has not yet been implemented")
		}),
		ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceListHandler: apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceListHandlerFunc(func(params apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceList has not yet been implemented")
		}),
		AppsV1WatchAppsV1ControllerRevisionListForAllNamespacesHandler: apps_v1.WatchAppsV1ControllerRevisionListForAllNamespacesHandlerFunc(func(params apps_v1.WatchAppsV1ControllerRevisionListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1ControllerRevisionListForAllNamespaces has not yet been implemented")
		}),
		AppsV1WatchAppsV1DaemonSetListForAllNamespacesHandler: apps_v1.WatchAppsV1DaemonSetListForAllNamespacesHandlerFunc(func(params apps_v1.WatchAppsV1DaemonSetListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1DaemonSetListForAllNamespaces has not yet been implemented")
		}),
		AppsV1WatchAppsV1DeploymentListForAllNamespacesHandler: apps_v1.WatchAppsV1DeploymentListForAllNamespacesHandlerFunc(func(params apps_v1.WatchAppsV1DeploymentListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1DeploymentListForAllNamespaces has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedControllerRevisionHandler: apps_v1.WatchAppsV1NamespacedControllerRevisionHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedControllerRevisionParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedControllerRevision has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedControllerRevisionListHandler: apps_v1.WatchAppsV1NamespacedControllerRevisionListHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedControllerRevisionListParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedControllerRevisionList has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedDaemonSetHandler: apps_v1.WatchAppsV1NamespacedDaemonSetHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedDaemonSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedDaemonSet has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedDaemonSetListHandler: apps_v1.WatchAppsV1NamespacedDaemonSetListHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedDaemonSetListParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedDaemonSetList has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedDeploymentHandler: apps_v1.WatchAppsV1NamespacedDeploymentHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedDeployment has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedDeploymentListHandler: apps_v1.WatchAppsV1NamespacedDeploymentListHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedDeploymentListParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedDeploymentList has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedReplicaSetHandler: apps_v1.WatchAppsV1NamespacedReplicaSetHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedReplicaSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedReplicaSet has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedReplicaSetListHandler: apps_v1.WatchAppsV1NamespacedReplicaSetListHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedReplicaSetListParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedReplicaSetList has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedStatefulSetHandler: apps_v1.WatchAppsV1NamespacedStatefulSetHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedStatefulSetParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedStatefulSet has not yet been implemented")
		}),
		AppsV1WatchAppsV1NamespacedStatefulSetListHandler: apps_v1.WatchAppsV1NamespacedStatefulSetListHandlerFunc(func(params apps_v1.WatchAppsV1NamespacedStatefulSetListParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1NamespacedStatefulSetList has not yet been implemented")
		}),
		AppsV1WatchAppsV1ReplicaSetListForAllNamespacesHandler: apps_v1.WatchAppsV1ReplicaSetListForAllNamespacesHandlerFunc(func(params apps_v1.WatchAppsV1ReplicaSetListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1ReplicaSetListForAllNamespaces has not yet been implemented")
		}),
		AppsV1WatchAppsV1StatefulSetListForAllNamespacesHandler: apps_v1.WatchAppsV1StatefulSetListForAllNamespacesHandlerFunc(func(params apps_v1.WatchAppsV1StatefulSetListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation apps_v1.WatchAppsV1StatefulSetListForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV1WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler: autoscaling_v1.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandlerFunc(func(params autoscaling_v1.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler: autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandlerFunc(func(params autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList has not yet been implemented")
		}),
		AutoscalingV2beta1WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler: autoscaling_v2beta1.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandlerFunc(func(params autoscaling_v2beta1.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler: autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandlerFunc(func(params autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList has not yet been implemented")
		}),
		AutoscalingV2beta2WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler: autoscaling_v2beta2.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandlerFunc(func(params autoscaling_v2beta2.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces has not yet been implemented")
		}),
		AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler: autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandlerFunc(func(params autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler has not yet been implemented")
		}),
		AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler: autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandlerFunc(func(params autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams) middleware.Responder {
			return middleware.NotImplemented("operation autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList has not yet been implemented")
		}),
		BatchV1WatchBatchV1JobListForAllNamespacesHandler: batch_v1.WatchBatchV1JobListForAllNamespacesHandlerFunc(func(params batch_v1.WatchBatchV1JobListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.WatchBatchV1JobListForAllNamespaces has not yet been implemented")
		}),
		BatchV1WatchBatchV1NamespacedJobHandler: batch_v1.WatchBatchV1NamespacedJobHandlerFunc(func(params batch_v1.WatchBatchV1NamespacedJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.WatchBatchV1NamespacedJob has not yet been implemented")
		}),
		BatchV1WatchBatchV1NamespacedJobListHandler: batch_v1.WatchBatchV1NamespacedJobListHandlerFunc(func(params batch_v1.WatchBatchV1NamespacedJobListParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1.WatchBatchV1NamespacedJobList has not yet been implemented")
		}),
		BatchV1beta1WatchBatchV1beta1CronJobListForAllNamespacesHandler: batch_v1beta1.WatchBatchV1beta1CronJobListForAllNamespacesHandlerFunc(func(params batch_v1beta1.WatchBatchV1beta1CronJobListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.WatchBatchV1beta1CronJobListForAllNamespaces has not yet been implemented")
		}),
		BatchV1beta1WatchBatchV1beta1NamespacedCronJobHandler: batch_v1beta1.WatchBatchV1beta1NamespacedCronJobHandlerFunc(func(params batch_v1beta1.WatchBatchV1beta1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.WatchBatchV1beta1NamespacedCronJob has not yet been implemented")
		}),
		BatchV1beta1WatchBatchV1beta1NamespacedCronJobListHandler: batch_v1beta1.WatchBatchV1beta1NamespacedCronJobListHandlerFunc(func(params batch_v1beta1.WatchBatchV1beta1NamespacedCronJobListParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v1beta1.WatchBatchV1beta1NamespacedCronJobList has not yet been implemented")
		}),
		BatchV2alpha1WatchBatchV2alpha1CronJobListForAllNamespacesHandler: batch_v2alpha1.WatchBatchV2alpha1CronJobListForAllNamespacesHandlerFunc(func(params batch_v2alpha1.WatchBatchV2alpha1CronJobListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.WatchBatchV2alpha1CronJobListForAllNamespaces has not yet been implemented")
		}),
		BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobHandler: batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobHandlerFunc(func(params batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJob has not yet been implemented")
		}),
		BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobListHandler: batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobListHandlerFunc(func(params batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobListParams) middleware.Responder {
			return middleware.NotImplemented("operation batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobList has not yet been implemented")
		}),
		CertificatesV1WatchCertificatesV1CertificateSigningRequestHandler: certificates_v1.WatchCertificatesV1CertificateSigningRequestHandlerFunc(func(params certificates_v1.WatchCertificatesV1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.WatchCertificatesV1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1WatchCertificatesV1CertificateSigningRequestListHandler: certificates_v1.WatchCertificatesV1CertificateSigningRequestListHandlerFunc(func(params certificates_v1.WatchCertificatesV1CertificateSigningRequestListParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1.WatchCertificatesV1CertificateSigningRequestList has not yet been implemented")
		}),
		CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestHandler: certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestHandlerFunc(func(params certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequest has not yet been implemented")
		}),
		CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestListHandler: certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestListHandlerFunc(func(params certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestListParams) middleware.Responder {
			return middleware.NotImplemented("operation certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestList has not yet been implemented")
		}),
		CoordinationV1WatchCoordinationV1LeaseListForAllNamespacesHandler: coordination_v1.WatchCoordinationV1LeaseListForAllNamespacesHandlerFunc(func(params coordination_v1.WatchCoordinationV1LeaseListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.WatchCoordinationV1LeaseListForAllNamespaces has not yet been implemented")
		}),
		CoordinationV1WatchCoordinationV1NamespacedLeaseHandler: coordination_v1.WatchCoordinationV1NamespacedLeaseHandlerFunc(func(params coordination_v1.WatchCoordinationV1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.WatchCoordinationV1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1WatchCoordinationV1NamespacedLeaseListHandler: coordination_v1.WatchCoordinationV1NamespacedLeaseListHandlerFunc(func(params coordination_v1.WatchCoordinationV1NamespacedLeaseListParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1.WatchCoordinationV1NamespacedLeaseList has not yet been implemented")
		}),
		CoordinationV1beta1WatchCoordinationV1beta1LeaseListForAllNamespacesHandler: coordination_v1beta1.WatchCoordinationV1beta1LeaseListForAllNamespacesHandlerFunc(func(params coordination_v1beta1.WatchCoordinationV1beta1LeaseListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.WatchCoordinationV1beta1LeaseListForAllNamespaces has not yet been implemented")
		}),
		CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseHandler: coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseHandlerFunc(func(params coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.WatchCoordinationV1beta1NamespacedLease has not yet been implemented")
		}),
		CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseListHandler: coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseListHandlerFunc(func(params coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseListParams) middleware.Responder {
			return middleware.NotImplemented("operation coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseList has not yet been implemented")
		}),
		CoreV1WatchCoreV1ConfigMapListForAllNamespacesHandler: core_v1.WatchCoreV1ConfigMapListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1ConfigMapListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1ConfigMapListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1EndpointsListForAllNamespacesHandler: core_v1.WatchCoreV1EndpointsListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1EndpointsListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1EndpointsListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1EventListForAllNamespacesHandler: core_v1.WatchCoreV1EventListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1EventListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1EventListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1LimitRangeListForAllNamespacesHandler: core_v1.WatchCoreV1LimitRangeListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1LimitRangeListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1LimitRangeListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespaceHandler: core_v1.WatchCoreV1NamespaceHandlerFunc(func(params core_v1.WatchCoreV1NamespaceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1Namespace has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespaceListHandler: core_v1.WatchCoreV1NamespaceListHandlerFunc(func(params core_v1.WatchCoreV1NamespaceListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespaceList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedConfigMapHandler: core_v1.WatchCoreV1NamespacedConfigMapHandlerFunc(func(params core_v1.WatchCoreV1NamespacedConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedConfigMap has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedConfigMapListHandler: core_v1.WatchCoreV1NamespacedConfigMapListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedConfigMapListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedConfigMapList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedEndpointsHandler: core_v1.WatchCoreV1NamespacedEndpointsHandlerFunc(func(params core_v1.WatchCoreV1NamespacedEndpointsParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedEndpoints has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedEndpointsListHandler: core_v1.WatchCoreV1NamespacedEndpointsListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedEndpointsListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedEndpointsList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedEventHandler: core_v1.WatchCoreV1NamespacedEventHandlerFunc(func(params core_v1.WatchCoreV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedEvent has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedEventListHandler: core_v1.WatchCoreV1NamespacedEventListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedEventListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedEventList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedLimitRangeHandler: core_v1.WatchCoreV1NamespacedLimitRangeHandlerFunc(func(params core_v1.WatchCoreV1NamespacedLimitRangeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedLimitRange has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedLimitRangeListHandler: core_v1.WatchCoreV1NamespacedLimitRangeListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedLimitRangeListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedLimitRangeList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPersistentVolumeClaimHandler: core_v1.WatchCoreV1NamespacedPersistentVolumeClaimHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPersistentVolumeClaim has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPersistentVolumeClaimListHandler: core_v1.WatchCoreV1NamespacedPersistentVolumeClaimListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPersistentVolumeClaimListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPersistentVolumeClaimList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPodHandler: core_v1.WatchCoreV1NamespacedPodHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPodParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPod has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPodListHandler: core_v1.WatchCoreV1NamespacedPodListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPodListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPodList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPodTemplateHandler: core_v1.WatchCoreV1NamespacedPodTemplateHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPodTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPodTemplate has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedPodTemplateListHandler: core_v1.WatchCoreV1NamespacedPodTemplateListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedPodTemplateListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedPodTemplateList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedReplicationControllerHandler: core_v1.WatchCoreV1NamespacedReplicationControllerHandlerFunc(func(params core_v1.WatchCoreV1NamespacedReplicationControllerParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedReplicationController has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedReplicationControllerListHandler: core_v1.WatchCoreV1NamespacedReplicationControllerListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedReplicationControllerListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedReplicationControllerList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedResourceQuotaHandler: core_v1.WatchCoreV1NamespacedResourceQuotaHandlerFunc(func(params core_v1.WatchCoreV1NamespacedResourceQuotaParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedResourceQuota has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedResourceQuotaListHandler: core_v1.WatchCoreV1NamespacedResourceQuotaListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedResourceQuotaListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedResourceQuotaList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedSecretHandler: core_v1.WatchCoreV1NamespacedSecretHandlerFunc(func(params core_v1.WatchCoreV1NamespacedSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedSecret has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedSecretListHandler: core_v1.WatchCoreV1NamespacedSecretListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedSecretListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedSecretList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedServiceHandler: core_v1.WatchCoreV1NamespacedServiceHandlerFunc(func(params core_v1.WatchCoreV1NamespacedServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedService has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedServiceAccountHandler: core_v1.WatchCoreV1NamespacedServiceAccountHandlerFunc(func(params core_v1.WatchCoreV1NamespacedServiceAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedServiceAccount has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedServiceAccountListHandler: core_v1.WatchCoreV1NamespacedServiceAccountListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedServiceAccountListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedServiceAccountList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NamespacedServiceListHandler: core_v1.WatchCoreV1NamespacedServiceListHandlerFunc(func(params core_v1.WatchCoreV1NamespacedServiceListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NamespacedServiceList has not yet been implemented")
		}),
		CoreV1WatchCoreV1NodeHandler: core_v1.WatchCoreV1NodeHandlerFunc(func(params core_v1.WatchCoreV1NodeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1Node has not yet been implemented")
		}),
		CoreV1WatchCoreV1NodeListHandler: core_v1.WatchCoreV1NodeListHandlerFunc(func(params core_v1.WatchCoreV1NodeListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1NodeList has not yet been implemented")
		}),
		CoreV1WatchCoreV1PersistentVolumeHandler: core_v1.WatchCoreV1PersistentVolumeHandlerFunc(func(params core_v1.WatchCoreV1PersistentVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1PersistentVolume has not yet been implemented")
		}),
		CoreV1WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler: core_v1.WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1PersistentVolumeClaimListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1PersistentVolumeListHandler: core_v1.WatchCoreV1PersistentVolumeListHandlerFunc(func(params core_v1.WatchCoreV1PersistentVolumeListParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1PersistentVolumeList has not yet been implemented")
		}),
		CoreV1WatchCoreV1PodListForAllNamespacesHandler: core_v1.WatchCoreV1PodListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1PodListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1PodListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1PodTemplateListForAllNamespacesHandler: core_v1.WatchCoreV1PodTemplateListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1PodTemplateListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1PodTemplateListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1ReplicationControllerListForAllNamespacesHandler: core_v1.WatchCoreV1ReplicationControllerListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1ReplicationControllerListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1ReplicationControllerListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1ResourceQuotaListForAllNamespacesHandler: core_v1.WatchCoreV1ResourceQuotaListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1ResourceQuotaListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1ResourceQuotaListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1SecretListForAllNamespacesHandler: core_v1.WatchCoreV1SecretListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1SecretListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1SecretListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1ServiceAccountListForAllNamespacesHandler: core_v1.WatchCoreV1ServiceAccountListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1ServiceAccountListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1ServiceAccountListForAllNamespaces has not yet been implemented")
		}),
		CoreV1WatchCoreV1ServiceListForAllNamespacesHandler: core_v1.WatchCoreV1ServiceListForAllNamespacesHandlerFunc(func(params core_v1.WatchCoreV1ServiceListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation core_v1.WatchCoreV1ServiceListForAllNamespaces has not yet been implemented")
		}),
		DiscoveryV1beta1WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler: discovery_v1beta1.WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandlerFunc(func(params discovery_v1beta1.WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces has not yet been implemented")
		}),
		DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceHandler: discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc(func(params discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSlice has not yet been implemented")
		}),
		DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler: discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceListHandlerFunc(func(params discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceListParams) middleware.Responder {
			return middleware.NotImplemented("operation discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceList has not yet been implemented")
		}),
		EventsV1WatchEventsV1EventListForAllNamespacesHandler: events_v1.WatchEventsV1EventListForAllNamespacesHandlerFunc(func(params events_v1.WatchEventsV1EventListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.WatchEventsV1EventListForAllNamespaces has not yet been implemented")
		}),
		EventsV1WatchEventsV1NamespacedEventHandler: events_v1.WatchEventsV1NamespacedEventHandlerFunc(func(params events_v1.WatchEventsV1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.WatchEventsV1NamespacedEvent has not yet been implemented")
		}),
		EventsV1WatchEventsV1NamespacedEventListHandler: events_v1.WatchEventsV1NamespacedEventListHandlerFunc(func(params events_v1.WatchEventsV1NamespacedEventListParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1.WatchEventsV1NamespacedEventList has not yet been implemented")
		}),
		EventsV1beta1WatchEventsV1beta1EventListForAllNamespacesHandler: events_v1beta1.WatchEventsV1beta1EventListForAllNamespacesHandlerFunc(func(params events_v1beta1.WatchEventsV1beta1EventListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.WatchEventsV1beta1EventListForAllNamespaces has not yet been implemented")
		}),
		EventsV1beta1WatchEventsV1beta1NamespacedEventHandler: events_v1beta1.WatchEventsV1beta1NamespacedEventHandlerFunc(func(params events_v1beta1.WatchEventsV1beta1NamespacedEventParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.WatchEventsV1beta1NamespacedEvent has not yet been implemented")
		}),
		EventsV1beta1WatchEventsV1beta1NamespacedEventListHandler: events_v1beta1.WatchEventsV1beta1NamespacedEventListHandlerFunc(func(params events_v1beta1.WatchEventsV1beta1NamespacedEventListParams) middleware.Responder {
			return middleware.NotImplemented("operation events_v1beta1.WatchEventsV1beta1NamespacedEventList has not yet been implemented")
		}),
		ExtensionsV1beta1WatchExtensionsV1beta1IngressListForAllNamespacesHandler: extensions_v1beta1.WatchExtensionsV1beta1IngressListForAllNamespacesHandlerFunc(func(params extensions_v1beta1.WatchExtensionsV1beta1IngressListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.WatchExtensionsV1beta1IngressListForAllNamespaces has not yet been implemented")
		}),
		ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressHandler: extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressHandlerFunc(func(params extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngress has not yet been implemented")
		}),
		ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressListHandler: extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressListHandlerFunc(func(params extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressListParams) middleware.Responder {
			return middleware.NotImplemented("operation extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressList has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler: flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchema has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler: flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaListParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaList has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler: flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration has not yet been implemented")
		}),
		FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler: flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandlerFunc(func(params flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListParams) middleware.Responder {
			return middleware.NotImplemented("operation flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1IngressClassHandler: networking_v1.WatchNetworkingV1IngressClassHandlerFunc(func(params networking_v1.WatchNetworkingV1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1IngressClass has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1IngressClassListHandler: networking_v1.WatchNetworkingV1IngressClassListHandlerFunc(func(params networking_v1.WatchNetworkingV1IngressClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1IngressClassList has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1IngressListForAllNamespacesHandler: networking_v1.WatchNetworkingV1IngressListForAllNamespacesHandlerFunc(func(params networking_v1.WatchNetworkingV1IngressListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1IngressListForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1NamespacedIngressHandler: networking_v1.WatchNetworkingV1NamespacedIngressHandlerFunc(func(params networking_v1.WatchNetworkingV1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1NamespacedIngressListHandler: networking_v1.WatchNetworkingV1NamespacedIngressListHandlerFunc(func(params networking_v1.WatchNetworkingV1NamespacedIngressListParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1NamespacedIngressList has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyHandler: networking_v1.WatchNetworkingV1NamespacedNetworkPolicyHandlerFunc(func(params networking_v1.WatchNetworkingV1NamespacedNetworkPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1NamespacedNetworkPolicy has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyListHandler: networking_v1.WatchNetworkingV1NamespacedNetworkPolicyListHandlerFunc(func(params networking_v1.WatchNetworkingV1NamespacedNetworkPolicyListParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1NamespacedNetworkPolicyList has not yet been implemented")
		}),
		NetworkingV1WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler: networking_v1.WatchNetworkingV1NetworkPolicyListForAllNamespacesHandlerFunc(func(params networking_v1.WatchNetworkingV1NetworkPolicyListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1.WatchNetworkingV1NetworkPolicyListForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1beta1WatchNetworkingV1beta1IngressClassHandler: networking_v1beta1.WatchNetworkingV1beta1IngressClassHandlerFunc(func(params networking_v1beta1.WatchNetworkingV1beta1IngressClassParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.WatchNetworkingV1beta1IngressClass has not yet been implemented")
		}),
		NetworkingV1beta1WatchNetworkingV1beta1IngressClassListHandler: networking_v1beta1.WatchNetworkingV1beta1IngressClassListHandlerFunc(func(params networking_v1beta1.WatchNetworkingV1beta1IngressClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.WatchNetworkingV1beta1IngressClassList has not yet been implemented")
		}),
		NetworkingV1beta1WatchNetworkingV1beta1IngressListForAllNamespacesHandler: networking_v1beta1.WatchNetworkingV1beta1IngressListForAllNamespacesHandlerFunc(func(params networking_v1beta1.WatchNetworkingV1beta1IngressListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.WatchNetworkingV1beta1IngressListForAllNamespaces has not yet been implemented")
		}),
		NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressHandler: networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressHandlerFunc(func(params networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.WatchNetworkingV1beta1NamespacedIngress has not yet been implemented")
		}),
		NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressListHandler: networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressListHandlerFunc(func(params networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressListParams) middleware.Responder {
			return middleware.NotImplemented("operation networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressList has not yet been implemented")
		}),
		NodeV1alpha1WatchNodeV1alpha1RuntimeClassHandler: node_v1alpha1.WatchNodeV1alpha1RuntimeClassHandlerFunc(func(params node_v1alpha1.WatchNodeV1alpha1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.WatchNodeV1alpha1RuntimeClass has not yet been implemented")
		}),
		NodeV1alpha1WatchNodeV1alpha1RuntimeClassListHandler: node_v1alpha1.WatchNodeV1alpha1RuntimeClassListHandlerFunc(func(params node_v1alpha1.WatchNodeV1alpha1RuntimeClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1alpha1.WatchNodeV1alpha1RuntimeClassList has not yet been implemented")
		}),
		NodeV1beta1WatchNodeV1beta1RuntimeClassHandler: node_v1beta1.WatchNodeV1beta1RuntimeClassHandlerFunc(func(params node_v1beta1.WatchNodeV1beta1RuntimeClassParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.WatchNodeV1beta1RuntimeClass has not yet been implemented")
		}),
		NodeV1beta1WatchNodeV1beta1RuntimeClassListHandler: node_v1beta1.WatchNodeV1beta1RuntimeClassListHandlerFunc(func(params node_v1beta1.WatchNodeV1beta1RuntimeClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation node_v1beta1.WatchNodeV1beta1RuntimeClassList has not yet been implemented")
		}),
		PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler: policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandlerFunc(func(params policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudget has not yet been implemented")
		}),
		PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler: policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandlerFunc(func(params policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetList has not yet been implemented")
		}),
		PolicyV1beta1WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler: policy_v1beta1.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandlerFunc(func(params policy_v1beta1.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces has not yet been implemented")
		}),
		PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyHandler: policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyHandlerFunc(func(params policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicy has not yet been implemented")
		}),
		PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyListHandler: policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyListHandlerFunc(func(params policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyListParams) middleware.Responder {
			return middleware.NotImplemented("operation policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyList has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleHandler: rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingHandler: rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingListHandler: rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingListHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleListHandler: rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleListHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleHandler: rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingHandler: rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingListHandler: rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingListHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleListHandler: rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleListHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler: rbac_authorization_v1.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1WatchRbacAuthorizationV1RoleListForAllNamespacesHandler: rbac_authorization_v1.WatchRbacAuthorizationV1RoleListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1.WatchRbacAuthorizationV1RoleListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1.WatchRbacAuthorizationV1RoleListForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleListHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleListHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleListHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler: rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleListForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleListHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleListHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRole has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBinding has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingList has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleListHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleListHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleListParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleList has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces has not yet been implemented")
		}),
		RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler: rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandlerFunc(func(params rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleListForAllNamespaces has not yet been implemented")
		}),
		SchedulingV1WatchSchedulingV1PriorityClassHandler: scheduling_v1.WatchSchedulingV1PriorityClassHandlerFunc(func(params scheduling_v1.WatchSchedulingV1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.WatchSchedulingV1PriorityClass has not yet been implemented")
		}),
		SchedulingV1WatchSchedulingV1PriorityClassListHandler: scheduling_v1.WatchSchedulingV1PriorityClassListHandlerFunc(func(params scheduling_v1.WatchSchedulingV1PriorityClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1.WatchSchedulingV1PriorityClassList has not yet been implemented")
		}),
		SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassHandler: scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassHandlerFunc(func(params scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClass has not yet been implemented")
		}),
		SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassListHandler: scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassListHandlerFunc(func(params scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassList has not yet been implemented")
		}),
		SchedulingV1beta1WatchSchedulingV1beta1PriorityClassHandler: scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassHandlerFunc(func(params scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.WatchSchedulingV1beta1PriorityClass has not yet been implemented")
		}),
		SchedulingV1beta1WatchSchedulingV1beta1PriorityClassListHandler: scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassListHandlerFunc(func(params scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassList has not yet been implemented")
		}),
		SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetHandler: settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetHandlerFunc(func(params settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPreset has not yet been implemented")
		}),
		SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetListHandler: settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetListHandlerFunc(func(params settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetListParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetList has not yet been implemented")
		}),
		SettingsV1alpha1WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler: settings_v1alpha1.WatchSettingsV1alpha1PodPresetListForAllNamespacesHandlerFunc(func(params settings_v1alpha1.WatchSettingsV1alpha1PodPresetListForAllNamespacesParams) middleware.Responder {
			return middleware.NotImplemented("operation settings_v1alpha1.WatchSettingsV1alpha1PodPresetListForAllNamespaces has not yet been implemented")
		}),
		StorageV1WatchStorageV1CSIDriverHandler: storage_v1.WatchStorageV1CSIDriverHandlerFunc(func(params storage_v1.WatchStorageV1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1CSIDriver has not yet been implemented")
		}),
		StorageV1WatchStorageV1CSIDriverListHandler: storage_v1.WatchStorageV1CSIDriverListHandlerFunc(func(params storage_v1.WatchStorageV1CSIDriverListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1CSIDriverList has not yet been implemented")
		}),
		StorageV1WatchStorageV1CSINodeHandler: storage_v1.WatchStorageV1CSINodeHandlerFunc(func(params storage_v1.WatchStorageV1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1CSINode has not yet been implemented")
		}),
		StorageV1WatchStorageV1CSINodeListHandler: storage_v1.WatchStorageV1CSINodeListHandlerFunc(func(params storage_v1.WatchStorageV1CSINodeListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1CSINodeList has not yet been implemented")
		}),
		StorageV1WatchStorageV1StorageClassHandler: storage_v1.WatchStorageV1StorageClassHandlerFunc(func(params storage_v1.WatchStorageV1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1StorageClass has not yet been implemented")
		}),
		StorageV1WatchStorageV1StorageClassListHandler: storage_v1.WatchStorageV1StorageClassListHandlerFunc(func(params storage_v1.WatchStorageV1StorageClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1StorageClassList has not yet been implemented")
		}),
		StorageV1WatchStorageV1VolumeAttachmentHandler: storage_v1.WatchStorageV1VolumeAttachmentHandlerFunc(func(params storage_v1.WatchStorageV1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1VolumeAttachment has not yet been implemented")
		}),
		StorageV1WatchStorageV1VolumeAttachmentListHandler: storage_v1.WatchStorageV1VolumeAttachmentListHandlerFunc(func(params storage_v1.WatchStorageV1VolumeAttachmentListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1.WatchStorageV1VolumeAttachmentList has not yet been implemented")
		}),
		StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentHandler: storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentHandlerFunc(func(params storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.WatchStorageV1alpha1VolumeAttachment has not yet been implemented")
		}),
		StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentListHandler: storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentListHandlerFunc(func(params storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentList has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1CSIDriverHandler: storage_v1beta1.WatchStorageV1beta1CSIDriverHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1CSIDriverParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1CSIDriver has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1CSIDriverListHandler: storage_v1beta1.WatchStorageV1beta1CSIDriverListHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1CSIDriverListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1CSIDriverList has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1CSINodeHandler: storage_v1beta1.WatchStorageV1beta1CSINodeHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1CSINodeParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1CSINode has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1CSINodeListHandler: storage_v1beta1.WatchStorageV1beta1CSINodeListHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1CSINodeListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1CSINodeList has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1StorageClassHandler: storage_v1beta1.WatchStorageV1beta1StorageClassHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1StorageClassParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1StorageClass has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1StorageClassListHandler: storage_v1beta1.WatchStorageV1beta1StorageClassListHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1StorageClassListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1StorageClassList has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1VolumeAttachmentHandler: storage_v1beta1.WatchStorageV1beta1VolumeAttachmentHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1VolumeAttachmentParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1VolumeAttachment has not yet been implemented")
		}),
		StorageV1beta1WatchStorageV1beta1VolumeAttachmentListHandler: storage_v1beta1.WatchStorageV1beta1VolumeAttachmentListHandlerFunc(func(params storage_v1beta1.WatchStorageV1beta1VolumeAttachmentListParams) middleware.Responder {
			return middleware.NotImplemented("operation storage_v1beta1.WatchStorageV1beta1VolumeAttachmentList has not yet been implemented")
		}),
	}
}

/*KubernetesAPI the kubernetes API */
type KubernetesAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// EmptyConsumer registers a consumer for the following mime types:
	//   - */*
	EmptyConsumer runtime.Consumer
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	//   - application/json-patch+json
	//   - application/merge-patch+json
	//   - application/strategic-merge-patch+json
	JSONConsumer runtime.Consumer
	// ProtobufConsumer registers a consumer for the following mime types:
	//   - application/vnd.kubernetes.protobuf
	ProtobufConsumer runtime.Consumer
	// YamlConsumer registers a consumer for the following mime types:
	//   - application/apply-patch+yaml
	//   - application/yaml
	YamlConsumer runtime.Consumer

	// EmptyProducer registers a producer for the following mime types:
	//   - */*
	EmptyProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer
	// ProtobufProducer registers a producer for the following mime types:
	//   - application/vnd.kubernetes.protobuf
	ProtobufProducer runtime.Producer
	// TxtProducer registers a producer for the following mime types:
	//   - text/plain
	TxtProducer runtime.Producer
	// YamlProducer registers a producer for the following mime types:
	//   - application/yaml
	YamlProducer runtime.Producer

	// CiliumDeleteApisCiliumIoV2CiliumEndpointHandler sets the operation handler for the delete apis cilium io v2 cilium endpoint operation
	CiliumDeleteApisCiliumIoV2CiliumEndpointHandler cilium.DeleteApisCiliumIoV2CiliumEndpointHandler
	// CiliumListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler sets the operation handler for the list apis cilium io v2 cilium clusterwide local redirect policy operation
	CiliumListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler cilium.ListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler
	// CiliumListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler sets the operation handler for the list apis cilium io v2 cilium clusterwide network policy operation
	CiliumListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler cilium.ListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler
	// CiliumListApisCiliumIoV2CiliumEndpointHandler sets the operation handler for the list apis cilium io v2 cilium endpoint operation
	CiliumListApisCiliumIoV2CiliumEndpointHandler cilium.ListApisCiliumIoV2CiliumEndpointHandler
	// CiliumListApisCiliumIoV2CiliumIdentityHandler sets the operation handler for the list apis cilium io v2 cilium identity operation
	CiliumListApisCiliumIoV2CiliumIdentityHandler cilium.ListApisCiliumIoV2CiliumIdentityHandler
	// CiliumListApisCiliumIoV2CiliumLocalRedirectPolicyHandler sets the operation handler for the list apis cilium io v2 cilium local redirect policy operation
	CiliumListApisCiliumIoV2CiliumLocalRedirectPolicyHandler cilium.ListApisCiliumIoV2CiliumLocalRedirectPolicyHandler
	// CiliumListApisCiliumIoV2CiliumNetworkPolicyHandler sets the operation handler for the list apis cilium io v2 cilium network policy operation
	CiliumListApisCiliumIoV2CiliumNetworkPolicyHandler cilium.ListApisCiliumIoV2CiliumNetworkPolicyHandler
	// CiliumListApisCiliumIoV2CiliumNodesHandler sets the operation handler for the list apis cilium io v2 cilium nodes operation
	CiliumListApisCiliumIoV2CiliumNodesHandler cilium.ListApisCiliumIoV2CiliumNodesHandler
	// CiliumPatchApisCiliumIoV2CiliumEndpointStatusHandler sets the operation handler for the patch apis cilium io v2 cilium endpoint status operation
	CiliumPatchApisCiliumIoV2CiliumEndpointStatusHandler cilium.PatchApisCiliumIoV2CiliumEndpointStatusHandler
	// CiliumPatchApisCiliumIoV2CiliumIdentityStatusHandler sets the operation handler for the patch apis cilium io v2 cilium identity status operation
	CiliumPatchApisCiliumIoV2CiliumIdentityStatusHandler cilium.PatchApisCiliumIoV2CiliumIdentityStatusHandler
	// CiliumPostApisCiliumIoV2CiliumEndpointHandler sets the operation handler for the post apis cilium io v2 cilium endpoint operation
	CiliumPostApisCiliumIoV2CiliumEndpointHandler cilium.PostApisCiliumIoV2CiliumEndpointHandler
	// CiliumPostApisCiliumIoV2CiliumNodesHandler sets the operation handler for the post apis cilium io v2 cilium nodes operation
	CiliumPostApisCiliumIoV2CiliumNodesHandler cilium.PostApisCiliumIoV2CiliumNodesHandler
	// CiliumPutApisCiliumIoV2CiliumNodesHandler sets the operation handler for the put apis cilium io v2 cilium nodes operation
	CiliumPutApisCiliumIoV2CiliumNodesHandler cilium.PutApisCiliumIoV2CiliumNodesHandler
	// CiliumReadApisCiliumIoV2CiliumNodeHandler sets the operation handler for the read apis cilium io v2 cilium node operation
	CiliumReadApisCiliumIoV2CiliumNodeHandler cilium.ReadApisCiliumIoV2CiliumNodeHandler
	// CoreV1ConnectCoreV1DeleteNamespacedPodProxyHandler sets the operation handler for the connect core v1 delete namespaced pod proxy operation
	CoreV1ConnectCoreV1DeleteNamespacedPodProxyHandler core_v1.ConnectCoreV1DeleteNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 delete namespaced pod proxy with path operation
	CoreV1ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1DeleteNamespacedServiceProxyHandler sets the operation handler for the connect core v1 delete namespaced service proxy operation
	CoreV1ConnectCoreV1DeleteNamespacedServiceProxyHandler core_v1.ConnectCoreV1DeleteNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 delete namespaced service proxy with path operation
	CoreV1ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1DeleteNodeProxyHandler sets the operation handler for the connect core v1 delete node proxy operation
	CoreV1ConnectCoreV1DeleteNodeProxyHandler core_v1.ConnectCoreV1DeleteNodeProxyHandler
	// CoreV1ConnectCoreV1DeleteNodeProxyWithPathHandler sets the operation handler for the connect core v1 delete node proxy with path operation
	CoreV1ConnectCoreV1DeleteNodeProxyWithPathHandler core_v1.ConnectCoreV1DeleteNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1GetNamespacedPodAttachHandler sets the operation handler for the connect core v1 get namespaced pod attach operation
	CoreV1ConnectCoreV1GetNamespacedPodAttachHandler core_v1.ConnectCoreV1GetNamespacedPodAttachHandler
	// CoreV1ConnectCoreV1GetNamespacedPodExecHandler sets the operation handler for the connect core v1 get namespaced pod exec operation
	CoreV1ConnectCoreV1GetNamespacedPodExecHandler core_v1.ConnectCoreV1GetNamespacedPodExecHandler
	// CoreV1ConnectCoreV1GetNamespacedPodPortforwardHandler sets the operation handler for the connect core v1 get namespaced pod portforward operation
	CoreV1ConnectCoreV1GetNamespacedPodPortforwardHandler core_v1.ConnectCoreV1GetNamespacedPodPortforwardHandler
	// CoreV1ConnectCoreV1GetNamespacedPodProxyHandler sets the operation handler for the connect core v1 get namespaced pod proxy operation
	CoreV1ConnectCoreV1GetNamespacedPodProxyHandler core_v1.ConnectCoreV1GetNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1GetNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 get namespaced pod proxy with path operation
	CoreV1ConnectCoreV1GetNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1GetNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1GetNamespacedServiceProxyHandler sets the operation handler for the connect core v1 get namespaced service proxy operation
	CoreV1ConnectCoreV1GetNamespacedServiceProxyHandler core_v1.ConnectCoreV1GetNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1GetNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 get namespaced service proxy with path operation
	CoreV1ConnectCoreV1GetNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1GetNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1GetNodeProxyHandler sets the operation handler for the connect core v1 get node proxy operation
	CoreV1ConnectCoreV1GetNodeProxyHandler core_v1.ConnectCoreV1GetNodeProxyHandler
	// CoreV1ConnectCoreV1GetNodeProxyWithPathHandler sets the operation handler for the connect core v1 get node proxy with path operation
	CoreV1ConnectCoreV1GetNodeProxyWithPathHandler core_v1.ConnectCoreV1GetNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1HeadNamespacedPodProxyHandler sets the operation handler for the connect core v1 head namespaced pod proxy operation
	CoreV1ConnectCoreV1HeadNamespacedPodProxyHandler core_v1.ConnectCoreV1HeadNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1HeadNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 head namespaced pod proxy with path operation
	CoreV1ConnectCoreV1HeadNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1HeadNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1HeadNamespacedServiceProxyHandler sets the operation handler for the connect core v1 head namespaced service proxy operation
	CoreV1ConnectCoreV1HeadNamespacedServiceProxyHandler core_v1.ConnectCoreV1HeadNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 head namespaced service proxy with path operation
	CoreV1ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1HeadNodeProxyHandler sets the operation handler for the connect core v1 head node proxy operation
	CoreV1ConnectCoreV1HeadNodeProxyHandler core_v1.ConnectCoreV1HeadNodeProxyHandler
	// CoreV1ConnectCoreV1HeadNodeProxyWithPathHandler sets the operation handler for the connect core v1 head node proxy with path operation
	CoreV1ConnectCoreV1HeadNodeProxyWithPathHandler core_v1.ConnectCoreV1HeadNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1OptionsNamespacedPodProxyHandler sets the operation handler for the connect core v1 options namespaced pod proxy operation
	CoreV1ConnectCoreV1OptionsNamespacedPodProxyHandler core_v1.ConnectCoreV1OptionsNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 options namespaced pod proxy with path operation
	CoreV1ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1OptionsNamespacedServiceProxyHandler sets the operation handler for the connect core v1 options namespaced service proxy operation
	CoreV1ConnectCoreV1OptionsNamespacedServiceProxyHandler core_v1.ConnectCoreV1OptionsNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 options namespaced service proxy with path operation
	CoreV1ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1OptionsNodeProxyHandler sets the operation handler for the connect core v1 options node proxy operation
	CoreV1ConnectCoreV1OptionsNodeProxyHandler core_v1.ConnectCoreV1OptionsNodeProxyHandler
	// CoreV1ConnectCoreV1OptionsNodeProxyWithPathHandler sets the operation handler for the connect core v1 options node proxy with path operation
	CoreV1ConnectCoreV1OptionsNodeProxyWithPathHandler core_v1.ConnectCoreV1OptionsNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1PatchNamespacedPodProxyHandler sets the operation handler for the connect core v1 patch namespaced pod proxy operation
	CoreV1ConnectCoreV1PatchNamespacedPodProxyHandler core_v1.ConnectCoreV1PatchNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1PatchNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 patch namespaced pod proxy with path operation
	CoreV1ConnectCoreV1PatchNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1PatchNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1PatchNamespacedServiceProxyHandler sets the operation handler for the connect core v1 patch namespaced service proxy operation
	CoreV1ConnectCoreV1PatchNamespacedServiceProxyHandler core_v1.ConnectCoreV1PatchNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 patch namespaced service proxy with path operation
	CoreV1ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1PatchNodeProxyHandler sets the operation handler for the connect core v1 patch node proxy operation
	CoreV1ConnectCoreV1PatchNodeProxyHandler core_v1.ConnectCoreV1PatchNodeProxyHandler
	// CoreV1ConnectCoreV1PatchNodeProxyWithPathHandler sets the operation handler for the connect core v1 patch node proxy with path operation
	CoreV1ConnectCoreV1PatchNodeProxyWithPathHandler core_v1.ConnectCoreV1PatchNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1PostNamespacedPodAttachHandler sets the operation handler for the connect core v1 post namespaced pod attach operation
	CoreV1ConnectCoreV1PostNamespacedPodAttachHandler core_v1.ConnectCoreV1PostNamespacedPodAttachHandler
	// CoreV1ConnectCoreV1PostNamespacedPodExecHandler sets the operation handler for the connect core v1 post namespaced pod exec operation
	CoreV1ConnectCoreV1PostNamespacedPodExecHandler core_v1.ConnectCoreV1PostNamespacedPodExecHandler
	// CoreV1ConnectCoreV1PostNamespacedPodPortforwardHandler sets the operation handler for the connect core v1 post namespaced pod portforward operation
	CoreV1ConnectCoreV1PostNamespacedPodPortforwardHandler core_v1.ConnectCoreV1PostNamespacedPodPortforwardHandler
	// CoreV1ConnectCoreV1PostNamespacedPodProxyHandler sets the operation handler for the connect core v1 post namespaced pod proxy operation
	CoreV1ConnectCoreV1PostNamespacedPodProxyHandler core_v1.ConnectCoreV1PostNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1PostNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 post namespaced pod proxy with path operation
	CoreV1ConnectCoreV1PostNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1PostNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1PostNamespacedServiceProxyHandler sets the operation handler for the connect core v1 post namespaced service proxy operation
	CoreV1ConnectCoreV1PostNamespacedServiceProxyHandler core_v1.ConnectCoreV1PostNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1PostNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 post namespaced service proxy with path operation
	CoreV1ConnectCoreV1PostNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1PostNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1PostNodeProxyHandler sets the operation handler for the connect core v1 post node proxy operation
	CoreV1ConnectCoreV1PostNodeProxyHandler core_v1.ConnectCoreV1PostNodeProxyHandler
	// CoreV1ConnectCoreV1PostNodeProxyWithPathHandler sets the operation handler for the connect core v1 post node proxy with path operation
	CoreV1ConnectCoreV1PostNodeProxyWithPathHandler core_v1.ConnectCoreV1PostNodeProxyWithPathHandler
	// CoreV1ConnectCoreV1PutNamespacedPodProxyHandler sets the operation handler for the connect core v1 put namespaced pod proxy operation
	CoreV1ConnectCoreV1PutNamespacedPodProxyHandler core_v1.ConnectCoreV1PutNamespacedPodProxyHandler
	// CoreV1ConnectCoreV1PutNamespacedPodProxyWithPathHandler sets the operation handler for the connect core v1 put namespaced pod proxy with path operation
	CoreV1ConnectCoreV1PutNamespacedPodProxyWithPathHandler core_v1.ConnectCoreV1PutNamespacedPodProxyWithPathHandler
	// CoreV1ConnectCoreV1PutNamespacedServiceProxyHandler sets the operation handler for the connect core v1 put namespaced service proxy operation
	CoreV1ConnectCoreV1PutNamespacedServiceProxyHandler core_v1.ConnectCoreV1PutNamespacedServiceProxyHandler
	// CoreV1ConnectCoreV1PutNamespacedServiceProxyWithPathHandler sets the operation handler for the connect core v1 put namespaced service proxy with path operation
	CoreV1ConnectCoreV1PutNamespacedServiceProxyWithPathHandler core_v1.ConnectCoreV1PutNamespacedServiceProxyWithPathHandler
	// CoreV1ConnectCoreV1PutNodeProxyHandler sets the operation handler for the connect core v1 put node proxy operation
	CoreV1ConnectCoreV1PutNodeProxyHandler core_v1.ConnectCoreV1PutNodeProxyHandler
	// CoreV1ConnectCoreV1PutNodeProxyWithPathHandler sets the operation handler for the connect core v1 put node proxy with path operation
	CoreV1ConnectCoreV1PutNodeProxyWithPathHandler core_v1.ConnectCoreV1PutNodeProxyWithPathHandler
	// AdmissionregistrationV1CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the create admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the create admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the create admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the create admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1CreateApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the create apiextensions v1 custom resource definition operation
	ApiextensionsV1CreateApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.CreateApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1CreateApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the create apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1CreateApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.CreateApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiregistrationV1CreateApiregistrationV1APIServiceHandler sets the operation handler for the create apiregistration v1 API service operation
	ApiregistrationV1CreateApiregistrationV1APIServiceHandler apiregistration_v1.CreateApiregistrationV1APIServiceHandler
	// ApiregistrationV1beta1CreateApiregistrationV1beta1APIServiceHandler sets the operation handler for the create apiregistration v1beta1 API service operation
	ApiregistrationV1beta1CreateApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.CreateApiregistrationV1beta1APIServiceHandler
	// AppsV1CreateAppsV1NamespacedControllerRevisionHandler sets the operation handler for the create apps v1 namespaced controller revision operation
	AppsV1CreateAppsV1NamespacedControllerRevisionHandler apps_v1.CreateAppsV1NamespacedControllerRevisionHandler
	// AppsV1CreateAppsV1NamespacedDaemonSetHandler sets the operation handler for the create apps v1 namespaced daemon set operation
	AppsV1CreateAppsV1NamespacedDaemonSetHandler apps_v1.CreateAppsV1NamespacedDaemonSetHandler
	// AppsV1CreateAppsV1NamespacedDeploymentHandler sets the operation handler for the create apps v1 namespaced deployment operation
	AppsV1CreateAppsV1NamespacedDeploymentHandler apps_v1.CreateAppsV1NamespacedDeploymentHandler
	// AppsV1CreateAppsV1NamespacedReplicaSetHandler sets the operation handler for the create apps v1 namespaced replica set operation
	AppsV1CreateAppsV1NamespacedReplicaSetHandler apps_v1.CreateAppsV1NamespacedReplicaSetHandler
	// AppsV1CreateAppsV1NamespacedStatefulSetHandler sets the operation handler for the create apps v1 namespaced stateful set operation
	AppsV1CreateAppsV1NamespacedStatefulSetHandler apps_v1.CreateAppsV1NamespacedStatefulSetHandler
	// AuthenticationV1CreateAuthenticationV1TokenReviewHandler sets the operation handler for the create authentication v1 token review operation
	AuthenticationV1CreateAuthenticationV1TokenReviewHandler authentication_v1.CreateAuthenticationV1TokenReviewHandler
	// AuthenticationV1beta1CreateAuthenticationV1beta1TokenReviewHandler sets the operation handler for the create authentication v1beta1 token review operation
	AuthenticationV1beta1CreateAuthenticationV1beta1TokenReviewHandler authentication_v1beta1.CreateAuthenticationV1beta1TokenReviewHandler
	// AuthorizationV1CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler sets the operation handler for the create authorization v1 namespaced local subject access review operation
	AuthorizationV1CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler authorization_v1.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler
	// AuthorizationV1CreateAuthorizationV1SelfSubjectAccessReviewHandler sets the operation handler for the create authorization v1 self subject access review operation
	AuthorizationV1CreateAuthorizationV1SelfSubjectAccessReviewHandler authorization_v1.CreateAuthorizationV1SelfSubjectAccessReviewHandler
	// AuthorizationV1CreateAuthorizationV1SelfSubjectRulesReviewHandler sets the operation handler for the create authorization v1 self subject rules review operation
	AuthorizationV1CreateAuthorizationV1SelfSubjectRulesReviewHandler authorization_v1.CreateAuthorizationV1SelfSubjectRulesReviewHandler
	// AuthorizationV1CreateAuthorizationV1SubjectAccessReviewHandler sets the operation handler for the create authorization v1 subject access review operation
	AuthorizationV1CreateAuthorizationV1SubjectAccessReviewHandler authorization_v1.CreateAuthorizationV1SubjectAccessReviewHandler
	// AuthorizationV1beta1CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler sets the operation handler for the create authorization v1beta1 namespaced local subject access review operation
	AuthorizationV1beta1CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler authorization_v1beta1.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler
	// AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler sets the operation handler for the create authorization v1beta1 self subject access review operation
	AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler
	// AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler sets the operation handler for the create authorization v1beta1 self subject rules review operation
	AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler
	// AuthorizationV1beta1CreateAuthorizationV1beta1SubjectAccessReviewHandler sets the operation handler for the create authorization v1beta1 subject access review operation
	AuthorizationV1beta1CreateAuthorizationV1beta1SubjectAccessReviewHandler authorization_v1beta1.CreateAuthorizationV1beta1SubjectAccessReviewHandler
	// AutoscalingV1CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the create autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the create autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the create autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// BatchV1CreateBatchV1NamespacedJobHandler sets the operation handler for the create batch v1 namespaced job operation
	BatchV1CreateBatchV1NamespacedJobHandler batch_v1.CreateBatchV1NamespacedJobHandler
	// BatchV1beta1CreateBatchV1beta1NamespacedCronJobHandler sets the operation handler for the create batch v1beta1 namespaced cron job operation
	BatchV1beta1CreateBatchV1beta1NamespacedCronJobHandler batch_v1beta1.CreateBatchV1beta1NamespacedCronJobHandler
	// BatchV2alpha1CreateBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the create batch v2alpha1 namespaced cron job operation
	BatchV2alpha1CreateBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.CreateBatchV2alpha1NamespacedCronJobHandler
	// CertificatesV1CreateCertificatesV1CertificateSigningRequestHandler sets the operation handler for the create certificates v1 certificate signing request operation
	CertificatesV1CreateCertificatesV1CertificateSigningRequestHandler certificates_v1.CreateCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1beta1CreateCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the create certificates v1beta1 certificate signing request operation
	CertificatesV1beta1CreateCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.CreateCertificatesV1beta1CertificateSigningRequestHandler
	// CoordinationV1CreateCoordinationV1NamespacedLeaseHandler sets the operation handler for the create coordination v1 namespaced lease operation
	CoordinationV1CreateCoordinationV1NamespacedLeaseHandler coordination_v1.CreateCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1CreateCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the create coordination v1beta1 namespaced lease operation
	CoordinationV1beta1CreateCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.CreateCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1CreateCoreV1NamespaceHandler sets the operation handler for the create core v1 namespace operation
	CoreV1CreateCoreV1NamespaceHandler core_v1.CreateCoreV1NamespaceHandler
	// CoreV1CreateCoreV1NamespacedBindingHandler sets the operation handler for the create core v1 namespaced binding operation
	CoreV1CreateCoreV1NamespacedBindingHandler core_v1.CreateCoreV1NamespacedBindingHandler
	// CoreV1CreateCoreV1NamespacedConfigMapHandler sets the operation handler for the create core v1 namespaced config map operation
	CoreV1CreateCoreV1NamespacedConfigMapHandler core_v1.CreateCoreV1NamespacedConfigMapHandler
	// CoreV1CreateCoreV1NamespacedEndpointsHandler sets the operation handler for the create core v1 namespaced endpoints operation
	CoreV1CreateCoreV1NamespacedEndpointsHandler core_v1.CreateCoreV1NamespacedEndpointsHandler
	// CoreV1CreateCoreV1NamespacedEventHandler sets the operation handler for the create core v1 namespaced event operation
	CoreV1CreateCoreV1NamespacedEventHandler core_v1.CreateCoreV1NamespacedEventHandler
	// CoreV1CreateCoreV1NamespacedLimitRangeHandler sets the operation handler for the create core v1 namespaced limit range operation
	CoreV1CreateCoreV1NamespacedLimitRangeHandler core_v1.CreateCoreV1NamespacedLimitRangeHandler
	// CoreV1CreateCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the create core v1 namespaced persistent volume claim operation
	CoreV1CreateCoreV1NamespacedPersistentVolumeClaimHandler core_v1.CreateCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1CreateCoreV1NamespacedPodHandler sets the operation handler for the create core v1 namespaced pod operation
	CoreV1CreateCoreV1NamespacedPodHandler core_v1.CreateCoreV1NamespacedPodHandler
	// CoreV1CreateCoreV1NamespacedPodBindingHandler sets the operation handler for the create core v1 namespaced pod binding operation
	CoreV1CreateCoreV1NamespacedPodBindingHandler core_v1.CreateCoreV1NamespacedPodBindingHandler
	// CoreV1CreateCoreV1NamespacedPodEvictionHandler sets the operation handler for the create core v1 namespaced pod eviction operation
	CoreV1CreateCoreV1NamespacedPodEvictionHandler core_v1.CreateCoreV1NamespacedPodEvictionHandler
	// CoreV1CreateCoreV1NamespacedPodTemplateHandler sets the operation handler for the create core v1 namespaced pod template operation
	CoreV1CreateCoreV1NamespacedPodTemplateHandler core_v1.CreateCoreV1NamespacedPodTemplateHandler
	// CoreV1CreateCoreV1NamespacedReplicationControllerHandler sets the operation handler for the create core v1 namespaced replication controller operation
	CoreV1CreateCoreV1NamespacedReplicationControllerHandler core_v1.CreateCoreV1NamespacedReplicationControllerHandler
	// CoreV1CreateCoreV1NamespacedResourceQuotaHandler sets the operation handler for the create core v1 namespaced resource quota operation
	CoreV1CreateCoreV1NamespacedResourceQuotaHandler core_v1.CreateCoreV1NamespacedResourceQuotaHandler
	// CoreV1CreateCoreV1NamespacedSecretHandler sets the operation handler for the create core v1 namespaced secret operation
	CoreV1CreateCoreV1NamespacedSecretHandler core_v1.CreateCoreV1NamespacedSecretHandler
	// CoreV1CreateCoreV1NamespacedServiceHandler sets the operation handler for the create core v1 namespaced service operation
	CoreV1CreateCoreV1NamespacedServiceHandler core_v1.CreateCoreV1NamespacedServiceHandler
	// CoreV1CreateCoreV1NamespacedServiceAccountHandler sets the operation handler for the create core v1 namespaced service account operation
	CoreV1CreateCoreV1NamespacedServiceAccountHandler core_v1.CreateCoreV1NamespacedServiceAccountHandler
	// CoreV1CreateCoreV1NamespacedServiceAccountTokenHandler sets the operation handler for the create core v1 namespaced service account token operation
	CoreV1CreateCoreV1NamespacedServiceAccountTokenHandler core_v1.CreateCoreV1NamespacedServiceAccountTokenHandler
	// CoreV1CreateCoreV1NodeHandler sets the operation handler for the create core v1 node operation
	CoreV1CreateCoreV1NodeHandler core_v1.CreateCoreV1NodeHandler
	// CoreV1CreateCoreV1PersistentVolumeHandler sets the operation handler for the create core v1 persistent volume operation
	CoreV1CreateCoreV1PersistentVolumeHandler core_v1.CreateCoreV1PersistentVolumeHandler
	// DiscoveryV1beta1CreateDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the create discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1CreateDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.CreateDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1CreateEventsV1NamespacedEventHandler sets the operation handler for the create events v1 namespaced event operation
	EventsV1CreateEventsV1NamespacedEventHandler events_v1.CreateEventsV1NamespacedEventHandler
	// EventsV1beta1CreateEventsV1beta1NamespacedEventHandler sets the operation handler for the create events v1beta1 namespaced event operation
	EventsV1beta1CreateEventsV1beta1NamespacedEventHandler events_v1beta1.CreateEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1CreateExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the create extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1CreateExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.CreateExtensionsV1beta1NamespacedIngressHandler
	// FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the create flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the create flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// NetworkingV1CreateNetworkingV1IngressClassHandler sets the operation handler for the create networking v1 ingress class operation
	NetworkingV1CreateNetworkingV1IngressClassHandler networking_v1.CreateNetworkingV1IngressClassHandler
	// NetworkingV1CreateNetworkingV1NamespacedIngressHandler sets the operation handler for the create networking v1 namespaced ingress operation
	NetworkingV1CreateNetworkingV1NamespacedIngressHandler networking_v1.CreateNetworkingV1NamespacedIngressHandler
	// NetworkingV1CreateNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the create networking v1 namespaced network policy operation
	NetworkingV1CreateNetworkingV1NamespacedNetworkPolicyHandler networking_v1.CreateNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1beta1CreateNetworkingV1beta1IngressClassHandler sets the operation handler for the create networking v1beta1 ingress class operation
	NetworkingV1beta1CreateNetworkingV1beta1IngressClassHandler networking_v1beta1.CreateNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1CreateNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the create networking v1beta1 namespaced ingress operation
	NetworkingV1beta1CreateNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.CreateNetworkingV1beta1NamespacedIngressHandler
	// NodeV1alpha1CreateNodeV1alpha1RuntimeClassHandler sets the operation handler for the create node v1alpha1 runtime class operation
	NodeV1alpha1CreateNodeV1alpha1RuntimeClassHandler node_v1alpha1.CreateNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1CreateNodeV1beta1RuntimeClassHandler sets the operation handler for the create node v1beta1 runtime class operation
	NodeV1beta1CreateNodeV1beta1RuntimeClassHandler node_v1beta1.CreateNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the create policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1CreatePolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the create policy v1beta1 pod security policy operation
	PolicyV1beta1CreatePolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.CreatePolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the create rbac authorization v1 cluster role operation
	RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the create rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the create rbac authorization v1 namespaced role operation
	RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the create rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the create rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the create rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the create rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the create rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the create rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the create rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the create rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the create rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// SchedulingV1CreateSchedulingV1PriorityClassHandler sets the operation handler for the create scheduling v1 priority class operation
	SchedulingV1CreateSchedulingV1PriorityClassHandler scheduling_v1.CreateSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1CreateSchedulingV1alpha1PriorityClassHandler sets the operation handler for the create scheduling v1alpha1 priority class operation
	SchedulingV1alpha1CreateSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.CreateSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1CreateSchedulingV1beta1PriorityClassHandler sets the operation handler for the create scheduling v1beta1 priority class operation
	SchedulingV1beta1CreateSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.CreateSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1CreateSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the create settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1CreateSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.CreateSettingsV1alpha1NamespacedPodPresetHandler
	// StorageV1CreateStorageV1CSIDriverHandler sets the operation handler for the create storage v1 c s i driver operation
	StorageV1CreateStorageV1CSIDriverHandler storage_v1.CreateStorageV1CSIDriverHandler
	// StorageV1CreateStorageV1CSINodeHandler sets the operation handler for the create storage v1 c s i node operation
	StorageV1CreateStorageV1CSINodeHandler storage_v1.CreateStorageV1CSINodeHandler
	// StorageV1CreateStorageV1StorageClassHandler sets the operation handler for the create storage v1 storage class operation
	StorageV1CreateStorageV1StorageClassHandler storage_v1.CreateStorageV1StorageClassHandler
	// StorageV1CreateStorageV1VolumeAttachmentHandler sets the operation handler for the create storage v1 volume attachment operation
	StorageV1CreateStorageV1VolumeAttachmentHandler storage_v1.CreateStorageV1VolumeAttachmentHandler
	// StorageV1alpha1CreateStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the create storage v1alpha1 volume attachment operation
	StorageV1alpha1CreateStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.CreateStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1CreateStorageV1beta1CSIDriverHandler sets the operation handler for the create storage v1beta1 c s i driver operation
	StorageV1beta1CreateStorageV1beta1CSIDriverHandler storage_v1beta1.CreateStorageV1beta1CSIDriverHandler
	// StorageV1beta1CreateStorageV1beta1CSINodeHandler sets the operation handler for the create storage v1beta1 c s i node operation
	StorageV1beta1CreateStorageV1beta1CSINodeHandler storage_v1beta1.CreateStorageV1beta1CSINodeHandler
	// StorageV1beta1CreateStorageV1beta1StorageClassHandler sets the operation handler for the create storage v1beta1 storage class operation
	StorageV1beta1CreateStorageV1beta1StorageClassHandler storage_v1beta1.CreateStorageV1beta1StorageClassHandler
	// StorageV1beta1CreateStorageV1beta1VolumeAttachmentHandler sets the operation handler for the create storage v1beta1 volume attachment operation
	StorageV1beta1CreateStorageV1beta1VolumeAttachmentHandler storage_v1beta1.CreateStorageV1beta1VolumeAttachmentHandler
	// AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1 collection mutating webhook configuration operation
	AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler admissionregistration_v1.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler
	// AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1 collection validating webhook configuration operation
	AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler admissionregistration_v1.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1beta1 collection mutating webhook configuration operation
	AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1beta1 collection validating webhook configuration operation
	AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the delete admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler sets the operation handler for the delete apiextensions v1 collection custom resource definition operation
	ApiextensionsV1DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler apiextensions_v1.DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler
	// ApiextensionsV1DeleteApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the delete apiextensions v1 custom resource definition operation
	ApiextensionsV1DeleteApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.DeleteApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler sets the operation handler for the delete apiextensions v1beta1 collection custom resource definition operation
	ApiextensionsV1beta1DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler apiextensions_v1beta1.DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler
	// ApiextensionsV1beta1DeleteApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the delete apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1DeleteApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.DeleteApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiregistrationV1DeleteApiregistrationV1APIServiceHandler sets the operation handler for the delete apiregistration v1 API service operation
	ApiregistrationV1DeleteApiregistrationV1APIServiceHandler apiregistration_v1.DeleteApiregistrationV1APIServiceHandler
	// ApiregistrationV1DeleteApiregistrationV1CollectionAPIServiceHandler sets the operation handler for the delete apiregistration v1 collection API service operation
	ApiregistrationV1DeleteApiregistrationV1CollectionAPIServiceHandler apiregistration_v1.DeleteApiregistrationV1CollectionAPIServiceHandler
	// ApiregistrationV1beta1DeleteApiregistrationV1beta1APIServiceHandler sets the operation handler for the delete apiregistration v1beta1 API service operation
	ApiregistrationV1beta1DeleteApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.DeleteApiregistrationV1beta1APIServiceHandler
	// ApiregistrationV1beta1DeleteApiregistrationV1beta1CollectionAPIServiceHandler sets the operation handler for the delete apiregistration v1beta1 collection API service operation
	ApiregistrationV1beta1DeleteApiregistrationV1beta1CollectionAPIServiceHandler apiregistration_v1beta1.DeleteApiregistrationV1beta1CollectionAPIServiceHandler
	// AppsV1DeleteAppsV1CollectionNamespacedControllerRevisionHandler sets the operation handler for the delete apps v1 collection namespaced controller revision operation
	AppsV1DeleteAppsV1CollectionNamespacedControllerRevisionHandler apps_v1.DeleteAppsV1CollectionNamespacedControllerRevisionHandler
	// AppsV1DeleteAppsV1CollectionNamespacedDaemonSetHandler sets the operation handler for the delete apps v1 collection namespaced daemon set operation
	AppsV1DeleteAppsV1CollectionNamespacedDaemonSetHandler apps_v1.DeleteAppsV1CollectionNamespacedDaemonSetHandler
	// AppsV1DeleteAppsV1CollectionNamespacedDeploymentHandler sets the operation handler for the delete apps v1 collection namespaced deployment operation
	AppsV1DeleteAppsV1CollectionNamespacedDeploymentHandler apps_v1.DeleteAppsV1CollectionNamespacedDeploymentHandler
	// AppsV1DeleteAppsV1CollectionNamespacedReplicaSetHandler sets the operation handler for the delete apps v1 collection namespaced replica set operation
	AppsV1DeleteAppsV1CollectionNamespacedReplicaSetHandler apps_v1.DeleteAppsV1CollectionNamespacedReplicaSetHandler
	// AppsV1DeleteAppsV1CollectionNamespacedStatefulSetHandler sets the operation handler for the delete apps v1 collection namespaced stateful set operation
	AppsV1DeleteAppsV1CollectionNamespacedStatefulSetHandler apps_v1.DeleteAppsV1CollectionNamespacedStatefulSetHandler
	// AppsV1DeleteAppsV1NamespacedControllerRevisionHandler sets the operation handler for the delete apps v1 namespaced controller revision operation
	AppsV1DeleteAppsV1NamespacedControllerRevisionHandler apps_v1.DeleteAppsV1NamespacedControllerRevisionHandler
	// AppsV1DeleteAppsV1NamespacedDaemonSetHandler sets the operation handler for the delete apps v1 namespaced daemon set operation
	AppsV1DeleteAppsV1NamespacedDaemonSetHandler apps_v1.DeleteAppsV1NamespacedDaemonSetHandler
	// AppsV1DeleteAppsV1NamespacedDeploymentHandler sets the operation handler for the delete apps v1 namespaced deployment operation
	AppsV1DeleteAppsV1NamespacedDeploymentHandler apps_v1.DeleteAppsV1NamespacedDeploymentHandler
	// AppsV1DeleteAppsV1NamespacedReplicaSetHandler sets the operation handler for the delete apps v1 namespaced replica set operation
	AppsV1DeleteAppsV1NamespacedReplicaSetHandler apps_v1.DeleteAppsV1NamespacedReplicaSetHandler
	// AppsV1DeleteAppsV1NamespacedStatefulSetHandler sets the operation handler for the delete apps v1 namespaced stateful set operation
	AppsV1DeleteAppsV1NamespacedStatefulSetHandler apps_v1.DeleteAppsV1NamespacedStatefulSetHandler
	// AutoscalingV1DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v1 collection namespaced horizontal pod autoscaler operation
	AutoscalingV1DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler autoscaling_v1.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV1DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v2beta1 collection namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v2beta2 collection namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the delete autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// BatchV1DeleteBatchV1CollectionNamespacedJobHandler sets the operation handler for the delete batch v1 collection namespaced job operation
	BatchV1DeleteBatchV1CollectionNamespacedJobHandler batch_v1.DeleteBatchV1CollectionNamespacedJobHandler
	// BatchV1DeleteBatchV1NamespacedJobHandler sets the operation handler for the delete batch v1 namespaced job operation
	BatchV1DeleteBatchV1NamespacedJobHandler batch_v1.DeleteBatchV1NamespacedJobHandler
	// BatchV1beta1DeleteBatchV1beta1CollectionNamespacedCronJobHandler sets the operation handler for the delete batch v1beta1 collection namespaced cron job operation
	BatchV1beta1DeleteBatchV1beta1CollectionNamespacedCronJobHandler batch_v1beta1.DeleteBatchV1beta1CollectionNamespacedCronJobHandler
	// BatchV1beta1DeleteBatchV1beta1NamespacedCronJobHandler sets the operation handler for the delete batch v1beta1 namespaced cron job operation
	BatchV1beta1DeleteBatchV1beta1NamespacedCronJobHandler batch_v1beta1.DeleteBatchV1beta1NamespacedCronJobHandler
	// BatchV2alpha1DeleteBatchV2alpha1CollectionNamespacedCronJobHandler sets the operation handler for the delete batch v2alpha1 collection namespaced cron job operation
	BatchV2alpha1DeleteBatchV2alpha1CollectionNamespacedCronJobHandler batch_v2alpha1.DeleteBatchV2alpha1CollectionNamespacedCronJobHandler
	// BatchV2alpha1DeleteBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the delete batch v2alpha1 namespaced cron job operation
	BatchV2alpha1DeleteBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.DeleteBatchV2alpha1NamespacedCronJobHandler
	// CertificatesV1DeleteCertificatesV1CertificateSigningRequestHandler sets the operation handler for the delete certificates v1 certificate signing request operation
	CertificatesV1DeleteCertificatesV1CertificateSigningRequestHandler certificates_v1.DeleteCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1DeleteCertificatesV1CollectionCertificateSigningRequestHandler sets the operation handler for the delete certificates v1 collection certificate signing request operation
	CertificatesV1DeleteCertificatesV1CollectionCertificateSigningRequestHandler certificates_v1.DeleteCertificatesV1CollectionCertificateSigningRequestHandler
	// CertificatesV1beta1DeleteCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the delete certificates v1beta1 certificate signing request operation
	CertificatesV1beta1DeleteCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.DeleteCertificatesV1beta1CertificateSigningRequestHandler
	// CertificatesV1beta1DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler sets the operation handler for the delete certificates v1beta1 collection certificate signing request operation
	CertificatesV1beta1DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler certificates_v1beta1.DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler
	// CoordinationV1DeleteCoordinationV1CollectionNamespacedLeaseHandler sets the operation handler for the delete coordination v1 collection namespaced lease operation
	CoordinationV1DeleteCoordinationV1CollectionNamespacedLeaseHandler coordination_v1.DeleteCoordinationV1CollectionNamespacedLeaseHandler
	// CoordinationV1DeleteCoordinationV1NamespacedLeaseHandler sets the operation handler for the delete coordination v1 namespaced lease operation
	CoordinationV1DeleteCoordinationV1NamespacedLeaseHandler coordination_v1.DeleteCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler sets the operation handler for the delete coordination v1beta1 collection namespaced lease operation
	CoordinationV1beta1DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler coordination_v1beta1.DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler
	// CoordinationV1beta1DeleteCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the delete coordination v1beta1 namespaced lease operation
	CoordinationV1beta1DeleteCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.DeleteCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1DeleteCoreV1CollectionNamespacedConfigMapHandler sets the operation handler for the delete core v1 collection namespaced config map operation
	CoreV1DeleteCoreV1CollectionNamespacedConfigMapHandler core_v1.DeleteCoreV1CollectionNamespacedConfigMapHandler
	// CoreV1DeleteCoreV1CollectionNamespacedEndpointsHandler sets the operation handler for the delete core v1 collection namespaced endpoints operation
	CoreV1DeleteCoreV1CollectionNamespacedEndpointsHandler core_v1.DeleteCoreV1CollectionNamespacedEndpointsHandler
	// CoreV1DeleteCoreV1CollectionNamespacedEventHandler sets the operation handler for the delete core v1 collection namespaced event operation
	CoreV1DeleteCoreV1CollectionNamespacedEventHandler core_v1.DeleteCoreV1CollectionNamespacedEventHandler
	// CoreV1DeleteCoreV1CollectionNamespacedLimitRangeHandler sets the operation handler for the delete core v1 collection namespaced limit range operation
	CoreV1DeleteCoreV1CollectionNamespacedLimitRangeHandler core_v1.DeleteCoreV1CollectionNamespacedLimitRangeHandler
	// CoreV1DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler sets the operation handler for the delete core v1 collection namespaced persistent volume claim operation
	CoreV1DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler core_v1.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler
	// CoreV1DeleteCoreV1CollectionNamespacedPodHandler sets the operation handler for the delete core v1 collection namespaced pod operation
	CoreV1DeleteCoreV1CollectionNamespacedPodHandler core_v1.DeleteCoreV1CollectionNamespacedPodHandler
	// CoreV1DeleteCoreV1CollectionNamespacedPodTemplateHandler sets the operation handler for the delete core v1 collection namespaced pod template operation
	CoreV1DeleteCoreV1CollectionNamespacedPodTemplateHandler core_v1.DeleteCoreV1CollectionNamespacedPodTemplateHandler
	// CoreV1DeleteCoreV1CollectionNamespacedReplicationControllerHandler sets the operation handler for the delete core v1 collection namespaced replication controller operation
	CoreV1DeleteCoreV1CollectionNamespacedReplicationControllerHandler core_v1.DeleteCoreV1CollectionNamespacedReplicationControllerHandler
	// CoreV1DeleteCoreV1CollectionNamespacedResourceQuotaHandler sets the operation handler for the delete core v1 collection namespaced resource quota operation
	CoreV1DeleteCoreV1CollectionNamespacedResourceQuotaHandler core_v1.DeleteCoreV1CollectionNamespacedResourceQuotaHandler
	// CoreV1DeleteCoreV1CollectionNamespacedSecretHandler sets the operation handler for the delete core v1 collection namespaced secret operation
	CoreV1DeleteCoreV1CollectionNamespacedSecretHandler core_v1.DeleteCoreV1CollectionNamespacedSecretHandler
	// CoreV1DeleteCoreV1CollectionNamespacedServiceAccountHandler sets the operation handler for the delete core v1 collection namespaced service account operation
	CoreV1DeleteCoreV1CollectionNamespacedServiceAccountHandler core_v1.DeleteCoreV1CollectionNamespacedServiceAccountHandler
	// CoreV1DeleteCoreV1CollectionNodeHandler sets the operation handler for the delete core v1 collection node operation
	CoreV1DeleteCoreV1CollectionNodeHandler core_v1.DeleteCoreV1CollectionNodeHandler
	// CoreV1DeleteCoreV1CollectionPersistentVolumeHandler sets the operation handler for the delete core v1 collection persistent volume operation
	CoreV1DeleteCoreV1CollectionPersistentVolumeHandler core_v1.DeleteCoreV1CollectionPersistentVolumeHandler
	// CoreV1DeleteCoreV1NamespaceHandler sets the operation handler for the delete core v1 namespace operation
	CoreV1DeleteCoreV1NamespaceHandler core_v1.DeleteCoreV1NamespaceHandler
	// CoreV1DeleteCoreV1NamespacedConfigMapHandler sets the operation handler for the delete core v1 namespaced config map operation
	CoreV1DeleteCoreV1NamespacedConfigMapHandler core_v1.DeleteCoreV1NamespacedConfigMapHandler
	// CoreV1DeleteCoreV1NamespacedEndpointsHandler sets the operation handler for the delete core v1 namespaced endpoints operation
	CoreV1DeleteCoreV1NamespacedEndpointsHandler core_v1.DeleteCoreV1NamespacedEndpointsHandler
	// CoreV1DeleteCoreV1NamespacedEventHandler sets the operation handler for the delete core v1 namespaced event operation
	CoreV1DeleteCoreV1NamespacedEventHandler core_v1.DeleteCoreV1NamespacedEventHandler
	// CoreV1DeleteCoreV1NamespacedLimitRangeHandler sets the operation handler for the delete core v1 namespaced limit range operation
	CoreV1DeleteCoreV1NamespacedLimitRangeHandler core_v1.DeleteCoreV1NamespacedLimitRangeHandler
	// CoreV1DeleteCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the delete core v1 namespaced persistent volume claim operation
	CoreV1DeleteCoreV1NamespacedPersistentVolumeClaimHandler core_v1.DeleteCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1DeleteCoreV1NamespacedPodHandler sets the operation handler for the delete core v1 namespaced pod operation
	CoreV1DeleteCoreV1NamespacedPodHandler core_v1.DeleteCoreV1NamespacedPodHandler
	// CoreV1DeleteCoreV1NamespacedPodTemplateHandler sets the operation handler for the delete core v1 namespaced pod template operation
	CoreV1DeleteCoreV1NamespacedPodTemplateHandler core_v1.DeleteCoreV1NamespacedPodTemplateHandler
	// CoreV1DeleteCoreV1NamespacedReplicationControllerHandler sets the operation handler for the delete core v1 namespaced replication controller operation
	CoreV1DeleteCoreV1NamespacedReplicationControllerHandler core_v1.DeleteCoreV1NamespacedReplicationControllerHandler
	// CoreV1DeleteCoreV1NamespacedResourceQuotaHandler sets the operation handler for the delete core v1 namespaced resource quota operation
	CoreV1DeleteCoreV1NamespacedResourceQuotaHandler core_v1.DeleteCoreV1NamespacedResourceQuotaHandler
	// CoreV1DeleteCoreV1NamespacedSecretHandler sets the operation handler for the delete core v1 namespaced secret operation
	CoreV1DeleteCoreV1NamespacedSecretHandler core_v1.DeleteCoreV1NamespacedSecretHandler
	// CoreV1DeleteCoreV1NamespacedServiceHandler sets the operation handler for the delete core v1 namespaced service operation
	CoreV1DeleteCoreV1NamespacedServiceHandler core_v1.DeleteCoreV1NamespacedServiceHandler
	// CoreV1DeleteCoreV1NamespacedServiceAccountHandler sets the operation handler for the delete core v1 namespaced service account operation
	CoreV1DeleteCoreV1NamespacedServiceAccountHandler core_v1.DeleteCoreV1NamespacedServiceAccountHandler
	// CoreV1DeleteCoreV1NodeHandler sets the operation handler for the delete core v1 node operation
	CoreV1DeleteCoreV1NodeHandler core_v1.DeleteCoreV1NodeHandler
	// CoreV1DeleteCoreV1PersistentVolumeHandler sets the operation handler for the delete core v1 persistent volume operation
	CoreV1DeleteCoreV1PersistentVolumeHandler core_v1.DeleteCoreV1PersistentVolumeHandler
	// DiscoveryV1beta1DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler sets the operation handler for the delete discovery v1beta1 collection namespaced endpoint slice operation
	DiscoveryV1beta1DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler discovery_v1beta1.DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler
	// DiscoveryV1beta1DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the delete discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1DeleteEventsV1CollectionNamespacedEventHandler sets the operation handler for the delete events v1 collection namespaced event operation
	EventsV1DeleteEventsV1CollectionNamespacedEventHandler events_v1.DeleteEventsV1CollectionNamespacedEventHandler
	// EventsV1DeleteEventsV1NamespacedEventHandler sets the operation handler for the delete events v1 namespaced event operation
	EventsV1DeleteEventsV1NamespacedEventHandler events_v1.DeleteEventsV1NamespacedEventHandler
	// EventsV1beta1DeleteEventsV1beta1CollectionNamespacedEventHandler sets the operation handler for the delete events v1beta1 collection namespaced event operation
	EventsV1beta1DeleteEventsV1beta1CollectionNamespacedEventHandler events_v1beta1.DeleteEventsV1beta1CollectionNamespacedEventHandler
	// EventsV1beta1DeleteEventsV1beta1NamespacedEventHandler sets the operation handler for the delete events v1beta1 namespaced event operation
	EventsV1beta1DeleteEventsV1beta1NamespacedEventHandler events_v1beta1.DeleteEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1DeleteExtensionsV1beta1CollectionNamespacedIngressHandler sets the operation handler for the delete extensions v1beta1 collection namespaced ingress operation
	ExtensionsV1beta1DeleteExtensionsV1beta1CollectionNamespacedIngressHandler extensions_v1beta1.DeleteExtensionsV1beta1CollectionNamespacedIngressHandler
	// ExtensionsV1beta1DeleteExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the delete extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1DeleteExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.DeleteExtensionsV1beta1NamespacedIngressHandler
	// FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler sets the operation handler for the delete flowcontrol apiserver v1alpha1 collection flow schema operation
	FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler
	// FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler sets the operation handler for the delete flowcontrol apiserver v1alpha1 collection priority level configuration operation
	FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler
	// FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the delete flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the delete flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// NetworkingV1DeleteNetworkingV1CollectionIngressClassHandler sets the operation handler for the delete networking v1 collection ingress class operation
	NetworkingV1DeleteNetworkingV1CollectionIngressClassHandler networking_v1.DeleteNetworkingV1CollectionIngressClassHandler
	// NetworkingV1DeleteNetworkingV1CollectionNamespacedIngressHandler sets the operation handler for the delete networking v1 collection namespaced ingress operation
	NetworkingV1DeleteNetworkingV1CollectionNamespacedIngressHandler networking_v1.DeleteNetworkingV1CollectionNamespacedIngressHandler
	// NetworkingV1DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler sets the operation handler for the delete networking v1 collection namespaced network policy operation
	NetworkingV1DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler networking_v1.DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler
	// NetworkingV1DeleteNetworkingV1IngressClassHandler sets the operation handler for the delete networking v1 ingress class operation
	NetworkingV1DeleteNetworkingV1IngressClassHandler networking_v1.DeleteNetworkingV1IngressClassHandler
	// NetworkingV1DeleteNetworkingV1NamespacedIngressHandler sets the operation handler for the delete networking v1 namespaced ingress operation
	NetworkingV1DeleteNetworkingV1NamespacedIngressHandler networking_v1.DeleteNetworkingV1NamespacedIngressHandler
	// NetworkingV1DeleteNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the delete networking v1 namespaced network policy operation
	NetworkingV1DeleteNetworkingV1NamespacedNetworkPolicyHandler networking_v1.DeleteNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1beta1DeleteNetworkingV1beta1CollectionIngressClassHandler sets the operation handler for the delete networking v1beta1 collection ingress class operation
	NetworkingV1beta1DeleteNetworkingV1beta1CollectionIngressClassHandler networking_v1beta1.DeleteNetworkingV1beta1CollectionIngressClassHandler
	// NetworkingV1beta1DeleteNetworkingV1beta1CollectionNamespacedIngressHandler sets the operation handler for the delete networking v1beta1 collection namespaced ingress operation
	NetworkingV1beta1DeleteNetworkingV1beta1CollectionNamespacedIngressHandler networking_v1beta1.DeleteNetworkingV1beta1CollectionNamespacedIngressHandler
	// NetworkingV1beta1DeleteNetworkingV1beta1IngressClassHandler sets the operation handler for the delete networking v1beta1 ingress class operation
	NetworkingV1beta1DeleteNetworkingV1beta1IngressClassHandler networking_v1beta1.DeleteNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1DeleteNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the delete networking v1beta1 namespaced ingress operation
	NetworkingV1beta1DeleteNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.DeleteNetworkingV1beta1NamespacedIngressHandler
	// NodeV1alpha1DeleteNodeV1alpha1CollectionRuntimeClassHandler sets the operation handler for the delete node v1alpha1 collection runtime class operation
	NodeV1alpha1DeleteNodeV1alpha1CollectionRuntimeClassHandler node_v1alpha1.DeleteNodeV1alpha1CollectionRuntimeClassHandler
	// NodeV1alpha1DeleteNodeV1alpha1RuntimeClassHandler sets the operation handler for the delete node v1alpha1 runtime class operation
	NodeV1alpha1DeleteNodeV1alpha1RuntimeClassHandler node_v1alpha1.DeleteNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1DeleteNodeV1beta1CollectionRuntimeClassHandler sets the operation handler for the delete node v1beta1 collection runtime class operation
	NodeV1beta1DeleteNodeV1beta1CollectionRuntimeClassHandler node_v1beta1.DeleteNodeV1beta1CollectionRuntimeClassHandler
	// NodeV1beta1DeleteNodeV1beta1RuntimeClassHandler sets the operation handler for the delete node v1beta1 runtime class operation
	NodeV1beta1DeleteNodeV1beta1RuntimeClassHandler node_v1beta1.DeleteNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler sets the operation handler for the delete policy v1beta1 collection namespaced pod disruption budget operation
	PolicyV1beta1DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler policy_v1beta1.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1DeletePolicyV1beta1CollectionPodSecurityPolicyHandler sets the operation handler for the delete policy v1beta1 collection pod security policy operation
	PolicyV1beta1DeletePolicyV1beta1CollectionPodSecurityPolicyHandler policy_v1beta1.DeletePolicyV1beta1CollectionPodSecurityPolicyHandler
	// PolicyV1beta1DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the delete policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1DeletePolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the delete policy v1beta1 pod security policy operation
	PolicyV1beta1DeletePolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.DeletePolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the delete rbac authorization v1 cluster role operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleHandler sets the operation handler for the delete rbac authorization v1 collection cluster role operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleHandler rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1 collection cluster role binding operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler sets the operation handler for the delete rbac authorization v1 collection namespaced role operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1 collection namespaced role binding operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the delete rbac authorization v1 namespaced role operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the delete rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler sets the operation handler for the delete rbac authorization v1alpha1 collection cluster role operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1alpha1 collection cluster role binding operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler sets the operation handler for the delete rbac authorization v1alpha1 collection namespaced role operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1alpha1 collection namespaced role binding operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the delete rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the delete rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler sets the operation handler for the delete rbac authorization v1beta1 collection cluster role operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler sets the operation handler for the delete rbac authorization v1beta1 collection cluster role binding operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler sets the operation handler for the delete rbac authorization v1beta1 collection namespaced role operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1beta1 collection namespaced role binding operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the delete rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the delete rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// SchedulingV1DeleteSchedulingV1CollectionPriorityClassHandler sets the operation handler for the delete scheduling v1 collection priority class operation
	SchedulingV1DeleteSchedulingV1CollectionPriorityClassHandler scheduling_v1.DeleteSchedulingV1CollectionPriorityClassHandler
	// SchedulingV1DeleteSchedulingV1PriorityClassHandler sets the operation handler for the delete scheduling v1 priority class operation
	SchedulingV1DeleteSchedulingV1PriorityClassHandler scheduling_v1.DeleteSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1DeleteSchedulingV1alpha1CollectionPriorityClassHandler sets the operation handler for the delete scheduling v1alpha1 collection priority class operation
	SchedulingV1alpha1DeleteSchedulingV1alpha1CollectionPriorityClassHandler scheduling_v1alpha1.DeleteSchedulingV1alpha1CollectionPriorityClassHandler
	// SchedulingV1alpha1DeleteSchedulingV1alpha1PriorityClassHandler sets the operation handler for the delete scheduling v1alpha1 priority class operation
	SchedulingV1alpha1DeleteSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.DeleteSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1DeleteSchedulingV1beta1CollectionPriorityClassHandler sets the operation handler for the delete scheduling v1beta1 collection priority class operation
	SchedulingV1beta1DeleteSchedulingV1beta1CollectionPriorityClassHandler scheduling_v1beta1.DeleteSchedulingV1beta1CollectionPriorityClassHandler
	// SchedulingV1beta1DeleteSchedulingV1beta1PriorityClassHandler sets the operation handler for the delete scheduling v1beta1 priority class operation
	SchedulingV1beta1DeleteSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.DeleteSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler sets the operation handler for the delete settings v1alpha1 collection namespaced pod preset operation
	SettingsV1alpha1DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler settings_v1alpha1.DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler
	// SettingsV1alpha1DeleteSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the delete settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1DeleteSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.DeleteSettingsV1alpha1NamespacedPodPresetHandler
	// StorageV1DeleteStorageV1CSIDriverHandler sets the operation handler for the delete storage v1 c s i driver operation
	StorageV1DeleteStorageV1CSIDriverHandler storage_v1.DeleteStorageV1CSIDriverHandler
	// StorageV1DeleteStorageV1CSINodeHandler sets the operation handler for the delete storage v1 c s i node operation
	StorageV1DeleteStorageV1CSINodeHandler storage_v1.DeleteStorageV1CSINodeHandler
	// StorageV1DeleteStorageV1CollectionCSIDriverHandler sets the operation handler for the delete storage v1 collection c s i driver operation
	StorageV1DeleteStorageV1CollectionCSIDriverHandler storage_v1.DeleteStorageV1CollectionCSIDriverHandler
	// StorageV1DeleteStorageV1CollectionCSINodeHandler sets the operation handler for the delete storage v1 collection c s i node operation
	StorageV1DeleteStorageV1CollectionCSINodeHandler storage_v1.DeleteStorageV1CollectionCSINodeHandler
	// StorageV1DeleteStorageV1CollectionStorageClassHandler sets the operation handler for the delete storage v1 collection storage class operation
	StorageV1DeleteStorageV1CollectionStorageClassHandler storage_v1.DeleteStorageV1CollectionStorageClassHandler
	// StorageV1DeleteStorageV1CollectionVolumeAttachmentHandler sets the operation handler for the delete storage v1 collection volume attachment operation
	StorageV1DeleteStorageV1CollectionVolumeAttachmentHandler storage_v1.DeleteStorageV1CollectionVolumeAttachmentHandler
	// StorageV1DeleteStorageV1StorageClassHandler sets the operation handler for the delete storage v1 storage class operation
	StorageV1DeleteStorageV1StorageClassHandler storage_v1.DeleteStorageV1StorageClassHandler
	// StorageV1DeleteStorageV1VolumeAttachmentHandler sets the operation handler for the delete storage v1 volume attachment operation
	StorageV1DeleteStorageV1VolumeAttachmentHandler storage_v1.DeleteStorageV1VolumeAttachmentHandler
	// StorageV1alpha1DeleteStorageV1alpha1CollectionVolumeAttachmentHandler sets the operation handler for the delete storage v1alpha1 collection volume attachment operation
	StorageV1alpha1DeleteStorageV1alpha1CollectionVolumeAttachmentHandler storage_v1alpha1.DeleteStorageV1alpha1CollectionVolumeAttachmentHandler
	// StorageV1alpha1DeleteStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the delete storage v1alpha1 volume attachment operation
	StorageV1alpha1DeleteStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.DeleteStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1DeleteStorageV1beta1CSIDriverHandler sets the operation handler for the delete storage v1beta1 c s i driver operation
	StorageV1beta1DeleteStorageV1beta1CSIDriverHandler storage_v1beta1.DeleteStorageV1beta1CSIDriverHandler
	// StorageV1beta1DeleteStorageV1beta1CSINodeHandler sets the operation handler for the delete storage v1beta1 c s i node operation
	StorageV1beta1DeleteStorageV1beta1CSINodeHandler storage_v1beta1.DeleteStorageV1beta1CSINodeHandler
	// StorageV1beta1DeleteStorageV1beta1CollectionCSIDriverHandler sets the operation handler for the delete storage v1beta1 collection c s i driver operation
	StorageV1beta1DeleteStorageV1beta1CollectionCSIDriverHandler storage_v1beta1.DeleteStorageV1beta1CollectionCSIDriverHandler
	// StorageV1beta1DeleteStorageV1beta1CollectionCSINodeHandler sets the operation handler for the delete storage v1beta1 collection c s i node operation
	StorageV1beta1DeleteStorageV1beta1CollectionCSINodeHandler storage_v1beta1.DeleteStorageV1beta1CollectionCSINodeHandler
	// StorageV1beta1DeleteStorageV1beta1CollectionStorageClassHandler sets the operation handler for the delete storage v1beta1 collection storage class operation
	StorageV1beta1DeleteStorageV1beta1CollectionStorageClassHandler storage_v1beta1.DeleteStorageV1beta1CollectionStorageClassHandler
	// StorageV1beta1DeleteStorageV1beta1CollectionVolumeAttachmentHandler sets the operation handler for the delete storage v1beta1 collection volume attachment operation
	StorageV1beta1DeleteStorageV1beta1CollectionVolumeAttachmentHandler storage_v1beta1.DeleteStorageV1beta1CollectionVolumeAttachmentHandler
	// StorageV1beta1DeleteStorageV1beta1StorageClassHandler sets the operation handler for the delete storage v1beta1 storage class operation
	StorageV1beta1DeleteStorageV1beta1StorageClassHandler storage_v1beta1.DeleteStorageV1beta1StorageClassHandler
	// StorageV1beta1DeleteStorageV1beta1VolumeAttachmentHandler sets the operation handler for the delete storage v1beta1 volume attachment operation
	StorageV1beta1DeleteStorageV1beta1VolumeAttachmentHandler storage_v1beta1.DeleteStorageV1beta1VolumeAttachmentHandler
	// ApisGetAPIVersionsHandler sets the operation handler for the get API versions operation
	ApisGetAPIVersionsHandler apis.GetAPIVersionsHandler
	// AdmissionregistrationGetAdmissionregistrationAPIGroupHandler sets the operation handler for the get admissionregistration API group operation
	AdmissionregistrationGetAdmissionregistrationAPIGroupHandler admissionregistration.GetAdmissionregistrationAPIGroupHandler
	// AdmissionregistrationV1GetAdmissionregistrationV1APIResourcesHandler sets the operation handler for the get admissionregistration v1 API resources operation
	AdmissionregistrationV1GetAdmissionregistrationV1APIResourcesHandler admissionregistration_v1.GetAdmissionregistrationV1APIResourcesHandler
	// AdmissionregistrationV1beta1GetAdmissionregistrationV1beta1APIResourcesHandler sets the operation handler for the get admissionregistration v1beta1 API resources operation
	AdmissionregistrationV1beta1GetAdmissionregistrationV1beta1APIResourcesHandler admissionregistration_v1beta1.GetAdmissionregistrationV1beta1APIResourcesHandler
	// ApiextensionsGetApiextensionsAPIGroupHandler sets the operation handler for the get apiextensions API group operation
	ApiextensionsGetApiextensionsAPIGroupHandler apiextensions.GetApiextensionsAPIGroupHandler
	// ApiextensionsV1GetApiextensionsV1APIResourcesHandler sets the operation handler for the get apiextensions v1 API resources operation
	ApiextensionsV1GetApiextensionsV1APIResourcesHandler apiextensions_v1.GetApiextensionsV1APIResourcesHandler
	// ApiextensionsV1beta1GetApiextensionsV1beta1APIResourcesHandler sets the operation handler for the get apiextensions v1beta1 API resources operation
	ApiextensionsV1beta1GetApiextensionsV1beta1APIResourcesHandler apiextensions_v1beta1.GetApiextensionsV1beta1APIResourcesHandler
	// ApiregistrationGetApiregistrationAPIGroupHandler sets the operation handler for the get apiregistration API group operation
	ApiregistrationGetApiregistrationAPIGroupHandler apiregistration.GetApiregistrationAPIGroupHandler
	// ApiregistrationV1GetApiregistrationV1APIResourcesHandler sets the operation handler for the get apiregistration v1 API resources operation
	ApiregistrationV1GetApiregistrationV1APIResourcesHandler apiregistration_v1.GetApiregistrationV1APIResourcesHandler
	// ApiregistrationV1beta1GetApiregistrationV1beta1APIResourcesHandler sets the operation handler for the get apiregistration v1beta1 API resources operation
	ApiregistrationV1beta1GetApiregistrationV1beta1APIResourcesHandler apiregistration_v1beta1.GetApiregistrationV1beta1APIResourcesHandler
	// AppsGetAppsAPIGroupHandler sets the operation handler for the get apps API group operation
	AppsGetAppsAPIGroupHandler apps.GetAppsAPIGroupHandler
	// AppsV1GetAppsV1APIResourcesHandler sets the operation handler for the get apps v1 API resources operation
	AppsV1GetAppsV1APIResourcesHandler apps_v1.GetAppsV1APIResourcesHandler
	// AuthenticationGetAuthenticationAPIGroupHandler sets the operation handler for the get authentication API group operation
	AuthenticationGetAuthenticationAPIGroupHandler authentication.GetAuthenticationAPIGroupHandler
	// AuthenticationV1GetAuthenticationV1APIResourcesHandler sets the operation handler for the get authentication v1 API resources operation
	AuthenticationV1GetAuthenticationV1APIResourcesHandler authentication_v1.GetAuthenticationV1APIResourcesHandler
	// AuthenticationV1beta1GetAuthenticationV1beta1APIResourcesHandler sets the operation handler for the get authentication v1beta1 API resources operation
	AuthenticationV1beta1GetAuthenticationV1beta1APIResourcesHandler authentication_v1beta1.GetAuthenticationV1beta1APIResourcesHandler
	// AuthorizationGetAuthorizationAPIGroupHandler sets the operation handler for the get authorization API group operation
	AuthorizationGetAuthorizationAPIGroupHandler authorization.GetAuthorizationAPIGroupHandler
	// AuthorizationV1GetAuthorizationV1APIResourcesHandler sets the operation handler for the get authorization v1 API resources operation
	AuthorizationV1GetAuthorizationV1APIResourcesHandler authorization_v1.GetAuthorizationV1APIResourcesHandler
	// AuthorizationV1beta1GetAuthorizationV1beta1APIResourcesHandler sets the operation handler for the get authorization v1beta1 API resources operation
	AuthorizationV1beta1GetAuthorizationV1beta1APIResourcesHandler authorization_v1beta1.GetAuthorizationV1beta1APIResourcesHandler
	// AutoscalingGetAutoscalingAPIGroupHandler sets the operation handler for the get autoscaling API group operation
	AutoscalingGetAutoscalingAPIGroupHandler autoscaling.GetAutoscalingAPIGroupHandler
	// AutoscalingV1GetAutoscalingV1APIResourcesHandler sets the operation handler for the get autoscaling v1 API resources operation
	AutoscalingV1GetAutoscalingV1APIResourcesHandler autoscaling_v1.GetAutoscalingV1APIResourcesHandler
	// AutoscalingV2beta1GetAutoscalingV2beta1APIResourcesHandler sets the operation handler for the get autoscaling v2beta1 API resources operation
	AutoscalingV2beta1GetAutoscalingV2beta1APIResourcesHandler autoscaling_v2beta1.GetAutoscalingV2beta1APIResourcesHandler
	// AutoscalingV2beta2GetAutoscalingV2beta2APIResourcesHandler sets the operation handler for the get autoscaling v2beta2 API resources operation
	AutoscalingV2beta2GetAutoscalingV2beta2APIResourcesHandler autoscaling_v2beta2.GetAutoscalingV2beta2APIResourcesHandler
	// BatchGetBatchAPIGroupHandler sets the operation handler for the get batch API group operation
	BatchGetBatchAPIGroupHandler batch.GetBatchAPIGroupHandler
	// BatchV1GetBatchV1APIResourcesHandler sets the operation handler for the get batch v1 API resources operation
	BatchV1GetBatchV1APIResourcesHandler batch_v1.GetBatchV1APIResourcesHandler
	// BatchV1beta1GetBatchV1beta1APIResourcesHandler sets the operation handler for the get batch v1beta1 API resources operation
	BatchV1beta1GetBatchV1beta1APIResourcesHandler batch_v1beta1.GetBatchV1beta1APIResourcesHandler
	// BatchV2alpha1GetBatchV2alpha1APIResourcesHandler sets the operation handler for the get batch v2alpha1 API resources operation
	BatchV2alpha1GetBatchV2alpha1APIResourcesHandler batch_v2alpha1.GetBatchV2alpha1APIResourcesHandler
	// CertificatesGetCertificatesAPIGroupHandler sets the operation handler for the get certificates API group operation
	CertificatesGetCertificatesAPIGroupHandler certificates.GetCertificatesAPIGroupHandler
	// CertificatesV1GetCertificatesV1APIResourcesHandler sets the operation handler for the get certificates v1 API resources operation
	CertificatesV1GetCertificatesV1APIResourcesHandler certificates_v1.GetCertificatesV1APIResourcesHandler
	// CertificatesV1beta1GetCertificatesV1beta1APIResourcesHandler sets the operation handler for the get certificates v1beta1 API resources operation
	CertificatesV1beta1GetCertificatesV1beta1APIResourcesHandler certificates_v1beta1.GetCertificatesV1beta1APIResourcesHandler
	// VersionGetCodeVersionHandler sets the operation handler for the get code version operation
	VersionGetCodeVersionHandler version.GetCodeVersionHandler
	// CoordinationGetCoordinationAPIGroupHandler sets the operation handler for the get coordination API group operation
	CoordinationGetCoordinationAPIGroupHandler coordination.GetCoordinationAPIGroupHandler
	// CoordinationV1GetCoordinationV1APIResourcesHandler sets the operation handler for the get coordination v1 API resources operation
	CoordinationV1GetCoordinationV1APIResourcesHandler coordination_v1.GetCoordinationV1APIResourcesHandler
	// CoordinationV1beta1GetCoordinationV1beta1APIResourcesHandler sets the operation handler for the get coordination v1beta1 API resources operation
	CoordinationV1beta1GetCoordinationV1beta1APIResourcesHandler coordination_v1beta1.GetCoordinationV1beta1APIResourcesHandler
	// CoreGetCoreAPIVersionsHandler sets the operation handler for the get core API versions operation
	CoreGetCoreAPIVersionsHandler core.GetCoreAPIVersionsHandler
	// CoreV1GetCoreV1APIResourcesHandler sets the operation handler for the get core v1 API resources operation
	CoreV1GetCoreV1APIResourcesHandler core_v1.GetCoreV1APIResourcesHandler
	// DiscoveryGetDiscoveryAPIGroupHandler sets the operation handler for the get discovery API group operation
	DiscoveryGetDiscoveryAPIGroupHandler discovery.GetDiscoveryAPIGroupHandler
	// DiscoveryV1beta1GetDiscoveryV1beta1APIResourcesHandler sets the operation handler for the get discovery v1beta1 API resources operation
	DiscoveryV1beta1GetDiscoveryV1beta1APIResourcesHandler discovery_v1beta1.GetDiscoveryV1beta1APIResourcesHandler
	// EventsGetEventsAPIGroupHandler sets the operation handler for the get events API group operation
	EventsGetEventsAPIGroupHandler events.GetEventsAPIGroupHandler
	// EventsV1GetEventsV1APIResourcesHandler sets the operation handler for the get events v1 API resources operation
	EventsV1GetEventsV1APIResourcesHandler events_v1.GetEventsV1APIResourcesHandler
	// EventsV1beta1GetEventsV1beta1APIResourcesHandler sets the operation handler for the get events v1beta1 API resources operation
	EventsV1beta1GetEventsV1beta1APIResourcesHandler events_v1beta1.GetEventsV1beta1APIResourcesHandler
	// ExtensionsGetExtensionsAPIGroupHandler sets the operation handler for the get extensions API group operation
	ExtensionsGetExtensionsAPIGroupHandler extensions.GetExtensionsAPIGroupHandler
	// ExtensionsV1beta1GetExtensionsV1beta1APIResourcesHandler sets the operation handler for the get extensions v1beta1 API resources operation
	ExtensionsV1beta1GetExtensionsV1beta1APIResourcesHandler extensions_v1beta1.GetExtensionsV1beta1APIResourcesHandler
	// FlowcontrolApiserverGetFlowcontrolApiserverAPIGroupHandler sets the operation handler for the get flowcontrol apiserver API group operation
	FlowcontrolApiserverGetFlowcontrolApiserverAPIGroupHandler flowcontrol_apiserver.GetFlowcontrolApiserverAPIGroupHandler
	// FlowcontrolApiserverV1alpha1GetFlowcontrolApiserverV1alpha1APIResourcesHandler sets the operation handler for the get flowcontrol apiserver v1alpha1 API resources operation
	FlowcontrolApiserverV1alpha1GetFlowcontrolApiserverV1alpha1APIResourcesHandler flowcontrol_apiserver_v1alpha1.GetFlowcontrolApiserverV1alpha1APIResourcesHandler
	// NetworkingGetNetworkingAPIGroupHandler sets the operation handler for the get networking API group operation
	NetworkingGetNetworkingAPIGroupHandler networking.GetNetworkingAPIGroupHandler
	// NetworkingV1GetNetworkingV1APIResourcesHandler sets the operation handler for the get networking v1 API resources operation
	NetworkingV1GetNetworkingV1APIResourcesHandler networking_v1.GetNetworkingV1APIResourcesHandler
	// NetworkingV1beta1GetNetworkingV1beta1APIResourcesHandler sets the operation handler for the get networking v1beta1 API resources operation
	NetworkingV1beta1GetNetworkingV1beta1APIResourcesHandler networking_v1beta1.GetNetworkingV1beta1APIResourcesHandler
	// NodeGetNodeAPIGroupHandler sets the operation handler for the get node API group operation
	NodeGetNodeAPIGroupHandler node.GetNodeAPIGroupHandler
	// NodeV1alpha1GetNodeV1alpha1APIResourcesHandler sets the operation handler for the get node v1alpha1 API resources operation
	NodeV1alpha1GetNodeV1alpha1APIResourcesHandler node_v1alpha1.GetNodeV1alpha1APIResourcesHandler
	// NodeV1beta1GetNodeV1beta1APIResourcesHandler sets the operation handler for the get node v1beta1 API resources operation
	NodeV1beta1GetNodeV1beta1APIResourcesHandler node_v1beta1.GetNodeV1beta1APIResourcesHandler
	// PolicyGetPolicyAPIGroupHandler sets the operation handler for the get policy API group operation
	PolicyGetPolicyAPIGroupHandler policy.GetPolicyAPIGroupHandler
	// PolicyV1beta1GetPolicyV1beta1APIResourcesHandler sets the operation handler for the get policy v1beta1 API resources operation
	PolicyV1beta1GetPolicyV1beta1APIResourcesHandler policy_v1beta1.GetPolicyV1beta1APIResourcesHandler
	// RbacAuthorizationGetRbacAuthorizationAPIGroupHandler sets the operation handler for the get rbac authorization API group operation
	RbacAuthorizationGetRbacAuthorizationAPIGroupHandler rbac_authorization.GetRbacAuthorizationAPIGroupHandler
	// RbacAuthorizationV1GetRbacAuthorizationV1APIResourcesHandler sets the operation handler for the get rbac authorization v1 API resources operation
	RbacAuthorizationV1GetRbacAuthorizationV1APIResourcesHandler rbac_authorization_v1.GetRbacAuthorizationV1APIResourcesHandler
	// RbacAuthorizationV1alpha1GetRbacAuthorizationV1alpha1APIResourcesHandler sets the operation handler for the get rbac authorization v1alpha1 API resources operation
	RbacAuthorizationV1alpha1GetRbacAuthorizationV1alpha1APIResourcesHandler rbac_authorization_v1alpha1.GetRbacAuthorizationV1alpha1APIResourcesHandler
	// RbacAuthorizationV1beta1GetRbacAuthorizationV1beta1APIResourcesHandler sets the operation handler for the get rbac authorization v1beta1 API resources operation
	RbacAuthorizationV1beta1GetRbacAuthorizationV1beta1APIResourcesHandler rbac_authorization_v1beta1.GetRbacAuthorizationV1beta1APIResourcesHandler
	// SchedulingGetSchedulingAPIGroupHandler sets the operation handler for the get scheduling API group operation
	SchedulingGetSchedulingAPIGroupHandler scheduling.GetSchedulingAPIGroupHandler
	// SchedulingV1GetSchedulingV1APIResourcesHandler sets the operation handler for the get scheduling v1 API resources operation
	SchedulingV1GetSchedulingV1APIResourcesHandler scheduling_v1.GetSchedulingV1APIResourcesHandler
	// SchedulingV1alpha1GetSchedulingV1alpha1APIResourcesHandler sets the operation handler for the get scheduling v1alpha1 API resources operation
	SchedulingV1alpha1GetSchedulingV1alpha1APIResourcesHandler scheduling_v1alpha1.GetSchedulingV1alpha1APIResourcesHandler
	// SchedulingV1beta1GetSchedulingV1beta1APIResourcesHandler sets the operation handler for the get scheduling v1beta1 API resources operation
	SchedulingV1beta1GetSchedulingV1beta1APIResourcesHandler scheduling_v1beta1.GetSchedulingV1beta1APIResourcesHandler
	// SettingsGetSettingsAPIGroupHandler sets the operation handler for the get settings API group operation
	SettingsGetSettingsAPIGroupHandler settings.GetSettingsAPIGroupHandler
	// SettingsV1alpha1GetSettingsV1alpha1APIResourcesHandler sets the operation handler for the get settings v1alpha1 API resources operation
	SettingsV1alpha1GetSettingsV1alpha1APIResourcesHandler settings_v1alpha1.GetSettingsV1alpha1APIResourcesHandler
	// StorageGetStorageAPIGroupHandler sets the operation handler for the get storage API group operation
	StorageGetStorageAPIGroupHandler storage.GetStorageAPIGroupHandler
	// StorageV1GetStorageV1APIResourcesHandler sets the operation handler for the get storage v1 API resources operation
	StorageV1GetStorageV1APIResourcesHandler storage_v1.GetStorageV1APIResourcesHandler
	// StorageV1alpha1GetStorageV1alpha1APIResourcesHandler sets the operation handler for the get storage v1alpha1 API resources operation
	StorageV1alpha1GetStorageV1alpha1APIResourcesHandler storage_v1alpha1.GetStorageV1alpha1APIResourcesHandler
	// StorageV1beta1GetStorageV1beta1APIResourcesHandler sets the operation handler for the get storage v1beta1 API resources operation
	StorageV1beta1GetStorageV1beta1APIResourcesHandler storage_v1beta1.GetStorageV1beta1APIResourcesHandler
	// AdmissionregistrationV1ListAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the list admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1ListAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.ListAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the list admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the list admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the list admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1ListApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the list apiextensions v1 custom resource definition operation
	ApiextensionsV1ListApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.ListApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1ListApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the list apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1ListApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.ListApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiregistrationV1ListApiregistrationV1APIServiceHandler sets the operation handler for the list apiregistration v1 API service operation
	ApiregistrationV1ListApiregistrationV1APIServiceHandler apiregistration_v1.ListApiregistrationV1APIServiceHandler
	// ApiregistrationV1beta1ListApiregistrationV1beta1APIServiceHandler sets the operation handler for the list apiregistration v1beta1 API service operation
	ApiregistrationV1beta1ListApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.ListApiregistrationV1beta1APIServiceHandler
	// AppsV1ListAppsV1ControllerRevisionForAllNamespacesHandler sets the operation handler for the list apps v1 controller revision for all namespaces operation
	AppsV1ListAppsV1ControllerRevisionForAllNamespacesHandler apps_v1.ListAppsV1ControllerRevisionForAllNamespacesHandler
	// AppsV1ListAppsV1DaemonSetForAllNamespacesHandler sets the operation handler for the list apps v1 daemon set for all namespaces operation
	AppsV1ListAppsV1DaemonSetForAllNamespacesHandler apps_v1.ListAppsV1DaemonSetForAllNamespacesHandler
	// AppsV1ListAppsV1DeploymentForAllNamespacesHandler sets the operation handler for the list apps v1 deployment for all namespaces operation
	AppsV1ListAppsV1DeploymentForAllNamespacesHandler apps_v1.ListAppsV1DeploymentForAllNamespacesHandler
	// AppsV1ListAppsV1NamespacedControllerRevisionHandler sets the operation handler for the list apps v1 namespaced controller revision operation
	AppsV1ListAppsV1NamespacedControllerRevisionHandler apps_v1.ListAppsV1NamespacedControllerRevisionHandler
	// AppsV1ListAppsV1NamespacedDaemonSetHandler sets the operation handler for the list apps v1 namespaced daemon set operation
	AppsV1ListAppsV1NamespacedDaemonSetHandler apps_v1.ListAppsV1NamespacedDaemonSetHandler
	// AppsV1ListAppsV1NamespacedDeploymentHandler sets the operation handler for the list apps v1 namespaced deployment operation
	AppsV1ListAppsV1NamespacedDeploymentHandler apps_v1.ListAppsV1NamespacedDeploymentHandler
	// AppsV1ListAppsV1NamespacedReplicaSetHandler sets the operation handler for the list apps v1 namespaced replica set operation
	AppsV1ListAppsV1NamespacedReplicaSetHandler apps_v1.ListAppsV1NamespacedReplicaSetHandler
	// AppsV1ListAppsV1NamespacedStatefulSetHandler sets the operation handler for the list apps v1 namespaced stateful set operation
	AppsV1ListAppsV1NamespacedStatefulSetHandler apps_v1.ListAppsV1NamespacedStatefulSetHandler
	// AppsV1ListAppsV1ReplicaSetForAllNamespacesHandler sets the operation handler for the list apps v1 replica set for all namespaces operation
	AppsV1ListAppsV1ReplicaSetForAllNamespacesHandler apps_v1.ListAppsV1ReplicaSetForAllNamespacesHandler
	// AppsV1ListAppsV1StatefulSetForAllNamespacesHandler sets the operation handler for the list apps v1 stateful set for all namespaces operation
	AppsV1ListAppsV1StatefulSetForAllNamespacesHandler apps_v1.ListAppsV1StatefulSetForAllNamespacesHandler
	// AutoscalingV1ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler sets the operation handler for the list autoscaling v1 horizontal pod autoscaler for all namespaces operation
	AutoscalingV1ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler autoscaling_v1.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler
	// AutoscalingV1ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the list autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler sets the operation handler for the list autoscaling v2beta1 horizontal pod autoscaler for all namespaces operation
	AutoscalingV2beta1ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler autoscaling_v2beta1.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler
	// AutoscalingV2beta1ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the list autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler sets the operation handler for the list autoscaling v2beta2 horizontal pod autoscaler for all namespaces operation
	AutoscalingV2beta2ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler autoscaling_v2beta2.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler
	// AutoscalingV2beta2ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the list autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// BatchV1ListBatchV1JobForAllNamespacesHandler sets the operation handler for the list batch v1 job for all namespaces operation
	BatchV1ListBatchV1JobForAllNamespacesHandler batch_v1.ListBatchV1JobForAllNamespacesHandler
	// BatchV1ListBatchV1NamespacedJobHandler sets the operation handler for the list batch v1 namespaced job operation
	BatchV1ListBatchV1NamespacedJobHandler batch_v1.ListBatchV1NamespacedJobHandler
	// BatchV1beta1ListBatchV1beta1CronJobForAllNamespacesHandler sets the operation handler for the list batch v1beta1 cron job for all namespaces operation
	BatchV1beta1ListBatchV1beta1CronJobForAllNamespacesHandler batch_v1beta1.ListBatchV1beta1CronJobForAllNamespacesHandler
	// BatchV1beta1ListBatchV1beta1NamespacedCronJobHandler sets the operation handler for the list batch v1beta1 namespaced cron job operation
	BatchV1beta1ListBatchV1beta1NamespacedCronJobHandler batch_v1beta1.ListBatchV1beta1NamespacedCronJobHandler
	// BatchV2alpha1ListBatchV2alpha1CronJobForAllNamespacesHandler sets the operation handler for the list batch v2alpha1 cron job for all namespaces operation
	BatchV2alpha1ListBatchV2alpha1CronJobForAllNamespacesHandler batch_v2alpha1.ListBatchV2alpha1CronJobForAllNamespacesHandler
	// BatchV2alpha1ListBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the list batch v2alpha1 namespaced cron job operation
	BatchV2alpha1ListBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.ListBatchV2alpha1NamespacedCronJobHandler
	// CertificatesV1ListCertificatesV1CertificateSigningRequestHandler sets the operation handler for the list certificates v1 certificate signing request operation
	CertificatesV1ListCertificatesV1CertificateSigningRequestHandler certificates_v1.ListCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1beta1ListCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the list certificates v1beta1 certificate signing request operation
	CertificatesV1beta1ListCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.ListCertificatesV1beta1CertificateSigningRequestHandler
	// CoordinationV1ListCoordinationV1LeaseForAllNamespacesHandler sets the operation handler for the list coordination v1 lease for all namespaces operation
	CoordinationV1ListCoordinationV1LeaseForAllNamespacesHandler coordination_v1.ListCoordinationV1LeaseForAllNamespacesHandler
	// CoordinationV1ListCoordinationV1NamespacedLeaseHandler sets the operation handler for the list coordination v1 namespaced lease operation
	CoordinationV1ListCoordinationV1NamespacedLeaseHandler coordination_v1.ListCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1ListCoordinationV1beta1LeaseForAllNamespacesHandler sets the operation handler for the list coordination v1beta1 lease for all namespaces operation
	CoordinationV1beta1ListCoordinationV1beta1LeaseForAllNamespacesHandler coordination_v1beta1.ListCoordinationV1beta1LeaseForAllNamespacesHandler
	// CoordinationV1beta1ListCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the list coordination v1beta1 namespaced lease operation
	CoordinationV1beta1ListCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.ListCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1ListCoreV1ComponentStatusHandler sets the operation handler for the list core v1 component status operation
	CoreV1ListCoreV1ComponentStatusHandler core_v1.ListCoreV1ComponentStatusHandler
	// CoreV1ListCoreV1ConfigMapForAllNamespacesHandler sets the operation handler for the list core v1 config map for all namespaces operation
	CoreV1ListCoreV1ConfigMapForAllNamespacesHandler core_v1.ListCoreV1ConfigMapForAllNamespacesHandler
	// CoreV1ListCoreV1EndpointsForAllNamespacesHandler sets the operation handler for the list core v1 endpoints for all namespaces operation
	CoreV1ListCoreV1EndpointsForAllNamespacesHandler core_v1.ListCoreV1EndpointsForAllNamespacesHandler
	// CoreV1ListCoreV1EventForAllNamespacesHandler sets the operation handler for the list core v1 event for all namespaces operation
	CoreV1ListCoreV1EventForAllNamespacesHandler core_v1.ListCoreV1EventForAllNamespacesHandler
	// CoreV1ListCoreV1LimitRangeForAllNamespacesHandler sets the operation handler for the list core v1 limit range for all namespaces operation
	CoreV1ListCoreV1LimitRangeForAllNamespacesHandler core_v1.ListCoreV1LimitRangeForAllNamespacesHandler
	// CoreV1ListCoreV1NamespaceHandler sets the operation handler for the list core v1 namespace operation
	CoreV1ListCoreV1NamespaceHandler core_v1.ListCoreV1NamespaceHandler
	// CoreV1ListCoreV1NamespacedConfigMapHandler sets the operation handler for the list core v1 namespaced config map operation
	CoreV1ListCoreV1NamespacedConfigMapHandler core_v1.ListCoreV1NamespacedConfigMapHandler
	// CoreV1ListCoreV1NamespacedEndpointsHandler sets the operation handler for the list core v1 namespaced endpoints operation
	CoreV1ListCoreV1NamespacedEndpointsHandler core_v1.ListCoreV1NamespacedEndpointsHandler
	// CoreV1ListCoreV1NamespacedEventHandler sets the operation handler for the list core v1 namespaced event operation
	CoreV1ListCoreV1NamespacedEventHandler core_v1.ListCoreV1NamespacedEventHandler
	// CoreV1ListCoreV1NamespacedLimitRangeHandler sets the operation handler for the list core v1 namespaced limit range operation
	CoreV1ListCoreV1NamespacedLimitRangeHandler core_v1.ListCoreV1NamespacedLimitRangeHandler
	// CoreV1ListCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the list core v1 namespaced persistent volume claim operation
	CoreV1ListCoreV1NamespacedPersistentVolumeClaimHandler core_v1.ListCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1ListCoreV1NamespacedPodHandler sets the operation handler for the list core v1 namespaced pod operation
	CoreV1ListCoreV1NamespacedPodHandler core_v1.ListCoreV1NamespacedPodHandler
	// CoreV1ListCoreV1NamespacedPodTemplateHandler sets the operation handler for the list core v1 namespaced pod template operation
	CoreV1ListCoreV1NamespacedPodTemplateHandler core_v1.ListCoreV1NamespacedPodTemplateHandler
	// CoreV1ListCoreV1NamespacedReplicationControllerHandler sets the operation handler for the list core v1 namespaced replication controller operation
	CoreV1ListCoreV1NamespacedReplicationControllerHandler core_v1.ListCoreV1NamespacedReplicationControllerHandler
	// CoreV1ListCoreV1NamespacedResourceQuotaHandler sets the operation handler for the list core v1 namespaced resource quota operation
	CoreV1ListCoreV1NamespacedResourceQuotaHandler core_v1.ListCoreV1NamespacedResourceQuotaHandler
	// CoreV1ListCoreV1NamespacedSecretHandler sets the operation handler for the list core v1 namespaced secret operation
	CoreV1ListCoreV1NamespacedSecretHandler core_v1.ListCoreV1NamespacedSecretHandler
	// CoreV1ListCoreV1NamespacedServiceHandler sets the operation handler for the list core v1 namespaced service operation
	CoreV1ListCoreV1NamespacedServiceHandler core_v1.ListCoreV1NamespacedServiceHandler
	// CoreV1ListCoreV1NamespacedServiceAccountHandler sets the operation handler for the list core v1 namespaced service account operation
	CoreV1ListCoreV1NamespacedServiceAccountHandler core_v1.ListCoreV1NamespacedServiceAccountHandler
	// CoreV1ListCoreV1NodeHandler sets the operation handler for the list core v1 node operation
	CoreV1ListCoreV1NodeHandler core_v1.ListCoreV1NodeHandler
	// CoreV1ListCoreV1PersistentVolumeHandler sets the operation handler for the list core v1 persistent volume operation
	CoreV1ListCoreV1PersistentVolumeHandler core_v1.ListCoreV1PersistentVolumeHandler
	// CoreV1ListCoreV1PersistentVolumeClaimForAllNamespacesHandler sets the operation handler for the list core v1 persistent volume claim for all namespaces operation
	CoreV1ListCoreV1PersistentVolumeClaimForAllNamespacesHandler core_v1.ListCoreV1PersistentVolumeClaimForAllNamespacesHandler
	// CoreV1ListCoreV1PodForAllNamespacesHandler sets the operation handler for the list core v1 pod for all namespaces operation
	CoreV1ListCoreV1PodForAllNamespacesHandler core_v1.ListCoreV1PodForAllNamespacesHandler
	// CoreV1ListCoreV1PodTemplateForAllNamespacesHandler sets the operation handler for the list core v1 pod template for all namespaces operation
	CoreV1ListCoreV1PodTemplateForAllNamespacesHandler core_v1.ListCoreV1PodTemplateForAllNamespacesHandler
	// CoreV1ListCoreV1ReplicationControllerForAllNamespacesHandler sets the operation handler for the list core v1 replication controller for all namespaces operation
	CoreV1ListCoreV1ReplicationControllerForAllNamespacesHandler core_v1.ListCoreV1ReplicationControllerForAllNamespacesHandler
	// CoreV1ListCoreV1ResourceQuotaForAllNamespacesHandler sets the operation handler for the list core v1 resource quota for all namespaces operation
	CoreV1ListCoreV1ResourceQuotaForAllNamespacesHandler core_v1.ListCoreV1ResourceQuotaForAllNamespacesHandler
	// CoreV1ListCoreV1SecretForAllNamespacesHandler sets the operation handler for the list core v1 secret for all namespaces operation
	CoreV1ListCoreV1SecretForAllNamespacesHandler core_v1.ListCoreV1SecretForAllNamespacesHandler
	// CoreV1ListCoreV1ServiceAccountForAllNamespacesHandler sets the operation handler for the list core v1 service account for all namespaces operation
	CoreV1ListCoreV1ServiceAccountForAllNamespacesHandler core_v1.ListCoreV1ServiceAccountForAllNamespacesHandler
	// CoreV1ListCoreV1ServiceForAllNamespacesHandler sets the operation handler for the list core v1 service for all namespaces operation
	CoreV1ListCoreV1ServiceForAllNamespacesHandler core_v1.ListCoreV1ServiceForAllNamespacesHandler
	// DiscoveryV1beta1ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler sets the operation handler for the list discovery v1beta1 endpoint slice for all namespaces operation
	DiscoveryV1beta1ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler discovery_v1beta1.ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler
	// DiscoveryV1beta1ListDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the list discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1ListDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.ListDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1ListEventsV1EventForAllNamespacesHandler sets the operation handler for the list events v1 event for all namespaces operation
	EventsV1ListEventsV1EventForAllNamespacesHandler events_v1.ListEventsV1EventForAllNamespacesHandler
	// EventsV1ListEventsV1NamespacedEventHandler sets the operation handler for the list events v1 namespaced event operation
	EventsV1ListEventsV1NamespacedEventHandler events_v1.ListEventsV1NamespacedEventHandler
	// EventsV1beta1ListEventsV1beta1EventForAllNamespacesHandler sets the operation handler for the list events v1beta1 event for all namespaces operation
	EventsV1beta1ListEventsV1beta1EventForAllNamespacesHandler events_v1beta1.ListEventsV1beta1EventForAllNamespacesHandler
	// EventsV1beta1ListEventsV1beta1NamespacedEventHandler sets the operation handler for the list events v1beta1 namespaced event operation
	EventsV1beta1ListEventsV1beta1NamespacedEventHandler events_v1beta1.ListEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1ListExtensionsV1beta1IngressForAllNamespacesHandler sets the operation handler for the list extensions v1beta1 ingress for all namespaces operation
	ExtensionsV1beta1ListExtensionsV1beta1IngressForAllNamespacesHandler extensions_v1beta1.ListExtensionsV1beta1IngressForAllNamespacesHandler
	// ExtensionsV1beta1ListExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the list extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1ListExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.ListExtensionsV1beta1NamespacedIngressHandler
	// FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the list flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the list flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// NetworkingV1ListNetworkingV1IngressClassHandler sets the operation handler for the list networking v1 ingress class operation
	NetworkingV1ListNetworkingV1IngressClassHandler networking_v1.ListNetworkingV1IngressClassHandler
	// NetworkingV1ListNetworkingV1IngressForAllNamespacesHandler sets the operation handler for the list networking v1 ingress for all namespaces operation
	NetworkingV1ListNetworkingV1IngressForAllNamespacesHandler networking_v1.ListNetworkingV1IngressForAllNamespacesHandler
	// NetworkingV1ListNetworkingV1NamespacedIngressHandler sets the operation handler for the list networking v1 namespaced ingress operation
	NetworkingV1ListNetworkingV1NamespacedIngressHandler networking_v1.ListNetworkingV1NamespacedIngressHandler
	// NetworkingV1ListNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the list networking v1 namespaced network policy operation
	NetworkingV1ListNetworkingV1NamespacedNetworkPolicyHandler networking_v1.ListNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1ListNetworkingV1NetworkPolicyForAllNamespacesHandler sets the operation handler for the list networking v1 network policy for all namespaces operation
	NetworkingV1ListNetworkingV1NetworkPolicyForAllNamespacesHandler networking_v1.ListNetworkingV1NetworkPolicyForAllNamespacesHandler
	// NetworkingV1beta1ListNetworkingV1beta1IngressClassHandler sets the operation handler for the list networking v1beta1 ingress class operation
	NetworkingV1beta1ListNetworkingV1beta1IngressClassHandler networking_v1beta1.ListNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1ListNetworkingV1beta1IngressForAllNamespacesHandler sets the operation handler for the list networking v1beta1 ingress for all namespaces operation
	NetworkingV1beta1ListNetworkingV1beta1IngressForAllNamespacesHandler networking_v1beta1.ListNetworkingV1beta1IngressForAllNamespacesHandler
	// NetworkingV1beta1ListNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the list networking v1beta1 namespaced ingress operation
	NetworkingV1beta1ListNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.ListNetworkingV1beta1NamespacedIngressHandler
	// NodeV1alpha1ListNodeV1alpha1RuntimeClassHandler sets the operation handler for the list node v1alpha1 runtime class operation
	NodeV1alpha1ListNodeV1alpha1RuntimeClassHandler node_v1alpha1.ListNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1ListNodeV1beta1RuntimeClassHandler sets the operation handler for the list node v1beta1 runtime class operation
	NodeV1beta1ListNodeV1beta1RuntimeClassHandler node_v1beta1.ListNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the list policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler sets the operation handler for the list policy v1beta1 pod disruption budget for all namespaces operation
	PolicyV1beta1ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler policy_v1beta1.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler
	// PolicyV1beta1ListPolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the list policy v1beta1 pod security policy operation
	PolicyV1beta1ListPolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.ListPolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the list rbac authorization v1 cluster role operation
	RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the list rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the list rbac authorization v1 namespaced role operation
	RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the list rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler sets the operation handler for the list rbac authorization v1 role binding for all namespaces operation
	RbacAuthorizationV1ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler rbac_authorization_v1.ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler
	// RbacAuthorizationV1ListRbacAuthorizationV1RoleForAllNamespacesHandler sets the operation handler for the list rbac authorization v1 role for all namespaces operation
	RbacAuthorizationV1ListRbacAuthorizationV1RoleForAllNamespacesHandler rbac_authorization_v1.ListRbacAuthorizationV1RoleForAllNamespacesHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the list rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the list rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the list rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the list rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler sets the operation handler for the list rbac authorization v1alpha1 role binding for all namespaces operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler
	// RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler sets the operation handler for the list rbac authorization v1alpha1 role for all namespaces operation
	RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the list rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the list rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the list rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the list rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler sets the operation handler for the list rbac authorization v1beta1 role binding for all namespaces operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler
	// RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler sets the operation handler for the list rbac authorization v1beta1 role for all namespaces operation
	RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler
	// SchedulingV1ListSchedulingV1PriorityClassHandler sets the operation handler for the list scheduling v1 priority class operation
	SchedulingV1ListSchedulingV1PriorityClassHandler scheduling_v1.ListSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1ListSchedulingV1alpha1PriorityClassHandler sets the operation handler for the list scheduling v1alpha1 priority class operation
	SchedulingV1alpha1ListSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.ListSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1ListSchedulingV1beta1PriorityClassHandler sets the operation handler for the list scheduling v1beta1 priority class operation
	SchedulingV1beta1ListSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.ListSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1ListSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the list settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1ListSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.ListSettingsV1alpha1NamespacedPodPresetHandler
	// SettingsV1alpha1ListSettingsV1alpha1PodPresetForAllNamespacesHandler sets the operation handler for the list settings v1alpha1 pod preset for all namespaces operation
	SettingsV1alpha1ListSettingsV1alpha1PodPresetForAllNamespacesHandler settings_v1alpha1.ListSettingsV1alpha1PodPresetForAllNamespacesHandler
	// StorageV1ListStorageV1CSIDriverHandler sets the operation handler for the list storage v1 c s i driver operation
	StorageV1ListStorageV1CSIDriverHandler storage_v1.ListStorageV1CSIDriverHandler
	// StorageV1ListStorageV1CSINodeHandler sets the operation handler for the list storage v1 c s i node operation
	StorageV1ListStorageV1CSINodeHandler storage_v1.ListStorageV1CSINodeHandler
	// StorageV1ListStorageV1StorageClassHandler sets the operation handler for the list storage v1 storage class operation
	StorageV1ListStorageV1StorageClassHandler storage_v1.ListStorageV1StorageClassHandler
	// StorageV1ListStorageV1VolumeAttachmentHandler sets the operation handler for the list storage v1 volume attachment operation
	StorageV1ListStorageV1VolumeAttachmentHandler storage_v1.ListStorageV1VolumeAttachmentHandler
	// StorageV1alpha1ListStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the list storage v1alpha1 volume attachment operation
	StorageV1alpha1ListStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.ListStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1ListStorageV1beta1CSIDriverHandler sets the operation handler for the list storage v1beta1 c s i driver operation
	StorageV1beta1ListStorageV1beta1CSIDriverHandler storage_v1beta1.ListStorageV1beta1CSIDriverHandler
	// StorageV1beta1ListStorageV1beta1CSINodeHandler sets the operation handler for the list storage v1beta1 c s i node operation
	StorageV1beta1ListStorageV1beta1CSINodeHandler storage_v1beta1.ListStorageV1beta1CSINodeHandler
	// StorageV1beta1ListStorageV1beta1StorageClassHandler sets the operation handler for the list storage v1beta1 storage class operation
	StorageV1beta1ListStorageV1beta1StorageClassHandler storage_v1beta1.ListStorageV1beta1StorageClassHandler
	// StorageV1beta1ListStorageV1beta1VolumeAttachmentHandler sets the operation handler for the list storage v1beta1 volume attachment operation
	StorageV1beta1ListStorageV1beta1VolumeAttachmentHandler storage_v1beta1.ListStorageV1beta1VolumeAttachmentHandler
	// LogsLogFileHandlerHandler sets the operation handler for the log file handler operation
	LogsLogFileHandlerHandler logs.LogFileHandlerHandler
	// LogsLogFileListHandlerHandler sets the operation handler for the log file list handler operation
	LogsLogFileListHandlerHandler logs.LogFileListHandlerHandler
	// AdmissionregistrationV1PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the patch admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the patch admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the patch admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the patch admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the patch apiextensions v1 custom resource definition operation
	ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionStatusHandler sets the operation handler for the patch apiextensions v1 custom resource definition status operation
	ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionStatusHandler apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionStatusHandler
	// ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the patch apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler sets the operation handler for the patch apiextensions v1beta1 custom resource definition status operation
	ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler
	// ApiregistrationV1PatchApiregistrationV1APIServiceHandler sets the operation handler for the patch apiregistration v1 API service operation
	ApiregistrationV1PatchApiregistrationV1APIServiceHandler apiregistration_v1.PatchApiregistrationV1APIServiceHandler
	// ApiregistrationV1PatchApiregistrationV1APIServiceStatusHandler sets the operation handler for the patch apiregistration v1 API service status operation
	ApiregistrationV1PatchApiregistrationV1APIServiceStatusHandler apiregistration_v1.PatchApiregistrationV1APIServiceStatusHandler
	// ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceHandler sets the operation handler for the patch apiregistration v1beta1 API service operation
	ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceHandler
	// ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceStatusHandler sets the operation handler for the patch apiregistration v1beta1 API service status operation
	ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceStatusHandler apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceStatusHandler
	// AppsV1PatchAppsV1NamespacedControllerRevisionHandler sets the operation handler for the patch apps v1 namespaced controller revision operation
	AppsV1PatchAppsV1NamespacedControllerRevisionHandler apps_v1.PatchAppsV1NamespacedControllerRevisionHandler
	// AppsV1PatchAppsV1NamespacedDaemonSetHandler sets the operation handler for the patch apps v1 namespaced daemon set operation
	AppsV1PatchAppsV1NamespacedDaemonSetHandler apps_v1.PatchAppsV1NamespacedDaemonSetHandler
	// AppsV1PatchAppsV1NamespacedDaemonSetStatusHandler sets the operation handler for the patch apps v1 namespaced daemon set status operation
	AppsV1PatchAppsV1NamespacedDaemonSetStatusHandler apps_v1.PatchAppsV1NamespacedDaemonSetStatusHandler
	// AppsV1PatchAppsV1NamespacedDeploymentHandler sets the operation handler for the patch apps v1 namespaced deployment operation
	AppsV1PatchAppsV1NamespacedDeploymentHandler apps_v1.PatchAppsV1NamespacedDeploymentHandler
	// AppsV1PatchAppsV1NamespacedDeploymentScaleHandler sets the operation handler for the patch apps v1 namespaced deployment scale operation
	AppsV1PatchAppsV1NamespacedDeploymentScaleHandler apps_v1.PatchAppsV1NamespacedDeploymentScaleHandler
	// AppsV1PatchAppsV1NamespacedDeploymentStatusHandler sets the operation handler for the patch apps v1 namespaced deployment status operation
	AppsV1PatchAppsV1NamespacedDeploymentStatusHandler apps_v1.PatchAppsV1NamespacedDeploymentStatusHandler
	// AppsV1PatchAppsV1NamespacedReplicaSetHandler sets the operation handler for the patch apps v1 namespaced replica set operation
	AppsV1PatchAppsV1NamespacedReplicaSetHandler apps_v1.PatchAppsV1NamespacedReplicaSetHandler
	// AppsV1PatchAppsV1NamespacedReplicaSetScaleHandler sets the operation handler for the patch apps v1 namespaced replica set scale operation
	AppsV1PatchAppsV1NamespacedReplicaSetScaleHandler apps_v1.PatchAppsV1NamespacedReplicaSetScaleHandler
	// AppsV1PatchAppsV1NamespacedReplicaSetStatusHandler sets the operation handler for the patch apps v1 namespaced replica set status operation
	AppsV1PatchAppsV1NamespacedReplicaSetStatusHandler apps_v1.PatchAppsV1NamespacedReplicaSetStatusHandler
	// AppsV1PatchAppsV1NamespacedStatefulSetHandler sets the operation handler for the patch apps v1 namespaced stateful set operation
	AppsV1PatchAppsV1NamespacedStatefulSetHandler apps_v1.PatchAppsV1NamespacedStatefulSetHandler
	// AppsV1PatchAppsV1NamespacedStatefulSetScaleHandler sets the operation handler for the patch apps v1 namespaced stateful set scale operation
	AppsV1PatchAppsV1NamespacedStatefulSetScaleHandler apps_v1.PatchAppsV1NamespacedStatefulSetScaleHandler
	// AppsV1PatchAppsV1NamespacedStatefulSetStatusHandler sets the operation handler for the patch apps v1 namespaced stateful set status operation
	AppsV1PatchAppsV1NamespacedStatefulSetStatusHandler apps_v1.PatchAppsV1NamespacedStatefulSetStatusHandler
	// AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the patch autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the patch autoscaling v1 namespaced horizontal pod autoscaler status operation
	AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the patch autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the patch autoscaling v2beta1 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the patch autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the patch autoscaling v2beta2 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler
	// BatchV1PatchBatchV1NamespacedJobHandler sets the operation handler for the patch batch v1 namespaced job operation
	BatchV1PatchBatchV1NamespacedJobHandler batch_v1.PatchBatchV1NamespacedJobHandler
	// BatchV1PatchBatchV1NamespacedJobStatusHandler sets the operation handler for the patch batch v1 namespaced job status operation
	BatchV1PatchBatchV1NamespacedJobStatusHandler batch_v1.PatchBatchV1NamespacedJobStatusHandler
	// BatchV1beta1PatchBatchV1beta1NamespacedCronJobHandler sets the operation handler for the patch batch v1beta1 namespaced cron job operation
	BatchV1beta1PatchBatchV1beta1NamespacedCronJobHandler batch_v1beta1.PatchBatchV1beta1NamespacedCronJobHandler
	// BatchV1beta1PatchBatchV1beta1NamespacedCronJobStatusHandler sets the operation handler for the patch batch v1beta1 namespaced cron job status operation
	BatchV1beta1PatchBatchV1beta1NamespacedCronJobStatusHandler batch_v1beta1.PatchBatchV1beta1NamespacedCronJobStatusHandler
	// BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the patch batch v2alpha1 namespaced cron job operation
	BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobHandler
	// BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobStatusHandler sets the operation handler for the patch batch v2alpha1 namespaced cron job status operation
	BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobStatusHandler batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobStatusHandler
	// CertificatesV1PatchCertificatesV1CertificateSigningRequestHandler sets the operation handler for the patch certificates v1 certificate signing request operation
	CertificatesV1PatchCertificatesV1CertificateSigningRequestHandler certificates_v1.PatchCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1PatchCertificatesV1CertificateSigningRequestApprovalHandler sets the operation handler for the patch certificates v1 certificate signing request approval operation
	CertificatesV1PatchCertificatesV1CertificateSigningRequestApprovalHandler certificates_v1.PatchCertificatesV1CertificateSigningRequestApprovalHandler
	// CertificatesV1PatchCertificatesV1CertificateSigningRequestStatusHandler sets the operation handler for the patch certificates v1 certificate signing request status operation
	CertificatesV1PatchCertificatesV1CertificateSigningRequestStatusHandler certificates_v1.PatchCertificatesV1CertificateSigningRequestStatusHandler
	// CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the patch certificates v1beta1 certificate signing request operation
	CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestHandler
	// CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler sets the operation handler for the patch certificates v1beta1 certificate signing request approval operation
	CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler
	// CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestStatusHandler sets the operation handler for the patch certificates v1beta1 certificate signing request status operation
	CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestStatusHandler certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestStatusHandler
	// CoordinationV1PatchCoordinationV1NamespacedLeaseHandler sets the operation handler for the patch coordination v1 namespaced lease operation
	CoordinationV1PatchCoordinationV1NamespacedLeaseHandler coordination_v1.PatchCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1PatchCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the patch coordination v1beta1 namespaced lease operation
	CoordinationV1beta1PatchCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.PatchCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1PatchCoreV1NamespaceHandler sets the operation handler for the patch core v1 namespace operation
	CoreV1PatchCoreV1NamespaceHandler core_v1.PatchCoreV1NamespaceHandler
	// CoreV1PatchCoreV1NamespaceStatusHandler sets the operation handler for the patch core v1 namespace status operation
	CoreV1PatchCoreV1NamespaceStatusHandler core_v1.PatchCoreV1NamespaceStatusHandler
	// CoreV1PatchCoreV1NamespacedConfigMapHandler sets the operation handler for the patch core v1 namespaced config map operation
	CoreV1PatchCoreV1NamespacedConfigMapHandler core_v1.PatchCoreV1NamespacedConfigMapHandler
	// CoreV1PatchCoreV1NamespacedEndpointsHandler sets the operation handler for the patch core v1 namespaced endpoints operation
	CoreV1PatchCoreV1NamespacedEndpointsHandler core_v1.PatchCoreV1NamespacedEndpointsHandler
	// CoreV1PatchCoreV1NamespacedEventHandler sets the operation handler for the patch core v1 namespaced event operation
	CoreV1PatchCoreV1NamespacedEventHandler core_v1.PatchCoreV1NamespacedEventHandler
	// CoreV1PatchCoreV1NamespacedLimitRangeHandler sets the operation handler for the patch core v1 namespaced limit range operation
	CoreV1PatchCoreV1NamespacedLimitRangeHandler core_v1.PatchCoreV1NamespacedLimitRangeHandler
	// CoreV1PatchCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the patch core v1 namespaced persistent volume claim operation
	CoreV1PatchCoreV1NamespacedPersistentVolumeClaimHandler core_v1.PatchCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler sets the operation handler for the patch core v1 namespaced persistent volume claim status operation
	CoreV1PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler core_v1.PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler
	// CoreV1PatchCoreV1NamespacedPodHandler sets the operation handler for the patch core v1 namespaced pod operation
	CoreV1PatchCoreV1NamespacedPodHandler core_v1.PatchCoreV1NamespacedPodHandler
	// CoreV1PatchCoreV1NamespacedPodStatusHandler sets the operation handler for the patch core v1 namespaced pod status operation
	CoreV1PatchCoreV1NamespacedPodStatusHandler core_v1.PatchCoreV1NamespacedPodStatusHandler
	// CoreV1PatchCoreV1NamespacedPodTemplateHandler sets the operation handler for the patch core v1 namespaced pod template operation
	CoreV1PatchCoreV1NamespacedPodTemplateHandler core_v1.PatchCoreV1NamespacedPodTemplateHandler
	// CoreV1PatchCoreV1NamespacedReplicationControllerHandler sets the operation handler for the patch core v1 namespaced replication controller operation
	CoreV1PatchCoreV1NamespacedReplicationControllerHandler core_v1.PatchCoreV1NamespacedReplicationControllerHandler
	// CoreV1PatchCoreV1NamespacedReplicationControllerScaleHandler sets the operation handler for the patch core v1 namespaced replication controller scale operation
	CoreV1PatchCoreV1NamespacedReplicationControllerScaleHandler core_v1.PatchCoreV1NamespacedReplicationControllerScaleHandler
	// CoreV1PatchCoreV1NamespacedReplicationControllerStatusHandler sets the operation handler for the patch core v1 namespaced replication controller status operation
	CoreV1PatchCoreV1NamespacedReplicationControllerStatusHandler core_v1.PatchCoreV1NamespacedReplicationControllerStatusHandler
	// CoreV1PatchCoreV1NamespacedResourceQuotaHandler sets the operation handler for the patch core v1 namespaced resource quota operation
	CoreV1PatchCoreV1NamespacedResourceQuotaHandler core_v1.PatchCoreV1NamespacedResourceQuotaHandler
	// CoreV1PatchCoreV1NamespacedResourceQuotaStatusHandler sets the operation handler for the patch core v1 namespaced resource quota status operation
	CoreV1PatchCoreV1NamespacedResourceQuotaStatusHandler core_v1.PatchCoreV1NamespacedResourceQuotaStatusHandler
	// CoreV1PatchCoreV1NamespacedSecretHandler sets the operation handler for the patch core v1 namespaced secret operation
	CoreV1PatchCoreV1NamespacedSecretHandler core_v1.PatchCoreV1NamespacedSecretHandler
	// CoreV1PatchCoreV1NamespacedServiceHandler sets the operation handler for the patch core v1 namespaced service operation
	CoreV1PatchCoreV1NamespacedServiceHandler core_v1.PatchCoreV1NamespacedServiceHandler
	// CoreV1PatchCoreV1NamespacedServiceAccountHandler sets the operation handler for the patch core v1 namespaced service account operation
	CoreV1PatchCoreV1NamespacedServiceAccountHandler core_v1.PatchCoreV1NamespacedServiceAccountHandler
	// CoreV1PatchCoreV1NamespacedServiceStatusHandler sets the operation handler for the patch core v1 namespaced service status operation
	CoreV1PatchCoreV1NamespacedServiceStatusHandler core_v1.PatchCoreV1NamespacedServiceStatusHandler
	// CoreV1PatchCoreV1NodeHandler sets the operation handler for the patch core v1 node operation
	CoreV1PatchCoreV1NodeHandler core_v1.PatchCoreV1NodeHandler
	// CoreV1PatchCoreV1NodeStatusHandler sets the operation handler for the patch core v1 node status operation
	CoreV1PatchCoreV1NodeStatusHandler core_v1.PatchCoreV1NodeStatusHandler
	// CoreV1PatchCoreV1PersistentVolumeHandler sets the operation handler for the patch core v1 persistent volume operation
	CoreV1PatchCoreV1PersistentVolumeHandler core_v1.PatchCoreV1PersistentVolumeHandler
	// CoreV1PatchCoreV1PersistentVolumeStatusHandler sets the operation handler for the patch core v1 persistent volume status operation
	CoreV1PatchCoreV1PersistentVolumeStatusHandler core_v1.PatchCoreV1PersistentVolumeStatusHandler
	// DiscoveryV1beta1PatchDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the patch discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1PatchDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.PatchDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1PatchEventsV1NamespacedEventHandler sets the operation handler for the patch events v1 namespaced event operation
	EventsV1PatchEventsV1NamespacedEventHandler events_v1.PatchEventsV1NamespacedEventHandler
	// EventsV1beta1PatchEventsV1beta1NamespacedEventHandler sets the operation handler for the patch events v1beta1 namespaced event operation
	EventsV1beta1PatchEventsV1beta1NamespacedEventHandler events_v1beta1.PatchEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the patch extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressHandler
	// ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressStatusHandler sets the operation handler for the patch extensions v1beta1 namespaced ingress status operation
	ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressStatusHandler extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressStatusHandler
	// FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the patch flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler sets the operation handler for the patch flowcontrol apiserver v1alpha1 flow schema status operation
	FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler
	// FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the patch flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler sets the operation handler for the patch flowcontrol apiserver v1alpha1 priority level configuration status operation
	FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler
	// NetworkingV1PatchNetworkingV1IngressClassHandler sets the operation handler for the patch networking v1 ingress class operation
	NetworkingV1PatchNetworkingV1IngressClassHandler networking_v1.PatchNetworkingV1IngressClassHandler
	// NetworkingV1PatchNetworkingV1NamespacedIngressHandler sets the operation handler for the patch networking v1 namespaced ingress operation
	NetworkingV1PatchNetworkingV1NamespacedIngressHandler networking_v1.PatchNetworkingV1NamespacedIngressHandler
	// NetworkingV1PatchNetworkingV1NamespacedIngressStatusHandler sets the operation handler for the patch networking v1 namespaced ingress status operation
	NetworkingV1PatchNetworkingV1NamespacedIngressStatusHandler networking_v1.PatchNetworkingV1NamespacedIngressStatusHandler
	// NetworkingV1PatchNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the patch networking v1 namespaced network policy operation
	NetworkingV1PatchNetworkingV1NamespacedNetworkPolicyHandler networking_v1.PatchNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1beta1PatchNetworkingV1beta1IngressClassHandler sets the operation handler for the patch networking v1beta1 ingress class operation
	NetworkingV1beta1PatchNetworkingV1beta1IngressClassHandler networking_v1beta1.PatchNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the patch networking v1beta1 namespaced ingress operation
	NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressHandler
	// NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressStatusHandler sets the operation handler for the patch networking v1beta1 namespaced ingress status operation
	NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressStatusHandler networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressStatusHandler
	// NodeV1alpha1PatchNodeV1alpha1RuntimeClassHandler sets the operation handler for the patch node v1alpha1 runtime class operation
	NodeV1alpha1PatchNodeV1alpha1RuntimeClassHandler node_v1alpha1.PatchNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1PatchNodeV1beta1RuntimeClassHandler sets the operation handler for the patch node v1beta1 runtime class operation
	NodeV1beta1PatchNodeV1beta1RuntimeClassHandler node_v1beta1.PatchNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the patch policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler sets the operation handler for the patch policy v1beta1 namespaced pod disruption budget status operation
	PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler
	// PolicyV1beta1PatchPolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the patch policy v1beta1 pod security policy operation
	PolicyV1beta1PatchPolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.PatchPolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the patch rbac authorization v1 cluster role operation
	RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the patch rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the patch rbac authorization v1 namespaced role operation
	RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the patch rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the patch rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the patch rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the patch rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the patch rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the patch rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the patch rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the patch rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the patch rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// SchedulingV1PatchSchedulingV1PriorityClassHandler sets the operation handler for the patch scheduling v1 priority class operation
	SchedulingV1PatchSchedulingV1PriorityClassHandler scheduling_v1.PatchSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1PatchSchedulingV1alpha1PriorityClassHandler sets the operation handler for the patch scheduling v1alpha1 priority class operation
	SchedulingV1alpha1PatchSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.PatchSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1PatchSchedulingV1beta1PriorityClassHandler sets the operation handler for the patch scheduling v1beta1 priority class operation
	SchedulingV1beta1PatchSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.PatchSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1PatchSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the patch settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1PatchSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.PatchSettingsV1alpha1NamespacedPodPresetHandler
	// StorageV1PatchStorageV1CSIDriverHandler sets the operation handler for the patch storage v1 c s i driver operation
	StorageV1PatchStorageV1CSIDriverHandler storage_v1.PatchStorageV1CSIDriverHandler
	// StorageV1PatchStorageV1CSINodeHandler sets the operation handler for the patch storage v1 c s i node operation
	StorageV1PatchStorageV1CSINodeHandler storage_v1.PatchStorageV1CSINodeHandler
	// StorageV1PatchStorageV1StorageClassHandler sets the operation handler for the patch storage v1 storage class operation
	StorageV1PatchStorageV1StorageClassHandler storage_v1.PatchStorageV1StorageClassHandler
	// StorageV1PatchStorageV1VolumeAttachmentHandler sets the operation handler for the patch storage v1 volume attachment operation
	StorageV1PatchStorageV1VolumeAttachmentHandler storage_v1.PatchStorageV1VolumeAttachmentHandler
	// StorageV1PatchStorageV1VolumeAttachmentStatusHandler sets the operation handler for the patch storage v1 volume attachment status operation
	StorageV1PatchStorageV1VolumeAttachmentStatusHandler storage_v1.PatchStorageV1VolumeAttachmentStatusHandler
	// StorageV1alpha1PatchStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the patch storage v1alpha1 volume attachment operation
	StorageV1alpha1PatchStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.PatchStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1PatchStorageV1beta1CSIDriverHandler sets the operation handler for the patch storage v1beta1 c s i driver operation
	StorageV1beta1PatchStorageV1beta1CSIDriverHandler storage_v1beta1.PatchStorageV1beta1CSIDriverHandler
	// StorageV1beta1PatchStorageV1beta1CSINodeHandler sets the operation handler for the patch storage v1beta1 c s i node operation
	StorageV1beta1PatchStorageV1beta1CSINodeHandler storage_v1beta1.PatchStorageV1beta1CSINodeHandler
	// StorageV1beta1PatchStorageV1beta1StorageClassHandler sets the operation handler for the patch storage v1beta1 storage class operation
	StorageV1beta1PatchStorageV1beta1StorageClassHandler storage_v1beta1.PatchStorageV1beta1StorageClassHandler
	// StorageV1beta1PatchStorageV1beta1VolumeAttachmentHandler sets the operation handler for the patch storage v1beta1 volume attachment operation
	StorageV1beta1PatchStorageV1beta1VolumeAttachmentHandler storage_v1beta1.PatchStorageV1beta1VolumeAttachmentHandler
	// AdmissionregistrationV1ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the read admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the read admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the read admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the read admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the read apiextensions v1 custom resource definition operation
	ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionStatusHandler sets the operation handler for the read apiextensions v1 custom resource definition status operation
	ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionStatusHandler apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionStatusHandler
	// ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the read apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler sets the operation handler for the read apiextensions v1beta1 custom resource definition status operation
	ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler
	// ApiregistrationV1ReadApiregistrationV1APIServiceHandler sets the operation handler for the read apiregistration v1 API service operation
	ApiregistrationV1ReadApiregistrationV1APIServiceHandler apiregistration_v1.ReadApiregistrationV1APIServiceHandler
	// ApiregistrationV1ReadApiregistrationV1APIServiceStatusHandler sets the operation handler for the read apiregistration v1 API service status operation
	ApiregistrationV1ReadApiregistrationV1APIServiceStatusHandler apiregistration_v1.ReadApiregistrationV1APIServiceStatusHandler
	// ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceHandler sets the operation handler for the read apiregistration v1beta1 API service operation
	ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceHandler
	// ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceStatusHandler sets the operation handler for the read apiregistration v1beta1 API service status operation
	ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceStatusHandler apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceStatusHandler
	// AppsV1ReadAppsV1NamespacedControllerRevisionHandler sets the operation handler for the read apps v1 namespaced controller revision operation
	AppsV1ReadAppsV1NamespacedControllerRevisionHandler apps_v1.ReadAppsV1NamespacedControllerRevisionHandler
	// AppsV1ReadAppsV1NamespacedDaemonSetHandler sets the operation handler for the read apps v1 namespaced daemon set operation
	AppsV1ReadAppsV1NamespacedDaemonSetHandler apps_v1.ReadAppsV1NamespacedDaemonSetHandler
	// AppsV1ReadAppsV1NamespacedDaemonSetStatusHandler sets the operation handler for the read apps v1 namespaced daemon set status operation
	AppsV1ReadAppsV1NamespacedDaemonSetStatusHandler apps_v1.ReadAppsV1NamespacedDaemonSetStatusHandler
	// AppsV1ReadAppsV1NamespacedDeploymentHandler sets the operation handler for the read apps v1 namespaced deployment operation
	AppsV1ReadAppsV1NamespacedDeploymentHandler apps_v1.ReadAppsV1NamespacedDeploymentHandler
	// AppsV1ReadAppsV1NamespacedDeploymentScaleHandler sets the operation handler for the read apps v1 namespaced deployment scale operation
	AppsV1ReadAppsV1NamespacedDeploymentScaleHandler apps_v1.ReadAppsV1NamespacedDeploymentScaleHandler
	// AppsV1ReadAppsV1NamespacedDeploymentStatusHandler sets the operation handler for the read apps v1 namespaced deployment status operation
	AppsV1ReadAppsV1NamespacedDeploymentStatusHandler apps_v1.ReadAppsV1NamespacedDeploymentStatusHandler
	// AppsV1ReadAppsV1NamespacedReplicaSetHandler sets the operation handler for the read apps v1 namespaced replica set operation
	AppsV1ReadAppsV1NamespacedReplicaSetHandler apps_v1.ReadAppsV1NamespacedReplicaSetHandler
	// AppsV1ReadAppsV1NamespacedReplicaSetScaleHandler sets the operation handler for the read apps v1 namespaced replica set scale operation
	AppsV1ReadAppsV1NamespacedReplicaSetScaleHandler apps_v1.ReadAppsV1NamespacedReplicaSetScaleHandler
	// AppsV1ReadAppsV1NamespacedReplicaSetStatusHandler sets the operation handler for the read apps v1 namespaced replica set status operation
	AppsV1ReadAppsV1NamespacedReplicaSetStatusHandler apps_v1.ReadAppsV1NamespacedReplicaSetStatusHandler
	// AppsV1ReadAppsV1NamespacedStatefulSetHandler sets the operation handler for the read apps v1 namespaced stateful set operation
	AppsV1ReadAppsV1NamespacedStatefulSetHandler apps_v1.ReadAppsV1NamespacedStatefulSetHandler
	// AppsV1ReadAppsV1NamespacedStatefulSetScaleHandler sets the operation handler for the read apps v1 namespaced stateful set scale operation
	AppsV1ReadAppsV1NamespacedStatefulSetScaleHandler apps_v1.ReadAppsV1NamespacedStatefulSetScaleHandler
	// AppsV1ReadAppsV1NamespacedStatefulSetStatusHandler sets the operation handler for the read apps v1 namespaced stateful set status operation
	AppsV1ReadAppsV1NamespacedStatefulSetStatusHandler apps_v1.ReadAppsV1NamespacedStatefulSetStatusHandler
	// AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the read autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the read autoscaling v1 namespaced horizontal pod autoscaler status operation
	AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the read autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the read autoscaling v2beta1 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the read autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the read autoscaling v2beta2 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler
	// BatchV1ReadBatchV1NamespacedJobHandler sets the operation handler for the read batch v1 namespaced job operation
	BatchV1ReadBatchV1NamespacedJobHandler batch_v1.ReadBatchV1NamespacedJobHandler
	// BatchV1ReadBatchV1NamespacedJobStatusHandler sets the operation handler for the read batch v1 namespaced job status operation
	BatchV1ReadBatchV1NamespacedJobStatusHandler batch_v1.ReadBatchV1NamespacedJobStatusHandler
	// BatchV1beta1ReadBatchV1beta1NamespacedCronJobHandler sets the operation handler for the read batch v1beta1 namespaced cron job operation
	BatchV1beta1ReadBatchV1beta1NamespacedCronJobHandler batch_v1beta1.ReadBatchV1beta1NamespacedCronJobHandler
	// BatchV1beta1ReadBatchV1beta1NamespacedCronJobStatusHandler sets the operation handler for the read batch v1beta1 namespaced cron job status operation
	BatchV1beta1ReadBatchV1beta1NamespacedCronJobStatusHandler batch_v1beta1.ReadBatchV1beta1NamespacedCronJobStatusHandler
	// BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the read batch v2alpha1 namespaced cron job operation
	BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobHandler
	// BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobStatusHandler sets the operation handler for the read batch v2alpha1 namespaced cron job status operation
	BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobStatusHandler batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobStatusHandler
	// CertificatesV1ReadCertificatesV1CertificateSigningRequestHandler sets the operation handler for the read certificates v1 certificate signing request operation
	CertificatesV1ReadCertificatesV1CertificateSigningRequestHandler certificates_v1.ReadCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1ReadCertificatesV1CertificateSigningRequestApprovalHandler sets the operation handler for the read certificates v1 certificate signing request approval operation
	CertificatesV1ReadCertificatesV1CertificateSigningRequestApprovalHandler certificates_v1.ReadCertificatesV1CertificateSigningRequestApprovalHandler
	// CertificatesV1ReadCertificatesV1CertificateSigningRequestStatusHandler sets the operation handler for the read certificates v1 certificate signing request status operation
	CertificatesV1ReadCertificatesV1CertificateSigningRequestStatusHandler certificates_v1.ReadCertificatesV1CertificateSigningRequestStatusHandler
	// CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the read certificates v1beta1 certificate signing request operation
	CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestHandler
	// CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler sets the operation handler for the read certificates v1beta1 certificate signing request approval operation
	CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler
	// CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestStatusHandler sets the operation handler for the read certificates v1beta1 certificate signing request status operation
	CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestStatusHandler certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestStatusHandler
	// CoordinationV1ReadCoordinationV1NamespacedLeaseHandler sets the operation handler for the read coordination v1 namespaced lease operation
	CoordinationV1ReadCoordinationV1NamespacedLeaseHandler coordination_v1.ReadCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1ReadCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the read coordination v1beta1 namespaced lease operation
	CoordinationV1beta1ReadCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.ReadCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1ReadCoreV1ComponentStatusHandler sets the operation handler for the read core v1 component status operation
	CoreV1ReadCoreV1ComponentStatusHandler core_v1.ReadCoreV1ComponentStatusHandler
	// CoreV1ReadCoreV1NamespaceHandler sets the operation handler for the read core v1 namespace operation
	CoreV1ReadCoreV1NamespaceHandler core_v1.ReadCoreV1NamespaceHandler
	// CoreV1ReadCoreV1NamespaceStatusHandler sets the operation handler for the read core v1 namespace status operation
	CoreV1ReadCoreV1NamespaceStatusHandler core_v1.ReadCoreV1NamespaceStatusHandler
	// CoreV1ReadCoreV1NamespacedConfigMapHandler sets the operation handler for the read core v1 namespaced config map operation
	CoreV1ReadCoreV1NamespacedConfigMapHandler core_v1.ReadCoreV1NamespacedConfigMapHandler
	// CoreV1ReadCoreV1NamespacedEndpointsHandler sets the operation handler for the read core v1 namespaced endpoints operation
	CoreV1ReadCoreV1NamespacedEndpointsHandler core_v1.ReadCoreV1NamespacedEndpointsHandler
	// CoreV1ReadCoreV1NamespacedEventHandler sets the operation handler for the read core v1 namespaced event operation
	CoreV1ReadCoreV1NamespacedEventHandler core_v1.ReadCoreV1NamespacedEventHandler
	// CoreV1ReadCoreV1NamespacedLimitRangeHandler sets the operation handler for the read core v1 namespaced limit range operation
	CoreV1ReadCoreV1NamespacedLimitRangeHandler core_v1.ReadCoreV1NamespacedLimitRangeHandler
	// CoreV1ReadCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the read core v1 namespaced persistent volume claim operation
	CoreV1ReadCoreV1NamespacedPersistentVolumeClaimHandler core_v1.ReadCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler sets the operation handler for the read core v1 namespaced persistent volume claim status operation
	CoreV1ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler core_v1.ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler
	// CoreV1ReadCoreV1NamespacedPodHandler sets the operation handler for the read core v1 namespaced pod operation
	CoreV1ReadCoreV1NamespacedPodHandler core_v1.ReadCoreV1NamespacedPodHandler
	// CoreV1ReadCoreV1NamespacedPodLogHandler sets the operation handler for the read core v1 namespaced pod log operation
	CoreV1ReadCoreV1NamespacedPodLogHandler core_v1.ReadCoreV1NamespacedPodLogHandler
	// CoreV1ReadCoreV1NamespacedPodStatusHandler sets the operation handler for the read core v1 namespaced pod status operation
	CoreV1ReadCoreV1NamespacedPodStatusHandler core_v1.ReadCoreV1NamespacedPodStatusHandler
	// CoreV1ReadCoreV1NamespacedPodTemplateHandler sets the operation handler for the read core v1 namespaced pod template operation
	CoreV1ReadCoreV1NamespacedPodTemplateHandler core_v1.ReadCoreV1NamespacedPodTemplateHandler
	// CoreV1ReadCoreV1NamespacedReplicationControllerHandler sets the operation handler for the read core v1 namespaced replication controller operation
	CoreV1ReadCoreV1NamespacedReplicationControllerHandler core_v1.ReadCoreV1NamespacedReplicationControllerHandler
	// CoreV1ReadCoreV1NamespacedReplicationControllerScaleHandler sets the operation handler for the read core v1 namespaced replication controller scale operation
	CoreV1ReadCoreV1NamespacedReplicationControllerScaleHandler core_v1.ReadCoreV1NamespacedReplicationControllerScaleHandler
	// CoreV1ReadCoreV1NamespacedReplicationControllerStatusHandler sets the operation handler for the read core v1 namespaced replication controller status operation
	CoreV1ReadCoreV1NamespacedReplicationControllerStatusHandler core_v1.ReadCoreV1NamespacedReplicationControllerStatusHandler
	// CoreV1ReadCoreV1NamespacedResourceQuotaHandler sets the operation handler for the read core v1 namespaced resource quota operation
	CoreV1ReadCoreV1NamespacedResourceQuotaHandler core_v1.ReadCoreV1NamespacedResourceQuotaHandler
	// CoreV1ReadCoreV1NamespacedResourceQuotaStatusHandler sets the operation handler for the read core v1 namespaced resource quota status operation
	CoreV1ReadCoreV1NamespacedResourceQuotaStatusHandler core_v1.ReadCoreV1NamespacedResourceQuotaStatusHandler
	// CoreV1ReadCoreV1NamespacedSecretHandler sets the operation handler for the read core v1 namespaced secret operation
	CoreV1ReadCoreV1NamespacedSecretHandler core_v1.ReadCoreV1NamespacedSecretHandler
	// CoreV1ReadCoreV1NamespacedServiceHandler sets the operation handler for the read core v1 namespaced service operation
	CoreV1ReadCoreV1NamespacedServiceHandler core_v1.ReadCoreV1NamespacedServiceHandler
	// CoreV1ReadCoreV1NamespacedServiceAccountHandler sets the operation handler for the read core v1 namespaced service account operation
	CoreV1ReadCoreV1NamespacedServiceAccountHandler core_v1.ReadCoreV1NamespacedServiceAccountHandler
	// CoreV1ReadCoreV1NamespacedServiceStatusHandler sets the operation handler for the read core v1 namespaced service status operation
	CoreV1ReadCoreV1NamespacedServiceStatusHandler core_v1.ReadCoreV1NamespacedServiceStatusHandler
	// CoreV1ReadCoreV1NodeHandler sets the operation handler for the read core v1 node operation
	CoreV1ReadCoreV1NodeHandler core_v1.ReadCoreV1NodeHandler
	// CoreV1ReadCoreV1NodeStatusHandler sets the operation handler for the read core v1 node status operation
	CoreV1ReadCoreV1NodeStatusHandler core_v1.ReadCoreV1NodeStatusHandler
	// CoreV1ReadCoreV1PersistentVolumeHandler sets the operation handler for the read core v1 persistent volume operation
	CoreV1ReadCoreV1PersistentVolumeHandler core_v1.ReadCoreV1PersistentVolumeHandler
	// CoreV1ReadCoreV1PersistentVolumeStatusHandler sets the operation handler for the read core v1 persistent volume status operation
	CoreV1ReadCoreV1PersistentVolumeStatusHandler core_v1.ReadCoreV1PersistentVolumeStatusHandler
	// DiscoveryV1beta1ReadDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the read discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1ReadDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.ReadDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1ReadEventsV1NamespacedEventHandler sets the operation handler for the read events v1 namespaced event operation
	EventsV1ReadEventsV1NamespacedEventHandler events_v1.ReadEventsV1NamespacedEventHandler
	// EventsV1beta1ReadEventsV1beta1NamespacedEventHandler sets the operation handler for the read events v1beta1 namespaced event operation
	EventsV1beta1ReadEventsV1beta1NamespacedEventHandler events_v1beta1.ReadEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the read extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressHandler
	// ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressStatusHandler sets the operation handler for the read extensions v1beta1 namespaced ingress status operation
	ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressStatusHandler extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressStatusHandler
	// FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the read flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler sets the operation handler for the read flowcontrol apiserver v1alpha1 flow schema status operation
	FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler
	// FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the read flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler sets the operation handler for the read flowcontrol apiserver v1alpha1 priority level configuration status operation
	FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler
	// NetworkingV1ReadNetworkingV1IngressClassHandler sets the operation handler for the read networking v1 ingress class operation
	NetworkingV1ReadNetworkingV1IngressClassHandler networking_v1.ReadNetworkingV1IngressClassHandler
	// NetworkingV1ReadNetworkingV1NamespacedIngressHandler sets the operation handler for the read networking v1 namespaced ingress operation
	NetworkingV1ReadNetworkingV1NamespacedIngressHandler networking_v1.ReadNetworkingV1NamespacedIngressHandler
	// NetworkingV1ReadNetworkingV1NamespacedIngressStatusHandler sets the operation handler for the read networking v1 namespaced ingress status operation
	NetworkingV1ReadNetworkingV1NamespacedIngressStatusHandler networking_v1.ReadNetworkingV1NamespacedIngressStatusHandler
	// NetworkingV1ReadNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the read networking v1 namespaced network policy operation
	NetworkingV1ReadNetworkingV1NamespacedNetworkPolicyHandler networking_v1.ReadNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1beta1ReadNetworkingV1beta1IngressClassHandler sets the operation handler for the read networking v1beta1 ingress class operation
	NetworkingV1beta1ReadNetworkingV1beta1IngressClassHandler networking_v1beta1.ReadNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the read networking v1beta1 namespaced ingress operation
	NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressHandler
	// NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressStatusHandler sets the operation handler for the read networking v1beta1 namespaced ingress status operation
	NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressStatusHandler networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressStatusHandler
	// NodeV1alpha1ReadNodeV1alpha1RuntimeClassHandler sets the operation handler for the read node v1alpha1 runtime class operation
	NodeV1alpha1ReadNodeV1alpha1RuntimeClassHandler node_v1alpha1.ReadNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1ReadNodeV1beta1RuntimeClassHandler sets the operation handler for the read node v1beta1 runtime class operation
	NodeV1beta1ReadNodeV1beta1RuntimeClassHandler node_v1beta1.ReadNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the read policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler sets the operation handler for the read policy v1beta1 namespaced pod disruption budget status operation
	PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler
	// PolicyV1beta1ReadPolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the read policy v1beta1 pod security policy operation
	PolicyV1beta1ReadPolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.ReadPolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the read rbac authorization v1 cluster role operation
	RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the read rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the read rbac authorization v1 namespaced role operation
	RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the read rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the read rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the read rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the read rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the read rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the read rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the read rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the read rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the read rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// SchedulingV1ReadSchedulingV1PriorityClassHandler sets the operation handler for the read scheduling v1 priority class operation
	SchedulingV1ReadSchedulingV1PriorityClassHandler scheduling_v1.ReadSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1ReadSchedulingV1alpha1PriorityClassHandler sets the operation handler for the read scheduling v1alpha1 priority class operation
	SchedulingV1alpha1ReadSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.ReadSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1ReadSchedulingV1beta1PriorityClassHandler sets the operation handler for the read scheduling v1beta1 priority class operation
	SchedulingV1beta1ReadSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.ReadSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1ReadSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the read settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1ReadSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.ReadSettingsV1alpha1NamespacedPodPresetHandler
	// StorageV1ReadStorageV1CSIDriverHandler sets the operation handler for the read storage v1 c s i driver operation
	StorageV1ReadStorageV1CSIDriverHandler storage_v1.ReadStorageV1CSIDriverHandler
	// StorageV1ReadStorageV1CSINodeHandler sets the operation handler for the read storage v1 c s i node operation
	StorageV1ReadStorageV1CSINodeHandler storage_v1.ReadStorageV1CSINodeHandler
	// StorageV1ReadStorageV1StorageClassHandler sets the operation handler for the read storage v1 storage class operation
	StorageV1ReadStorageV1StorageClassHandler storage_v1.ReadStorageV1StorageClassHandler
	// StorageV1ReadStorageV1VolumeAttachmentHandler sets the operation handler for the read storage v1 volume attachment operation
	StorageV1ReadStorageV1VolumeAttachmentHandler storage_v1.ReadStorageV1VolumeAttachmentHandler
	// StorageV1ReadStorageV1VolumeAttachmentStatusHandler sets the operation handler for the read storage v1 volume attachment status operation
	StorageV1ReadStorageV1VolumeAttachmentStatusHandler storage_v1.ReadStorageV1VolumeAttachmentStatusHandler
	// StorageV1alpha1ReadStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the read storage v1alpha1 volume attachment operation
	StorageV1alpha1ReadStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.ReadStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1ReadStorageV1beta1CSIDriverHandler sets the operation handler for the read storage v1beta1 c s i driver operation
	StorageV1beta1ReadStorageV1beta1CSIDriverHandler storage_v1beta1.ReadStorageV1beta1CSIDriverHandler
	// StorageV1beta1ReadStorageV1beta1CSINodeHandler sets the operation handler for the read storage v1beta1 c s i node operation
	StorageV1beta1ReadStorageV1beta1CSINodeHandler storage_v1beta1.ReadStorageV1beta1CSINodeHandler
	// StorageV1beta1ReadStorageV1beta1StorageClassHandler sets the operation handler for the read storage v1beta1 storage class operation
	StorageV1beta1ReadStorageV1beta1StorageClassHandler storage_v1beta1.ReadStorageV1beta1StorageClassHandler
	// StorageV1beta1ReadStorageV1beta1VolumeAttachmentHandler sets the operation handler for the read storage v1beta1 volume attachment operation
	StorageV1beta1ReadStorageV1beta1VolumeAttachmentHandler storage_v1beta1.ReadStorageV1beta1VolumeAttachmentHandler
	// AdmissionregistrationV1ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the replace admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the replace admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the replace admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the replace admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the replace apiextensions v1 custom resource definition operation
	ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler sets the operation handler for the replace apiextensions v1 custom resource definition status operation
	ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler
	// ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the replace apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler sets the operation handler for the replace apiextensions v1beta1 custom resource definition status operation
	ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler
	// ApiregistrationV1ReplaceApiregistrationV1APIServiceHandler sets the operation handler for the replace apiregistration v1 API service operation
	ApiregistrationV1ReplaceApiregistrationV1APIServiceHandler apiregistration_v1.ReplaceApiregistrationV1APIServiceHandler
	// ApiregistrationV1ReplaceApiregistrationV1APIServiceStatusHandler sets the operation handler for the replace apiregistration v1 API service status operation
	ApiregistrationV1ReplaceApiregistrationV1APIServiceStatusHandler apiregistration_v1.ReplaceApiregistrationV1APIServiceStatusHandler
	// ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceHandler sets the operation handler for the replace apiregistration v1beta1 API service operation
	ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceHandler
	// ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceStatusHandler sets the operation handler for the replace apiregistration v1beta1 API service status operation
	ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceStatusHandler apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceStatusHandler
	// AppsV1ReplaceAppsV1NamespacedControllerRevisionHandler sets the operation handler for the replace apps v1 namespaced controller revision operation
	AppsV1ReplaceAppsV1NamespacedControllerRevisionHandler apps_v1.ReplaceAppsV1NamespacedControllerRevisionHandler
	// AppsV1ReplaceAppsV1NamespacedDaemonSetHandler sets the operation handler for the replace apps v1 namespaced daemon set operation
	AppsV1ReplaceAppsV1NamespacedDaemonSetHandler apps_v1.ReplaceAppsV1NamespacedDaemonSetHandler
	// AppsV1ReplaceAppsV1NamespacedDaemonSetStatusHandler sets the operation handler for the replace apps v1 namespaced daemon set status operation
	AppsV1ReplaceAppsV1NamespacedDaemonSetStatusHandler apps_v1.ReplaceAppsV1NamespacedDaemonSetStatusHandler
	// AppsV1ReplaceAppsV1NamespacedDeploymentHandler sets the operation handler for the replace apps v1 namespaced deployment operation
	AppsV1ReplaceAppsV1NamespacedDeploymentHandler apps_v1.ReplaceAppsV1NamespacedDeploymentHandler
	// AppsV1ReplaceAppsV1NamespacedDeploymentScaleHandler sets the operation handler for the replace apps v1 namespaced deployment scale operation
	AppsV1ReplaceAppsV1NamespacedDeploymentScaleHandler apps_v1.ReplaceAppsV1NamespacedDeploymentScaleHandler
	// AppsV1ReplaceAppsV1NamespacedDeploymentStatusHandler sets the operation handler for the replace apps v1 namespaced deployment status operation
	AppsV1ReplaceAppsV1NamespacedDeploymentStatusHandler apps_v1.ReplaceAppsV1NamespacedDeploymentStatusHandler
	// AppsV1ReplaceAppsV1NamespacedReplicaSetHandler sets the operation handler for the replace apps v1 namespaced replica set operation
	AppsV1ReplaceAppsV1NamespacedReplicaSetHandler apps_v1.ReplaceAppsV1NamespacedReplicaSetHandler
	// AppsV1ReplaceAppsV1NamespacedReplicaSetScaleHandler sets the operation handler for the replace apps v1 namespaced replica set scale operation
	AppsV1ReplaceAppsV1NamespacedReplicaSetScaleHandler apps_v1.ReplaceAppsV1NamespacedReplicaSetScaleHandler
	// AppsV1ReplaceAppsV1NamespacedReplicaSetStatusHandler sets the operation handler for the replace apps v1 namespaced replica set status operation
	AppsV1ReplaceAppsV1NamespacedReplicaSetStatusHandler apps_v1.ReplaceAppsV1NamespacedReplicaSetStatusHandler
	// AppsV1ReplaceAppsV1NamespacedStatefulSetHandler sets the operation handler for the replace apps v1 namespaced stateful set operation
	AppsV1ReplaceAppsV1NamespacedStatefulSetHandler apps_v1.ReplaceAppsV1NamespacedStatefulSetHandler
	// AppsV1ReplaceAppsV1NamespacedStatefulSetScaleHandler sets the operation handler for the replace apps v1 namespaced stateful set scale operation
	AppsV1ReplaceAppsV1NamespacedStatefulSetScaleHandler apps_v1.ReplaceAppsV1NamespacedStatefulSetScaleHandler
	// AppsV1ReplaceAppsV1NamespacedStatefulSetStatusHandler sets the operation handler for the replace apps v1 namespaced stateful set status operation
	AppsV1ReplaceAppsV1NamespacedStatefulSetStatusHandler apps_v1.ReplaceAppsV1NamespacedStatefulSetStatusHandler
	// AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the replace autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the replace autoscaling v1 namespaced horizontal pod autoscaler status operation
	AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the replace autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the replace autoscaling v2beta1 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler
	// AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the replace autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler sets the operation handler for the replace autoscaling v2beta2 namespaced horizontal pod autoscaler status operation
	AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler
	// BatchV1ReplaceBatchV1NamespacedJobHandler sets the operation handler for the replace batch v1 namespaced job operation
	BatchV1ReplaceBatchV1NamespacedJobHandler batch_v1.ReplaceBatchV1NamespacedJobHandler
	// BatchV1ReplaceBatchV1NamespacedJobStatusHandler sets the operation handler for the replace batch v1 namespaced job status operation
	BatchV1ReplaceBatchV1NamespacedJobStatusHandler batch_v1.ReplaceBatchV1NamespacedJobStatusHandler
	// BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobHandler sets the operation handler for the replace batch v1beta1 namespaced cron job operation
	BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobHandler batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobHandler
	// BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobStatusHandler sets the operation handler for the replace batch v1beta1 namespaced cron job status operation
	BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobStatusHandler batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobStatusHandler
	// BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the replace batch v2alpha1 namespaced cron job operation
	BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobHandler
	// BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobStatusHandler sets the operation handler for the replace batch v2alpha1 namespaced cron job status operation
	BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobStatusHandler batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobStatusHandler
	// CertificatesV1ReplaceCertificatesV1CertificateSigningRequestHandler sets the operation handler for the replace certificates v1 certificate signing request operation
	CertificatesV1ReplaceCertificatesV1CertificateSigningRequestHandler certificates_v1.ReplaceCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1ReplaceCertificatesV1CertificateSigningRequestApprovalHandler sets the operation handler for the replace certificates v1 certificate signing request approval operation
	CertificatesV1ReplaceCertificatesV1CertificateSigningRequestApprovalHandler certificates_v1.ReplaceCertificatesV1CertificateSigningRequestApprovalHandler
	// CertificatesV1ReplaceCertificatesV1CertificateSigningRequestStatusHandler sets the operation handler for the replace certificates v1 certificate signing request status operation
	CertificatesV1ReplaceCertificatesV1CertificateSigningRequestStatusHandler certificates_v1.ReplaceCertificatesV1CertificateSigningRequestStatusHandler
	// CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the replace certificates v1beta1 certificate signing request operation
	CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestHandler
	// CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler sets the operation handler for the replace certificates v1beta1 certificate signing request approval operation
	CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler
	// CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler sets the operation handler for the replace certificates v1beta1 certificate signing request status operation
	CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler
	// CoordinationV1ReplaceCoordinationV1NamespacedLeaseHandler sets the operation handler for the replace coordination v1 namespaced lease operation
	CoordinationV1ReplaceCoordinationV1NamespacedLeaseHandler coordination_v1.ReplaceCoordinationV1NamespacedLeaseHandler
	// CoordinationV1beta1ReplaceCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the replace coordination v1beta1 namespaced lease operation
	CoordinationV1beta1ReplaceCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.ReplaceCoordinationV1beta1NamespacedLeaseHandler
	// CoreV1ReplaceCoreV1NamespaceHandler sets the operation handler for the replace core v1 namespace operation
	CoreV1ReplaceCoreV1NamespaceHandler core_v1.ReplaceCoreV1NamespaceHandler
	// CoreV1ReplaceCoreV1NamespaceFinalizeHandler sets the operation handler for the replace core v1 namespace finalize operation
	CoreV1ReplaceCoreV1NamespaceFinalizeHandler core_v1.ReplaceCoreV1NamespaceFinalizeHandler
	// CoreV1ReplaceCoreV1NamespaceStatusHandler sets the operation handler for the replace core v1 namespace status operation
	CoreV1ReplaceCoreV1NamespaceStatusHandler core_v1.ReplaceCoreV1NamespaceStatusHandler
	// CoreV1ReplaceCoreV1NamespacedConfigMapHandler sets the operation handler for the replace core v1 namespaced config map operation
	CoreV1ReplaceCoreV1NamespacedConfigMapHandler core_v1.ReplaceCoreV1NamespacedConfigMapHandler
	// CoreV1ReplaceCoreV1NamespacedEndpointsHandler sets the operation handler for the replace core v1 namespaced endpoints operation
	CoreV1ReplaceCoreV1NamespacedEndpointsHandler core_v1.ReplaceCoreV1NamespacedEndpointsHandler
	// CoreV1ReplaceCoreV1NamespacedEventHandler sets the operation handler for the replace core v1 namespaced event operation
	CoreV1ReplaceCoreV1NamespacedEventHandler core_v1.ReplaceCoreV1NamespacedEventHandler
	// CoreV1ReplaceCoreV1NamespacedLimitRangeHandler sets the operation handler for the replace core v1 namespaced limit range operation
	CoreV1ReplaceCoreV1NamespacedLimitRangeHandler core_v1.ReplaceCoreV1NamespacedLimitRangeHandler
	// CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the replace core v1 namespaced persistent volume claim operation
	CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimHandler core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler sets the operation handler for the replace core v1 namespaced persistent volume claim status operation
	CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler
	// CoreV1ReplaceCoreV1NamespacedPodHandler sets the operation handler for the replace core v1 namespaced pod operation
	CoreV1ReplaceCoreV1NamespacedPodHandler core_v1.ReplaceCoreV1NamespacedPodHandler
	// CoreV1ReplaceCoreV1NamespacedPodStatusHandler sets the operation handler for the replace core v1 namespaced pod status operation
	CoreV1ReplaceCoreV1NamespacedPodStatusHandler core_v1.ReplaceCoreV1NamespacedPodStatusHandler
	// CoreV1ReplaceCoreV1NamespacedPodTemplateHandler sets the operation handler for the replace core v1 namespaced pod template operation
	CoreV1ReplaceCoreV1NamespacedPodTemplateHandler core_v1.ReplaceCoreV1NamespacedPodTemplateHandler
	// CoreV1ReplaceCoreV1NamespacedReplicationControllerHandler sets the operation handler for the replace core v1 namespaced replication controller operation
	CoreV1ReplaceCoreV1NamespacedReplicationControllerHandler core_v1.ReplaceCoreV1NamespacedReplicationControllerHandler
	// CoreV1ReplaceCoreV1NamespacedReplicationControllerScaleHandler sets the operation handler for the replace core v1 namespaced replication controller scale operation
	CoreV1ReplaceCoreV1NamespacedReplicationControllerScaleHandler core_v1.ReplaceCoreV1NamespacedReplicationControllerScaleHandler
	// CoreV1ReplaceCoreV1NamespacedReplicationControllerStatusHandler sets the operation handler for the replace core v1 namespaced replication controller status operation
	CoreV1ReplaceCoreV1NamespacedReplicationControllerStatusHandler core_v1.ReplaceCoreV1NamespacedReplicationControllerStatusHandler
	// CoreV1ReplaceCoreV1NamespacedResourceQuotaHandler sets the operation handler for the replace core v1 namespaced resource quota operation
	CoreV1ReplaceCoreV1NamespacedResourceQuotaHandler core_v1.ReplaceCoreV1NamespacedResourceQuotaHandler
	// CoreV1ReplaceCoreV1NamespacedResourceQuotaStatusHandler sets the operation handler for the replace core v1 namespaced resource quota status operation
	CoreV1ReplaceCoreV1NamespacedResourceQuotaStatusHandler core_v1.ReplaceCoreV1NamespacedResourceQuotaStatusHandler
	// CoreV1ReplaceCoreV1NamespacedSecretHandler sets the operation handler for the replace core v1 namespaced secret operation
	CoreV1ReplaceCoreV1NamespacedSecretHandler core_v1.ReplaceCoreV1NamespacedSecretHandler
	// CoreV1ReplaceCoreV1NamespacedServiceHandler sets the operation handler for the replace core v1 namespaced service operation
	CoreV1ReplaceCoreV1NamespacedServiceHandler core_v1.ReplaceCoreV1NamespacedServiceHandler
	// CoreV1ReplaceCoreV1NamespacedServiceAccountHandler sets the operation handler for the replace core v1 namespaced service account operation
	CoreV1ReplaceCoreV1NamespacedServiceAccountHandler core_v1.ReplaceCoreV1NamespacedServiceAccountHandler
	// CoreV1ReplaceCoreV1NamespacedServiceStatusHandler sets the operation handler for the replace core v1 namespaced service status operation
	CoreV1ReplaceCoreV1NamespacedServiceStatusHandler core_v1.ReplaceCoreV1NamespacedServiceStatusHandler
	// CoreV1ReplaceCoreV1NodeHandler sets the operation handler for the replace core v1 node operation
	CoreV1ReplaceCoreV1NodeHandler core_v1.ReplaceCoreV1NodeHandler
	// CoreV1ReplaceCoreV1NodeStatusHandler sets the operation handler for the replace core v1 node status operation
	CoreV1ReplaceCoreV1NodeStatusHandler core_v1.ReplaceCoreV1NodeStatusHandler
	// CoreV1ReplaceCoreV1PersistentVolumeHandler sets the operation handler for the replace core v1 persistent volume operation
	CoreV1ReplaceCoreV1PersistentVolumeHandler core_v1.ReplaceCoreV1PersistentVolumeHandler
	// CoreV1ReplaceCoreV1PersistentVolumeStatusHandler sets the operation handler for the replace core v1 persistent volume status operation
	CoreV1ReplaceCoreV1PersistentVolumeStatusHandler core_v1.ReplaceCoreV1PersistentVolumeStatusHandler
	// DiscoveryV1beta1ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the replace discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler
	// EventsV1ReplaceEventsV1NamespacedEventHandler sets the operation handler for the replace events v1 namespaced event operation
	EventsV1ReplaceEventsV1NamespacedEventHandler events_v1.ReplaceEventsV1NamespacedEventHandler
	// EventsV1beta1ReplaceEventsV1beta1NamespacedEventHandler sets the operation handler for the replace events v1beta1 namespaced event operation
	EventsV1beta1ReplaceEventsV1beta1NamespacedEventHandler events_v1beta1.ReplaceEventsV1beta1NamespacedEventHandler
	// ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the replace extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressHandler
	// ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressStatusHandler sets the operation handler for the replace extensions v1beta1 namespaced ingress status operation
	ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressStatusHandler extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressStatusHandler
	// FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the replace flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler sets the operation handler for the replace flowcontrol apiserver v1alpha1 flow schema status operation
	FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler
	// FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the replace flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler sets the operation handler for the replace flowcontrol apiserver v1alpha1 priority level configuration status operation
	FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler
	// NetworkingV1ReplaceNetworkingV1IngressClassHandler sets the operation handler for the replace networking v1 ingress class operation
	NetworkingV1ReplaceNetworkingV1IngressClassHandler networking_v1.ReplaceNetworkingV1IngressClassHandler
	// NetworkingV1ReplaceNetworkingV1NamespacedIngressHandler sets the operation handler for the replace networking v1 namespaced ingress operation
	NetworkingV1ReplaceNetworkingV1NamespacedIngressHandler networking_v1.ReplaceNetworkingV1NamespacedIngressHandler
	// NetworkingV1ReplaceNetworkingV1NamespacedIngressStatusHandler sets the operation handler for the replace networking v1 namespaced ingress status operation
	NetworkingV1ReplaceNetworkingV1NamespacedIngressStatusHandler networking_v1.ReplaceNetworkingV1NamespacedIngressStatusHandler
	// NetworkingV1ReplaceNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the replace networking v1 namespaced network policy operation
	NetworkingV1ReplaceNetworkingV1NamespacedNetworkPolicyHandler networking_v1.ReplaceNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1beta1ReplaceNetworkingV1beta1IngressClassHandler sets the operation handler for the replace networking v1beta1 ingress class operation
	NetworkingV1beta1ReplaceNetworkingV1beta1IngressClassHandler networking_v1beta1.ReplaceNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the replace networking v1beta1 namespaced ingress operation
	NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressHandler
	// NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressStatusHandler sets the operation handler for the replace networking v1beta1 namespaced ingress status operation
	NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressStatusHandler networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressStatusHandler
	// NodeV1alpha1ReplaceNodeV1alpha1RuntimeClassHandler sets the operation handler for the replace node v1alpha1 runtime class operation
	NodeV1alpha1ReplaceNodeV1alpha1RuntimeClassHandler node_v1alpha1.ReplaceNodeV1alpha1RuntimeClassHandler
	// NodeV1beta1ReplaceNodeV1beta1RuntimeClassHandler sets the operation handler for the replace node v1beta1 runtime class operation
	NodeV1beta1ReplaceNodeV1beta1RuntimeClassHandler node_v1beta1.ReplaceNodeV1beta1RuntimeClassHandler
	// PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the replace policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler sets the operation handler for the replace policy v1beta1 namespaced pod disruption budget status operation
	PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler
	// PolicyV1beta1ReplacePolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the replace policy v1beta1 pod security policy operation
	PolicyV1beta1ReplacePolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.ReplacePolicyV1beta1PodSecurityPolicyHandler
	// RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the replace rbac authorization v1 cluster role operation
	RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the replace rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the replace rbac authorization v1 namespaced role operation
	RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the replace rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the replace rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the replace rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the replace rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the replace rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the replace rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the replace rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the replace rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the replace rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// SchedulingV1ReplaceSchedulingV1PriorityClassHandler sets the operation handler for the replace scheduling v1 priority class operation
	SchedulingV1ReplaceSchedulingV1PriorityClassHandler scheduling_v1.ReplaceSchedulingV1PriorityClassHandler
	// SchedulingV1alpha1ReplaceSchedulingV1alpha1PriorityClassHandler sets the operation handler for the replace scheduling v1alpha1 priority class operation
	SchedulingV1alpha1ReplaceSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.ReplaceSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1beta1ReplaceSchedulingV1beta1PriorityClassHandler sets the operation handler for the replace scheduling v1beta1 priority class operation
	SchedulingV1beta1ReplaceSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.ReplaceSchedulingV1beta1PriorityClassHandler
	// SettingsV1alpha1ReplaceSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the replace settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1ReplaceSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.ReplaceSettingsV1alpha1NamespacedPodPresetHandler
	// StorageV1ReplaceStorageV1CSIDriverHandler sets the operation handler for the replace storage v1 c s i driver operation
	StorageV1ReplaceStorageV1CSIDriverHandler storage_v1.ReplaceStorageV1CSIDriverHandler
	// StorageV1ReplaceStorageV1CSINodeHandler sets the operation handler for the replace storage v1 c s i node operation
	StorageV1ReplaceStorageV1CSINodeHandler storage_v1.ReplaceStorageV1CSINodeHandler
	// StorageV1ReplaceStorageV1StorageClassHandler sets the operation handler for the replace storage v1 storage class operation
	StorageV1ReplaceStorageV1StorageClassHandler storage_v1.ReplaceStorageV1StorageClassHandler
	// StorageV1ReplaceStorageV1VolumeAttachmentHandler sets the operation handler for the replace storage v1 volume attachment operation
	StorageV1ReplaceStorageV1VolumeAttachmentHandler storage_v1.ReplaceStorageV1VolumeAttachmentHandler
	// StorageV1ReplaceStorageV1VolumeAttachmentStatusHandler sets the operation handler for the replace storage v1 volume attachment status operation
	StorageV1ReplaceStorageV1VolumeAttachmentStatusHandler storage_v1.ReplaceStorageV1VolumeAttachmentStatusHandler
	// StorageV1alpha1ReplaceStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the replace storage v1alpha1 volume attachment operation
	StorageV1alpha1ReplaceStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.ReplaceStorageV1alpha1VolumeAttachmentHandler
	// StorageV1beta1ReplaceStorageV1beta1CSIDriverHandler sets the operation handler for the replace storage v1beta1 c s i driver operation
	StorageV1beta1ReplaceStorageV1beta1CSIDriverHandler storage_v1beta1.ReplaceStorageV1beta1CSIDriverHandler
	// StorageV1beta1ReplaceStorageV1beta1CSINodeHandler sets the operation handler for the replace storage v1beta1 c s i node operation
	StorageV1beta1ReplaceStorageV1beta1CSINodeHandler storage_v1beta1.ReplaceStorageV1beta1CSINodeHandler
	// StorageV1beta1ReplaceStorageV1beta1StorageClassHandler sets the operation handler for the replace storage v1beta1 storage class operation
	StorageV1beta1ReplaceStorageV1beta1StorageClassHandler storage_v1beta1.ReplaceStorageV1beta1StorageClassHandler
	// StorageV1beta1ReplaceStorageV1beta1VolumeAttachmentHandler sets the operation handler for the replace storage v1beta1 volume attachment operation
	StorageV1beta1ReplaceStorageV1beta1VolumeAttachmentHandler storage_v1beta1.ReplaceStorageV1beta1VolumeAttachmentHandler
	// AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler sets the operation handler for the watch admissionregistration v1 mutating webhook configuration operation
	AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler sets the operation handler for the watch admissionregistration v1 mutating webhook configuration list operation
	AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler
	// AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler sets the operation handler for the watch admissionregistration v1 validating webhook configuration operation
	AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler sets the operation handler for the watch admissionregistration v1 validating webhook configuration list operation
	AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler
	// AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler sets the operation handler for the watch admissionregistration v1beta1 mutating webhook configuration operation
	AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler sets the operation handler for the watch admissionregistration v1beta1 mutating webhook configuration list operation
	AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler
	// AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler sets the operation handler for the watch admissionregistration v1beta1 validating webhook configuration operation
	AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler
	// AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler sets the operation handler for the watch admissionregistration v1beta1 validating webhook configuration list operation
	AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler
	// ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionHandler sets the operation handler for the watch apiextensions v1 custom resource definition operation
	ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionHandler apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionHandler
	// ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionListHandler sets the operation handler for the watch apiextensions v1 custom resource definition list operation
	ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionListHandler apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionListHandler
	// ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionHandler sets the operation handler for the watch apiextensions v1beta1 custom resource definition operation
	ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionHandler apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionHandler
	// ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionListHandler sets the operation handler for the watch apiextensions v1beta1 custom resource definition list operation
	ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionListHandler apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionListHandler
	// ApiregistrationV1WatchApiregistrationV1APIServiceHandler sets the operation handler for the watch apiregistration v1 API service operation
	ApiregistrationV1WatchApiregistrationV1APIServiceHandler apiregistration_v1.WatchApiregistrationV1APIServiceHandler
	// ApiregistrationV1WatchApiregistrationV1APIServiceListHandler sets the operation handler for the watch apiregistration v1 API service list operation
	ApiregistrationV1WatchApiregistrationV1APIServiceListHandler apiregistration_v1.WatchApiregistrationV1APIServiceListHandler
	// ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceHandler sets the operation handler for the watch apiregistration v1beta1 API service operation
	ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceHandler apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceHandler
	// ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceListHandler sets the operation handler for the watch apiregistration v1beta1 API service list operation
	ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceListHandler apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceListHandler
	// AppsV1WatchAppsV1ControllerRevisionListForAllNamespacesHandler sets the operation handler for the watch apps v1 controller revision list for all namespaces operation
	AppsV1WatchAppsV1ControllerRevisionListForAllNamespacesHandler apps_v1.WatchAppsV1ControllerRevisionListForAllNamespacesHandler
	// AppsV1WatchAppsV1DaemonSetListForAllNamespacesHandler sets the operation handler for the watch apps v1 daemon set list for all namespaces operation
	AppsV1WatchAppsV1DaemonSetListForAllNamespacesHandler apps_v1.WatchAppsV1DaemonSetListForAllNamespacesHandler
	// AppsV1WatchAppsV1DeploymentListForAllNamespacesHandler sets the operation handler for the watch apps v1 deployment list for all namespaces operation
	AppsV1WatchAppsV1DeploymentListForAllNamespacesHandler apps_v1.WatchAppsV1DeploymentListForAllNamespacesHandler
	// AppsV1WatchAppsV1NamespacedControllerRevisionHandler sets the operation handler for the watch apps v1 namespaced controller revision operation
	AppsV1WatchAppsV1NamespacedControllerRevisionHandler apps_v1.WatchAppsV1NamespacedControllerRevisionHandler
	// AppsV1WatchAppsV1NamespacedControllerRevisionListHandler sets the operation handler for the watch apps v1 namespaced controller revision list operation
	AppsV1WatchAppsV1NamespacedControllerRevisionListHandler apps_v1.WatchAppsV1NamespacedControllerRevisionListHandler
	// AppsV1WatchAppsV1NamespacedDaemonSetHandler sets the operation handler for the watch apps v1 namespaced daemon set operation
	AppsV1WatchAppsV1NamespacedDaemonSetHandler apps_v1.WatchAppsV1NamespacedDaemonSetHandler
	// AppsV1WatchAppsV1NamespacedDaemonSetListHandler sets the operation handler for the watch apps v1 namespaced daemon set list operation
	AppsV1WatchAppsV1NamespacedDaemonSetListHandler apps_v1.WatchAppsV1NamespacedDaemonSetListHandler
	// AppsV1WatchAppsV1NamespacedDeploymentHandler sets the operation handler for the watch apps v1 namespaced deployment operation
	AppsV1WatchAppsV1NamespacedDeploymentHandler apps_v1.WatchAppsV1NamespacedDeploymentHandler
	// AppsV1WatchAppsV1NamespacedDeploymentListHandler sets the operation handler for the watch apps v1 namespaced deployment list operation
	AppsV1WatchAppsV1NamespacedDeploymentListHandler apps_v1.WatchAppsV1NamespacedDeploymentListHandler
	// AppsV1WatchAppsV1NamespacedReplicaSetHandler sets the operation handler for the watch apps v1 namespaced replica set operation
	AppsV1WatchAppsV1NamespacedReplicaSetHandler apps_v1.WatchAppsV1NamespacedReplicaSetHandler
	// AppsV1WatchAppsV1NamespacedReplicaSetListHandler sets the operation handler for the watch apps v1 namespaced replica set list operation
	AppsV1WatchAppsV1NamespacedReplicaSetListHandler apps_v1.WatchAppsV1NamespacedReplicaSetListHandler
	// AppsV1WatchAppsV1NamespacedStatefulSetHandler sets the operation handler for the watch apps v1 namespaced stateful set operation
	AppsV1WatchAppsV1NamespacedStatefulSetHandler apps_v1.WatchAppsV1NamespacedStatefulSetHandler
	// AppsV1WatchAppsV1NamespacedStatefulSetListHandler sets the operation handler for the watch apps v1 namespaced stateful set list operation
	AppsV1WatchAppsV1NamespacedStatefulSetListHandler apps_v1.WatchAppsV1NamespacedStatefulSetListHandler
	// AppsV1WatchAppsV1ReplicaSetListForAllNamespacesHandler sets the operation handler for the watch apps v1 replica set list for all namespaces operation
	AppsV1WatchAppsV1ReplicaSetListForAllNamespacesHandler apps_v1.WatchAppsV1ReplicaSetListForAllNamespacesHandler
	// AppsV1WatchAppsV1StatefulSetListForAllNamespacesHandler sets the operation handler for the watch apps v1 stateful set list for all namespaces operation
	AppsV1WatchAppsV1StatefulSetListForAllNamespacesHandler apps_v1.WatchAppsV1StatefulSetListForAllNamespacesHandler
	// AutoscalingV1WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler sets the operation handler for the watch autoscaling v1 horizontal pod autoscaler list for all namespaces operation
	AutoscalingV1WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler autoscaling_v1.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler
	// AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the watch autoscaling v1 namespaced horizontal pod autoscaler operation
	AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler sets the operation handler for the watch autoscaling v1 namespaced horizontal pod autoscaler list operation
	AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler
	// AutoscalingV2beta1WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler sets the operation handler for the watch autoscaling v2beta1 horizontal pod autoscaler list for all namespaces operation
	AutoscalingV2beta1WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler autoscaling_v2beta1.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler
	// AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the watch autoscaling v2beta1 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler sets the operation handler for the watch autoscaling v2beta1 namespaced horizontal pod autoscaler list operation
	AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler
	// AutoscalingV2beta2WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler sets the operation handler for the watch autoscaling v2beta2 horizontal pod autoscaler list for all namespaces operation
	AutoscalingV2beta2WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler autoscaling_v2beta2.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler
	// AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler sets the operation handler for the watch autoscaling v2beta2 namespaced horizontal pod autoscaler operation
	AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler
	// AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler sets the operation handler for the watch autoscaling v2beta2 namespaced horizontal pod autoscaler list operation
	AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler
	// BatchV1WatchBatchV1JobListForAllNamespacesHandler sets the operation handler for the watch batch v1 job list for all namespaces operation
	BatchV1WatchBatchV1JobListForAllNamespacesHandler batch_v1.WatchBatchV1JobListForAllNamespacesHandler
	// BatchV1WatchBatchV1NamespacedJobHandler sets the operation handler for the watch batch v1 namespaced job operation
	BatchV1WatchBatchV1NamespacedJobHandler batch_v1.WatchBatchV1NamespacedJobHandler
	// BatchV1WatchBatchV1NamespacedJobListHandler sets the operation handler for the watch batch v1 namespaced job list operation
	BatchV1WatchBatchV1NamespacedJobListHandler batch_v1.WatchBatchV1NamespacedJobListHandler
	// BatchV1beta1WatchBatchV1beta1CronJobListForAllNamespacesHandler sets the operation handler for the watch batch v1beta1 cron job list for all namespaces operation
	BatchV1beta1WatchBatchV1beta1CronJobListForAllNamespacesHandler batch_v1beta1.WatchBatchV1beta1CronJobListForAllNamespacesHandler
	// BatchV1beta1WatchBatchV1beta1NamespacedCronJobHandler sets the operation handler for the watch batch v1beta1 namespaced cron job operation
	BatchV1beta1WatchBatchV1beta1NamespacedCronJobHandler batch_v1beta1.WatchBatchV1beta1NamespacedCronJobHandler
	// BatchV1beta1WatchBatchV1beta1NamespacedCronJobListHandler sets the operation handler for the watch batch v1beta1 namespaced cron job list operation
	BatchV1beta1WatchBatchV1beta1NamespacedCronJobListHandler batch_v1beta1.WatchBatchV1beta1NamespacedCronJobListHandler
	// BatchV2alpha1WatchBatchV2alpha1CronJobListForAllNamespacesHandler sets the operation handler for the watch batch v2alpha1 cron job list for all namespaces operation
	BatchV2alpha1WatchBatchV2alpha1CronJobListForAllNamespacesHandler batch_v2alpha1.WatchBatchV2alpha1CronJobListForAllNamespacesHandler
	// BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobHandler sets the operation handler for the watch batch v2alpha1 namespaced cron job operation
	BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobHandler batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobHandler
	// BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobListHandler sets the operation handler for the watch batch v2alpha1 namespaced cron job list operation
	BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobListHandler batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobListHandler
	// CertificatesV1WatchCertificatesV1CertificateSigningRequestHandler sets the operation handler for the watch certificates v1 certificate signing request operation
	CertificatesV1WatchCertificatesV1CertificateSigningRequestHandler certificates_v1.WatchCertificatesV1CertificateSigningRequestHandler
	// CertificatesV1WatchCertificatesV1CertificateSigningRequestListHandler sets the operation handler for the watch certificates v1 certificate signing request list operation
	CertificatesV1WatchCertificatesV1CertificateSigningRequestListHandler certificates_v1.WatchCertificatesV1CertificateSigningRequestListHandler
	// CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestHandler sets the operation handler for the watch certificates v1beta1 certificate signing request operation
	CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestHandler certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestHandler
	// CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestListHandler sets the operation handler for the watch certificates v1beta1 certificate signing request list operation
	CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestListHandler certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestListHandler
	// CoordinationV1WatchCoordinationV1LeaseListForAllNamespacesHandler sets the operation handler for the watch coordination v1 lease list for all namespaces operation
	CoordinationV1WatchCoordinationV1LeaseListForAllNamespacesHandler coordination_v1.WatchCoordinationV1LeaseListForAllNamespacesHandler
	// CoordinationV1WatchCoordinationV1NamespacedLeaseHandler sets the operation handler for the watch coordination v1 namespaced lease operation
	CoordinationV1WatchCoordinationV1NamespacedLeaseHandler coordination_v1.WatchCoordinationV1NamespacedLeaseHandler
	// CoordinationV1WatchCoordinationV1NamespacedLeaseListHandler sets the operation handler for the watch coordination v1 namespaced lease list operation
	CoordinationV1WatchCoordinationV1NamespacedLeaseListHandler coordination_v1.WatchCoordinationV1NamespacedLeaseListHandler
	// CoordinationV1beta1WatchCoordinationV1beta1LeaseListForAllNamespacesHandler sets the operation handler for the watch coordination v1beta1 lease list for all namespaces operation
	CoordinationV1beta1WatchCoordinationV1beta1LeaseListForAllNamespacesHandler coordination_v1beta1.WatchCoordinationV1beta1LeaseListForAllNamespacesHandler
	// CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseHandler sets the operation handler for the watch coordination v1beta1 namespaced lease operation
	CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseHandler coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseHandler
	// CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseListHandler sets the operation handler for the watch coordination v1beta1 namespaced lease list operation
	CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseListHandler coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseListHandler
	// CoreV1WatchCoreV1ConfigMapListForAllNamespacesHandler sets the operation handler for the watch core v1 config map list for all namespaces operation
	CoreV1WatchCoreV1ConfigMapListForAllNamespacesHandler core_v1.WatchCoreV1ConfigMapListForAllNamespacesHandler
	// CoreV1WatchCoreV1EndpointsListForAllNamespacesHandler sets the operation handler for the watch core v1 endpoints list for all namespaces operation
	CoreV1WatchCoreV1EndpointsListForAllNamespacesHandler core_v1.WatchCoreV1EndpointsListForAllNamespacesHandler
	// CoreV1WatchCoreV1EventListForAllNamespacesHandler sets the operation handler for the watch core v1 event list for all namespaces operation
	CoreV1WatchCoreV1EventListForAllNamespacesHandler core_v1.WatchCoreV1EventListForAllNamespacesHandler
	// CoreV1WatchCoreV1LimitRangeListForAllNamespacesHandler sets the operation handler for the watch core v1 limit range list for all namespaces operation
	CoreV1WatchCoreV1LimitRangeListForAllNamespacesHandler core_v1.WatchCoreV1LimitRangeListForAllNamespacesHandler
	// CoreV1WatchCoreV1NamespaceHandler sets the operation handler for the watch core v1 namespace operation
	CoreV1WatchCoreV1NamespaceHandler core_v1.WatchCoreV1NamespaceHandler
	// CoreV1WatchCoreV1NamespaceListHandler sets the operation handler for the watch core v1 namespace list operation
	CoreV1WatchCoreV1NamespaceListHandler core_v1.WatchCoreV1NamespaceListHandler
	// CoreV1WatchCoreV1NamespacedConfigMapHandler sets the operation handler for the watch core v1 namespaced config map operation
	CoreV1WatchCoreV1NamespacedConfigMapHandler core_v1.WatchCoreV1NamespacedConfigMapHandler
	// CoreV1WatchCoreV1NamespacedConfigMapListHandler sets the operation handler for the watch core v1 namespaced config map list operation
	CoreV1WatchCoreV1NamespacedConfigMapListHandler core_v1.WatchCoreV1NamespacedConfigMapListHandler
	// CoreV1WatchCoreV1NamespacedEndpointsHandler sets the operation handler for the watch core v1 namespaced endpoints operation
	CoreV1WatchCoreV1NamespacedEndpointsHandler core_v1.WatchCoreV1NamespacedEndpointsHandler
	// CoreV1WatchCoreV1NamespacedEndpointsListHandler sets the operation handler for the watch core v1 namespaced endpoints list operation
	CoreV1WatchCoreV1NamespacedEndpointsListHandler core_v1.WatchCoreV1NamespacedEndpointsListHandler
	// CoreV1WatchCoreV1NamespacedEventHandler sets the operation handler for the watch core v1 namespaced event operation
	CoreV1WatchCoreV1NamespacedEventHandler core_v1.WatchCoreV1NamespacedEventHandler
	// CoreV1WatchCoreV1NamespacedEventListHandler sets the operation handler for the watch core v1 namespaced event list operation
	CoreV1WatchCoreV1NamespacedEventListHandler core_v1.WatchCoreV1NamespacedEventListHandler
	// CoreV1WatchCoreV1NamespacedLimitRangeHandler sets the operation handler for the watch core v1 namespaced limit range operation
	CoreV1WatchCoreV1NamespacedLimitRangeHandler core_v1.WatchCoreV1NamespacedLimitRangeHandler
	// CoreV1WatchCoreV1NamespacedLimitRangeListHandler sets the operation handler for the watch core v1 namespaced limit range list operation
	CoreV1WatchCoreV1NamespacedLimitRangeListHandler core_v1.WatchCoreV1NamespacedLimitRangeListHandler
	// CoreV1WatchCoreV1NamespacedPersistentVolumeClaimHandler sets the operation handler for the watch core v1 namespaced persistent volume claim operation
	CoreV1WatchCoreV1NamespacedPersistentVolumeClaimHandler core_v1.WatchCoreV1NamespacedPersistentVolumeClaimHandler
	// CoreV1WatchCoreV1NamespacedPersistentVolumeClaimListHandler sets the operation handler for the watch core v1 namespaced persistent volume claim list operation
	CoreV1WatchCoreV1NamespacedPersistentVolumeClaimListHandler core_v1.WatchCoreV1NamespacedPersistentVolumeClaimListHandler
	// CoreV1WatchCoreV1NamespacedPodHandler sets the operation handler for the watch core v1 namespaced pod operation
	CoreV1WatchCoreV1NamespacedPodHandler core_v1.WatchCoreV1NamespacedPodHandler
	// CoreV1WatchCoreV1NamespacedPodListHandler sets the operation handler for the watch core v1 namespaced pod list operation
	CoreV1WatchCoreV1NamespacedPodListHandler core_v1.WatchCoreV1NamespacedPodListHandler
	// CoreV1WatchCoreV1NamespacedPodTemplateHandler sets the operation handler for the watch core v1 namespaced pod template operation
	CoreV1WatchCoreV1NamespacedPodTemplateHandler core_v1.WatchCoreV1NamespacedPodTemplateHandler
	// CoreV1WatchCoreV1NamespacedPodTemplateListHandler sets the operation handler for the watch core v1 namespaced pod template list operation
	CoreV1WatchCoreV1NamespacedPodTemplateListHandler core_v1.WatchCoreV1NamespacedPodTemplateListHandler
	// CoreV1WatchCoreV1NamespacedReplicationControllerHandler sets the operation handler for the watch core v1 namespaced replication controller operation
	CoreV1WatchCoreV1NamespacedReplicationControllerHandler core_v1.WatchCoreV1NamespacedReplicationControllerHandler
	// CoreV1WatchCoreV1NamespacedReplicationControllerListHandler sets the operation handler for the watch core v1 namespaced replication controller list operation
	CoreV1WatchCoreV1NamespacedReplicationControllerListHandler core_v1.WatchCoreV1NamespacedReplicationControllerListHandler
	// CoreV1WatchCoreV1NamespacedResourceQuotaHandler sets the operation handler for the watch core v1 namespaced resource quota operation
	CoreV1WatchCoreV1NamespacedResourceQuotaHandler core_v1.WatchCoreV1NamespacedResourceQuotaHandler
	// CoreV1WatchCoreV1NamespacedResourceQuotaListHandler sets the operation handler for the watch core v1 namespaced resource quota list operation
	CoreV1WatchCoreV1NamespacedResourceQuotaListHandler core_v1.WatchCoreV1NamespacedResourceQuotaListHandler
	// CoreV1WatchCoreV1NamespacedSecretHandler sets the operation handler for the watch core v1 namespaced secret operation
	CoreV1WatchCoreV1NamespacedSecretHandler core_v1.WatchCoreV1NamespacedSecretHandler
	// CoreV1WatchCoreV1NamespacedSecretListHandler sets the operation handler for the watch core v1 namespaced secret list operation
	CoreV1WatchCoreV1NamespacedSecretListHandler core_v1.WatchCoreV1NamespacedSecretListHandler
	// CoreV1WatchCoreV1NamespacedServiceHandler sets the operation handler for the watch core v1 namespaced service operation
	CoreV1WatchCoreV1NamespacedServiceHandler core_v1.WatchCoreV1NamespacedServiceHandler
	// CoreV1WatchCoreV1NamespacedServiceAccountHandler sets the operation handler for the watch core v1 namespaced service account operation
	CoreV1WatchCoreV1NamespacedServiceAccountHandler core_v1.WatchCoreV1NamespacedServiceAccountHandler
	// CoreV1WatchCoreV1NamespacedServiceAccountListHandler sets the operation handler for the watch core v1 namespaced service account list operation
	CoreV1WatchCoreV1NamespacedServiceAccountListHandler core_v1.WatchCoreV1NamespacedServiceAccountListHandler
	// CoreV1WatchCoreV1NamespacedServiceListHandler sets the operation handler for the watch core v1 namespaced service list operation
	CoreV1WatchCoreV1NamespacedServiceListHandler core_v1.WatchCoreV1NamespacedServiceListHandler
	// CoreV1WatchCoreV1NodeHandler sets the operation handler for the watch core v1 node operation
	CoreV1WatchCoreV1NodeHandler core_v1.WatchCoreV1NodeHandler
	// CoreV1WatchCoreV1NodeListHandler sets the operation handler for the watch core v1 node list operation
	CoreV1WatchCoreV1NodeListHandler core_v1.WatchCoreV1NodeListHandler
	// CoreV1WatchCoreV1PersistentVolumeHandler sets the operation handler for the watch core v1 persistent volume operation
	CoreV1WatchCoreV1PersistentVolumeHandler core_v1.WatchCoreV1PersistentVolumeHandler
	// CoreV1WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler sets the operation handler for the watch core v1 persistent volume claim list for all namespaces operation
	CoreV1WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler core_v1.WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler
	// CoreV1WatchCoreV1PersistentVolumeListHandler sets the operation handler for the watch core v1 persistent volume list operation
	CoreV1WatchCoreV1PersistentVolumeListHandler core_v1.WatchCoreV1PersistentVolumeListHandler
	// CoreV1WatchCoreV1PodListForAllNamespacesHandler sets the operation handler for the watch core v1 pod list for all namespaces operation
	CoreV1WatchCoreV1PodListForAllNamespacesHandler core_v1.WatchCoreV1PodListForAllNamespacesHandler
	// CoreV1WatchCoreV1PodTemplateListForAllNamespacesHandler sets the operation handler for the watch core v1 pod template list for all namespaces operation
	CoreV1WatchCoreV1PodTemplateListForAllNamespacesHandler core_v1.WatchCoreV1PodTemplateListForAllNamespacesHandler
	// CoreV1WatchCoreV1ReplicationControllerListForAllNamespacesHandler sets the operation handler for the watch core v1 replication controller list for all namespaces operation
	CoreV1WatchCoreV1ReplicationControllerListForAllNamespacesHandler core_v1.WatchCoreV1ReplicationControllerListForAllNamespacesHandler
	// CoreV1WatchCoreV1ResourceQuotaListForAllNamespacesHandler sets the operation handler for the watch core v1 resource quota list for all namespaces operation
	CoreV1WatchCoreV1ResourceQuotaListForAllNamespacesHandler core_v1.WatchCoreV1ResourceQuotaListForAllNamespacesHandler
	// CoreV1WatchCoreV1SecretListForAllNamespacesHandler sets the operation handler for the watch core v1 secret list for all namespaces operation
	CoreV1WatchCoreV1SecretListForAllNamespacesHandler core_v1.WatchCoreV1SecretListForAllNamespacesHandler
	// CoreV1WatchCoreV1ServiceAccountListForAllNamespacesHandler sets the operation handler for the watch core v1 service account list for all namespaces operation
	CoreV1WatchCoreV1ServiceAccountListForAllNamespacesHandler core_v1.WatchCoreV1ServiceAccountListForAllNamespacesHandler
	// CoreV1WatchCoreV1ServiceListForAllNamespacesHandler sets the operation handler for the watch core v1 service list for all namespaces operation
	CoreV1WatchCoreV1ServiceListForAllNamespacesHandler core_v1.WatchCoreV1ServiceListForAllNamespacesHandler
	// DiscoveryV1beta1WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler sets the operation handler for the watch discovery v1beta1 endpoint slice list for all namespaces operation
	DiscoveryV1beta1WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler discovery_v1beta1.WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler
	// DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceHandler sets the operation handler for the watch discovery v1beta1 namespaced endpoint slice operation
	DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceHandler discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceHandler
	// DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler sets the operation handler for the watch discovery v1beta1 namespaced endpoint slice list operation
	DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler
	// EventsV1WatchEventsV1EventListForAllNamespacesHandler sets the operation handler for the watch events v1 event list for all namespaces operation
	EventsV1WatchEventsV1EventListForAllNamespacesHandler events_v1.WatchEventsV1EventListForAllNamespacesHandler
	// EventsV1WatchEventsV1NamespacedEventHandler sets the operation handler for the watch events v1 namespaced event operation
	EventsV1WatchEventsV1NamespacedEventHandler events_v1.WatchEventsV1NamespacedEventHandler
	// EventsV1WatchEventsV1NamespacedEventListHandler sets the operation handler for the watch events v1 namespaced event list operation
	EventsV1WatchEventsV1NamespacedEventListHandler events_v1.WatchEventsV1NamespacedEventListHandler
	// EventsV1beta1WatchEventsV1beta1EventListForAllNamespacesHandler sets the operation handler for the watch events v1beta1 event list for all namespaces operation
	EventsV1beta1WatchEventsV1beta1EventListForAllNamespacesHandler events_v1beta1.WatchEventsV1beta1EventListForAllNamespacesHandler
	// EventsV1beta1WatchEventsV1beta1NamespacedEventHandler sets the operation handler for the watch events v1beta1 namespaced event operation
	EventsV1beta1WatchEventsV1beta1NamespacedEventHandler events_v1beta1.WatchEventsV1beta1NamespacedEventHandler
	// EventsV1beta1WatchEventsV1beta1NamespacedEventListHandler sets the operation handler for the watch events v1beta1 namespaced event list operation
	EventsV1beta1WatchEventsV1beta1NamespacedEventListHandler events_v1beta1.WatchEventsV1beta1NamespacedEventListHandler
	// ExtensionsV1beta1WatchExtensionsV1beta1IngressListForAllNamespacesHandler sets the operation handler for the watch extensions v1beta1 ingress list for all namespaces operation
	ExtensionsV1beta1WatchExtensionsV1beta1IngressListForAllNamespacesHandler extensions_v1beta1.WatchExtensionsV1beta1IngressListForAllNamespacesHandler
	// ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressHandler sets the operation handler for the watch extensions v1beta1 namespaced ingress operation
	ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressHandler extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressHandler
	// ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressListHandler sets the operation handler for the watch extensions v1beta1 namespaced ingress list operation
	ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressListHandler extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressListHandler
	// FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler sets the operation handler for the watch flowcontrol apiserver v1alpha1 flow schema operation
	FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler
	// FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler sets the operation handler for the watch flowcontrol apiserver v1alpha1 flow schema list operation
	FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler
	// FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler sets the operation handler for the watch flowcontrol apiserver v1alpha1 priority level configuration operation
	FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler
	// FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler sets the operation handler for the watch flowcontrol apiserver v1alpha1 priority level configuration list operation
	FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler
	// NetworkingV1WatchNetworkingV1IngressClassHandler sets the operation handler for the watch networking v1 ingress class operation
	NetworkingV1WatchNetworkingV1IngressClassHandler networking_v1.WatchNetworkingV1IngressClassHandler
	// NetworkingV1WatchNetworkingV1IngressClassListHandler sets the operation handler for the watch networking v1 ingress class list operation
	NetworkingV1WatchNetworkingV1IngressClassListHandler networking_v1.WatchNetworkingV1IngressClassListHandler
	// NetworkingV1WatchNetworkingV1IngressListForAllNamespacesHandler sets the operation handler for the watch networking v1 ingress list for all namespaces operation
	NetworkingV1WatchNetworkingV1IngressListForAllNamespacesHandler networking_v1.WatchNetworkingV1IngressListForAllNamespacesHandler
	// NetworkingV1WatchNetworkingV1NamespacedIngressHandler sets the operation handler for the watch networking v1 namespaced ingress operation
	NetworkingV1WatchNetworkingV1NamespacedIngressHandler networking_v1.WatchNetworkingV1NamespacedIngressHandler
	// NetworkingV1WatchNetworkingV1NamespacedIngressListHandler sets the operation handler for the watch networking v1 namespaced ingress list operation
	NetworkingV1WatchNetworkingV1NamespacedIngressListHandler networking_v1.WatchNetworkingV1NamespacedIngressListHandler
	// NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyHandler sets the operation handler for the watch networking v1 namespaced network policy operation
	NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyHandler networking_v1.WatchNetworkingV1NamespacedNetworkPolicyHandler
	// NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyListHandler sets the operation handler for the watch networking v1 namespaced network policy list operation
	NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyListHandler networking_v1.WatchNetworkingV1NamespacedNetworkPolicyListHandler
	// NetworkingV1WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler sets the operation handler for the watch networking v1 network policy list for all namespaces operation
	NetworkingV1WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler networking_v1.WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler
	// NetworkingV1beta1WatchNetworkingV1beta1IngressClassHandler sets the operation handler for the watch networking v1beta1 ingress class operation
	NetworkingV1beta1WatchNetworkingV1beta1IngressClassHandler networking_v1beta1.WatchNetworkingV1beta1IngressClassHandler
	// NetworkingV1beta1WatchNetworkingV1beta1IngressClassListHandler sets the operation handler for the watch networking v1beta1 ingress class list operation
	NetworkingV1beta1WatchNetworkingV1beta1IngressClassListHandler networking_v1beta1.WatchNetworkingV1beta1IngressClassListHandler
	// NetworkingV1beta1WatchNetworkingV1beta1IngressListForAllNamespacesHandler sets the operation handler for the watch networking v1beta1 ingress list for all namespaces operation
	NetworkingV1beta1WatchNetworkingV1beta1IngressListForAllNamespacesHandler networking_v1beta1.WatchNetworkingV1beta1IngressListForAllNamespacesHandler
	// NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressHandler sets the operation handler for the watch networking v1beta1 namespaced ingress operation
	NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressHandler networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressHandler
	// NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressListHandler sets the operation handler for the watch networking v1beta1 namespaced ingress list operation
	NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressListHandler networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressListHandler
	// NodeV1alpha1WatchNodeV1alpha1RuntimeClassHandler sets the operation handler for the watch node v1alpha1 runtime class operation
	NodeV1alpha1WatchNodeV1alpha1RuntimeClassHandler node_v1alpha1.WatchNodeV1alpha1RuntimeClassHandler
	// NodeV1alpha1WatchNodeV1alpha1RuntimeClassListHandler sets the operation handler for the watch node v1alpha1 runtime class list operation
	NodeV1alpha1WatchNodeV1alpha1RuntimeClassListHandler node_v1alpha1.WatchNodeV1alpha1RuntimeClassListHandler
	// NodeV1beta1WatchNodeV1beta1RuntimeClassHandler sets the operation handler for the watch node v1beta1 runtime class operation
	NodeV1beta1WatchNodeV1beta1RuntimeClassHandler node_v1beta1.WatchNodeV1beta1RuntimeClassHandler
	// NodeV1beta1WatchNodeV1beta1RuntimeClassListHandler sets the operation handler for the watch node v1beta1 runtime class list operation
	NodeV1beta1WatchNodeV1beta1RuntimeClassListHandler node_v1beta1.WatchNodeV1beta1RuntimeClassListHandler
	// PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler sets the operation handler for the watch policy v1beta1 namespaced pod disruption budget operation
	PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler
	// PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler sets the operation handler for the watch policy v1beta1 namespaced pod disruption budget list operation
	PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler
	// PolicyV1beta1WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler sets the operation handler for the watch policy v1beta1 pod disruption budget list for all namespaces operation
	PolicyV1beta1WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler policy_v1beta1.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler
	// PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyHandler sets the operation handler for the watch policy v1beta1 pod security policy operation
	PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyHandler policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyHandler
	// PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyListHandler sets the operation handler for the watch policy v1beta1 pod security policy list operation
	PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyListHandler policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyListHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleHandler sets the operation handler for the watch rbac authorization v1 cluster role operation
	RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleHandler rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingHandler sets the operation handler for the watch rbac authorization v1 cluster role binding operation
	RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingHandler rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingListHandler sets the operation handler for the watch rbac authorization v1 cluster role binding list operation
	RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingListHandler rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingListHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleListHandler sets the operation handler for the watch rbac authorization v1 cluster role list operation
	RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleListHandler rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleListHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleHandler sets the operation handler for the watch rbac authorization v1 namespaced role operation
	RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleHandler rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingHandler sets the operation handler for the watch rbac authorization v1 namespaced role binding operation
	RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingHandler rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingListHandler sets the operation handler for the watch rbac authorization v1 namespaced role binding list operation
	RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingListHandler rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingListHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleListHandler sets the operation handler for the watch rbac authorization v1 namespaced role list operation
	RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleListHandler rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleListHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1 role binding list for all namespaces operation
	RbacAuthorizationV1WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler rbac_authorization_v1.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler
	// RbacAuthorizationV1WatchRbacAuthorizationV1RoleListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1 role list for all namespaces operation
	RbacAuthorizationV1WatchRbacAuthorizationV1RoleListForAllNamespacesHandler rbac_authorization_v1.WatchRbacAuthorizationV1RoleListForAllNamespacesHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleHandler sets the operation handler for the watch rbac authorization v1alpha1 cluster role operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler sets the operation handler for the watch rbac authorization v1alpha1 cluster role binding operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler sets the operation handler for the watch rbac authorization v1alpha1 cluster role binding list operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleListHandler sets the operation handler for the watch rbac authorization v1alpha1 cluster role list operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleListHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleListHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleHandler sets the operation handler for the watch rbac authorization v1alpha1 namespaced role operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler sets the operation handler for the watch rbac authorization v1alpha1 namespaced role binding operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler sets the operation handler for the watch rbac authorization v1alpha1 namespaced role binding list operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler sets the operation handler for the watch rbac authorization v1alpha1 namespaced role list operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1alpha1 role binding list for all namespaces operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler
	// RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1alpha1 role list for all namespaces operation
	RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleHandler sets the operation handler for the watch rbac authorization v1beta1 cluster role operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler sets the operation handler for the watch rbac authorization v1beta1 cluster role binding operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler sets the operation handler for the watch rbac authorization v1beta1 cluster role binding list operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleListHandler sets the operation handler for the watch rbac authorization v1beta1 cluster role list operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleListHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleListHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleHandler sets the operation handler for the watch rbac authorization v1beta1 namespaced role operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler sets the operation handler for the watch rbac authorization v1beta1 namespaced role binding operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler sets the operation handler for the watch rbac authorization v1beta1 namespaced role binding list operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleListHandler sets the operation handler for the watch rbac authorization v1beta1 namespaced role list operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleListHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleListHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1beta1 role binding list for all namespaces operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler
	// RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler sets the operation handler for the watch rbac authorization v1beta1 role list for all namespaces operation
	RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler
	// SchedulingV1WatchSchedulingV1PriorityClassHandler sets the operation handler for the watch scheduling v1 priority class operation
	SchedulingV1WatchSchedulingV1PriorityClassHandler scheduling_v1.WatchSchedulingV1PriorityClassHandler
	// SchedulingV1WatchSchedulingV1PriorityClassListHandler sets the operation handler for the watch scheduling v1 priority class list operation
	SchedulingV1WatchSchedulingV1PriorityClassListHandler scheduling_v1.WatchSchedulingV1PriorityClassListHandler
	// SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassHandler sets the operation handler for the watch scheduling v1alpha1 priority class operation
	SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassHandler scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassHandler
	// SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassListHandler sets the operation handler for the watch scheduling v1alpha1 priority class list operation
	SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassListHandler scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassListHandler
	// SchedulingV1beta1WatchSchedulingV1beta1PriorityClassHandler sets the operation handler for the watch scheduling v1beta1 priority class operation
	SchedulingV1beta1WatchSchedulingV1beta1PriorityClassHandler scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassHandler
	// SchedulingV1beta1WatchSchedulingV1beta1PriorityClassListHandler sets the operation handler for the watch scheduling v1beta1 priority class list operation
	SchedulingV1beta1WatchSchedulingV1beta1PriorityClassListHandler scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassListHandler
	// SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetHandler sets the operation handler for the watch settings v1alpha1 namespaced pod preset operation
	SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetHandler settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetHandler
	// SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetListHandler sets the operation handler for the watch settings v1alpha1 namespaced pod preset list operation
	SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetListHandler settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetListHandler
	// SettingsV1alpha1WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler sets the operation handler for the watch settings v1alpha1 pod preset list for all namespaces operation
	SettingsV1alpha1WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler settings_v1alpha1.WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler
	// StorageV1WatchStorageV1CSIDriverHandler sets the operation handler for the watch storage v1 c s i driver operation
	StorageV1WatchStorageV1CSIDriverHandler storage_v1.WatchStorageV1CSIDriverHandler
	// StorageV1WatchStorageV1CSIDriverListHandler sets the operation handler for the watch storage v1 c s i driver list operation
	StorageV1WatchStorageV1CSIDriverListHandler storage_v1.WatchStorageV1CSIDriverListHandler
	// StorageV1WatchStorageV1CSINodeHandler sets the operation handler for the watch storage v1 c s i node operation
	StorageV1WatchStorageV1CSINodeHandler storage_v1.WatchStorageV1CSINodeHandler
	// StorageV1WatchStorageV1CSINodeListHandler sets the operation handler for the watch storage v1 c s i node list operation
	StorageV1WatchStorageV1CSINodeListHandler storage_v1.WatchStorageV1CSINodeListHandler
	// StorageV1WatchStorageV1StorageClassHandler sets the operation handler for the watch storage v1 storage class operation
	StorageV1WatchStorageV1StorageClassHandler storage_v1.WatchStorageV1StorageClassHandler
	// StorageV1WatchStorageV1StorageClassListHandler sets the operation handler for the watch storage v1 storage class list operation
	StorageV1WatchStorageV1StorageClassListHandler storage_v1.WatchStorageV1StorageClassListHandler
	// StorageV1WatchStorageV1VolumeAttachmentHandler sets the operation handler for the watch storage v1 volume attachment operation
	StorageV1WatchStorageV1VolumeAttachmentHandler storage_v1.WatchStorageV1VolumeAttachmentHandler
	// StorageV1WatchStorageV1VolumeAttachmentListHandler sets the operation handler for the watch storage v1 volume attachment list operation
	StorageV1WatchStorageV1VolumeAttachmentListHandler storage_v1.WatchStorageV1VolumeAttachmentListHandler
	// StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentHandler sets the operation handler for the watch storage v1alpha1 volume attachment operation
	StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentHandler storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentHandler
	// StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentListHandler sets the operation handler for the watch storage v1alpha1 volume attachment list operation
	StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentListHandler storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentListHandler
	// StorageV1beta1WatchStorageV1beta1CSIDriverHandler sets the operation handler for the watch storage v1beta1 c s i driver operation
	StorageV1beta1WatchStorageV1beta1CSIDriverHandler storage_v1beta1.WatchStorageV1beta1CSIDriverHandler
	// StorageV1beta1WatchStorageV1beta1CSIDriverListHandler sets the operation handler for the watch storage v1beta1 c s i driver list operation
	StorageV1beta1WatchStorageV1beta1CSIDriverListHandler storage_v1beta1.WatchStorageV1beta1CSIDriverListHandler
	// StorageV1beta1WatchStorageV1beta1CSINodeHandler sets the operation handler for the watch storage v1beta1 c s i node operation
	StorageV1beta1WatchStorageV1beta1CSINodeHandler storage_v1beta1.WatchStorageV1beta1CSINodeHandler
	// StorageV1beta1WatchStorageV1beta1CSINodeListHandler sets the operation handler for the watch storage v1beta1 c s i node list operation
	StorageV1beta1WatchStorageV1beta1CSINodeListHandler storage_v1beta1.WatchStorageV1beta1CSINodeListHandler
	// StorageV1beta1WatchStorageV1beta1StorageClassHandler sets the operation handler for the watch storage v1beta1 storage class operation
	StorageV1beta1WatchStorageV1beta1StorageClassHandler storage_v1beta1.WatchStorageV1beta1StorageClassHandler
	// StorageV1beta1WatchStorageV1beta1StorageClassListHandler sets the operation handler for the watch storage v1beta1 storage class list operation
	StorageV1beta1WatchStorageV1beta1StorageClassListHandler storage_v1beta1.WatchStorageV1beta1StorageClassListHandler
	// StorageV1beta1WatchStorageV1beta1VolumeAttachmentHandler sets the operation handler for the watch storage v1beta1 volume attachment operation
	StorageV1beta1WatchStorageV1beta1VolumeAttachmentHandler storage_v1beta1.WatchStorageV1beta1VolumeAttachmentHandler
	// StorageV1beta1WatchStorageV1beta1VolumeAttachmentListHandler sets the operation handler for the watch storage v1beta1 volume attachment list operation
	StorageV1beta1WatchStorageV1beta1VolumeAttachmentListHandler storage_v1beta1.WatchStorageV1beta1VolumeAttachmentListHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *KubernetesAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *KubernetesAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *KubernetesAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KubernetesAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KubernetesAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KubernetesAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KubernetesAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KubernetesAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KubernetesAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KubernetesAPI
func (o *KubernetesAPI) Validate() error {
	var unregistered []string

	if o.EmptyConsumer == nil {
		unregistered = append(unregistered, "EmptyConsumer")
	}
	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.ProtobufConsumer == nil {
		unregistered = append(unregistered, "ProtobufConsumer")
	}
	if o.YamlConsumer == nil {
		unregistered = append(unregistered, "YamlConsumer")
	}

	if o.EmptyProducer == nil {
		unregistered = append(unregistered, "EmptyProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}
	if o.ProtobufProducer == nil {
		unregistered = append(unregistered, "ProtobufProducer")
	}
	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}
	if o.YamlProducer == nil {
		unregistered = append(unregistered, "YamlProducer")
	}

	if o.CiliumDeleteApisCiliumIoV2CiliumEndpointHandler == nil {
		unregistered = append(unregistered, "cilium.DeleteApisCiliumIoV2CiliumEndpointHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumEndpointHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumEndpointHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumIdentityHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumIdentityHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumLocalRedirectPolicyHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumLocalRedirectPolicyHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumNetworkPolicyHandler")
	}
	if o.CiliumListApisCiliumIoV2CiliumNodesHandler == nil {
		unregistered = append(unregistered, "cilium.ListApisCiliumIoV2CiliumNodesHandler")
	}
	if o.CiliumPatchApisCiliumIoV2CiliumEndpointStatusHandler == nil {
		unregistered = append(unregistered, "cilium.PatchApisCiliumIoV2CiliumEndpointStatusHandler")
	}
	if o.CiliumPatchApisCiliumIoV2CiliumIdentityStatusHandler == nil {
		unregistered = append(unregistered, "cilium.PatchApisCiliumIoV2CiliumIdentityStatusHandler")
	}
	if o.CiliumPostApisCiliumIoV2CiliumEndpointHandler == nil {
		unregistered = append(unregistered, "cilium.PostApisCiliumIoV2CiliumEndpointHandler")
	}
	if o.CiliumPostApisCiliumIoV2CiliumNodesHandler == nil {
		unregistered = append(unregistered, "cilium.PostApisCiliumIoV2CiliumNodesHandler")
	}
	if o.CiliumPutApisCiliumIoV2CiliumNodesHandler == nil {
		unregistered = append(unregistered, "cilium.PutApisCiliumIoV2CiliumNodesHandler")
	}
	if o.CiliumReadApisCiliumIoV2CiliumNodeHandler == nil {
		unregistered = append(unregistered, "cilium.ReadApisCiliumIoV2CiliumNodeHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1DeleteNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1DeleteNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedPodAttachHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedPodAttachHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedPodExecHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedPodExecHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedPodPortforwardHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedPodPortforwardHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1GetNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1GetNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1GetNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1GetNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1HeadNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1HeadNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1OptionsNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1OptionsNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PatchNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PatchNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedPodAttachHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedPodAttachHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedPodExecHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedPodExecHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedPodPortforwardHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedPodPortforwardHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PostNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PostNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PostNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PostNodeProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PutNamespacedPodProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNamespacedPodProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PutNamespacedPodProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNamespacedPodProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PutNamespacedServiceProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNamespacedServiceProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PutNamespacedServiceProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNamespacedServiceProxyWithPathHandler")
	}
	if o.CoreV1ConnectCoreV1PutNodeProxyHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNodeProxyHandler")
	}
	if o.CoreV1ConnectCoreV1PutNodeProxyWithPathHandler == nil {
		unregistered = append(unregistered, "core_v1.ConnectCoreV1PutNodeProxyWithPathHandler")
	}
	if o.AdmissionregistrationV1CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1CreateApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.CreateApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1CreateApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.CreateApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiregistrationV1CreateApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.CreateApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1CreateApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.CreateApiregistrationV1beta1APIServiceHandler")
	}
	if o.AppsV1CreateAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.CreateAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1CreateAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.CreateAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1CreateAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.CreateAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1CreateAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.CreateAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1CreateAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.CreateAppsV1NamespacedStatefulSetHandler")
	}
	if o.AuthenticationV1CreateAuthenticationV1TokenReviewHandler == nil {
		unregistered = append(unregistered, "authentication_v1.CreateAuthenticationV1TokenReviewHandler")
	}
	if o.AuthenticationV1beta1CreateAuthenticationV1beta1TokenReviewHandler == nil {
		unregistered = append(unregistered, "authentication_v1beta1.CreateAuthenticationV1beta1TokenReviewHandler")
	}
	if o.AuthorizationV1CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1.CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler")
	}
	if o.AuthorizationV1CreateAuthorizationV1SelfSubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1.CreateAuthorizationV1SelfSubjectAccessReviewHandler")
	}
	if o.AuthorizationV1CreateAuthorizationV1SelfSubjectRulesReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1.CreateAuthorizationV1SelfSubjectRulesReviewHandler")
	}
	if o.AuthorizationV1CreateAuthorizationV1SubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1.CreateAuthorizationV1SubjectAccessReviewHandler")
	}
	if o.AuthorizationV1beta1CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1beta1.CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler")
	}
	if o.AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler")
	}
	if o.AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1beta1.CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler")
	}
	if o.AuthorizationV1beta1CreateAuthorizationV1beta1SubjectAccessReviewHandler == nil {
		unregistered = append(unregistered, "authorization_v1beta1.CreateAuthorizationV1beta1SubjectAccessReviewHandler")
	}
	if o.AutoscalingV1CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.BatchV1CreateBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.CreateBatchV1NamespacedJobHandler")
	}
	if o.BatchV1beta1CreateBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.CreateBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1CreateBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.CreateBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.CertificatesV1CreateCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.CreateCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1CreateCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.CreateCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CoordinationV1CreateCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.CreateCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1CreateCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.CreateCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1CreateCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespaceHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedBindingHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedBindingHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedEventHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedPodHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedPodBindingHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedPodBindingHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedPodEvictionHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedPodEvictionHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1CreateCoreV1NamespacedServiceAccountTokenHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NamespacedServiceAccountTokenHandler")
	}
	if o.CoreV1CreateCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1NodeHandler")
	}
	if o.CoreV1CreateCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.CreateCoreV1PersistentVolumeHandler")
	}
	if o.DiscoveryV1beta1CreateDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.CreateDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1CreateEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.CreateEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1CreateEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.CreateEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1CreateExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.CreateExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.NetworkingV1CreateNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.CreateNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1CreateNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.CreateNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1CreateNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.CreateNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1beta1CreateNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.CreateNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1CreateNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.CreateNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NodeV1alpha1CreateNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.CreateNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1CreateNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.CreateNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1CreatePolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.CreatePolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.CreateRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.CreateRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.SchedulingV1CreateSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.CreateSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1CreateSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.CreateSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1CreateSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.CreateSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1CreateSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.CreateSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.StorageV1CreateStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.CreateStorageV1CSIDriverHandler")
	}
	if o.StorageV1CreateStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.CreateStorageV1CSINodeHandler")
	}
	if o.StorageV1CreateStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.CreateStorageV1StorageClassHandler")
	}
	if o.StorageV1CreateStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.CreateStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1alpha1CreateStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.CreateStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1CreateStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.CreateStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1CreateStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.CreateStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1CreateStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.CreateStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1CreateStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.CreateStorageV1beta1VolumeAttachmentHandler")
	}
	if o.AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1DeleteApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.DeleteApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1DeleteApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.DeleteApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiregistrationV1DeleteApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.DeleteApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1DeleteApiregistrationV1CollectionAPIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.DeleteApiregistrationV1CollectionAPIServiceHandler")
	}
	if o.ApiregistrationV1beta1DeleteApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.DeleteApiregistrationV1beta1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1DeleteApiregistrationV1beta1CollectionAPIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.DeleteApiregistrationV1beta1CollectionAPIServiceHandler")
	}
	if o.AppsV1DeleteAppsV1CollectionNamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1CollectionNamespacedControllerRevisionHandler")
	}
	if o.AppsV1DeleteAppsV1CollectionNamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1CollectionNamespacedDaemonSetHandler")
	}
	if o.AppsV1DeleteAppsV1CollectionNamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1CollectionNamespacedDeploymentHandler")
	}
	if o.AppsV1DeleteAppsV1CollectionNamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1CollectionNamespacedReplicaSetHandler")
	}
	if o.AppsV1DeleteAppsV1CollectionNamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1CollectionNamespacedStatefulSetHandler")
	}
	if o.AppsV1DeleteAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1DeleteAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1DeleteAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1DeleteAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1DeleteAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.DeleteAppsV1NamespacedStatefulSetHandler")
	}
	if o.AutoscalingV1DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV1DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.BatchV1DeleteBatchV1CollectionNamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.DeleteBatchV1CollectionNamespacedJobHandler")
	}
	if o.BatchV1DeleteBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.DeleteBatchV1NamespacedJobHandler")
	}
	if o.BatchV1beta1DeleteBatchV1beta1CollectionNamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.DeleteBatchV1beta1CollectionNamespacedCronJobHandler")
	}
	if o.BatchV1beta1DeleteBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.DeleteBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1DeleteBatchV2alpha1CollectionNamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.DeleteBatchV2alpha1CollectionNamespacedCronJobHandler")
	}
	if o.BatchV2alpha1DeleteBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.DeleteBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.CertificatesV1DeleteCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.DeleteCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1DeleteCertificatesV1CollectionCertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.DeleteCertificatesV1CollectionCertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1DeleteCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.DeleteCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler")
	}
	if o.CoordinationV1DeleteCoordinationV1CollectionNamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.DeleteCoordinationV1CollectionNamespacedLeaseHandler")
	}
	if o.CoordinationV1DeleteCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.DeleteCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1DeleteCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.DeleteCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedConfigMapHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedEndpointsHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedEventHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedLimitRangeHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedPodHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedPodTemplateHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedReplicationControllerHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedResourceQuotaHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedSecretHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNamespacedServiceAccountHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionNodeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionNodeHandler")
	}
	if o.CoreV1DeleteCoreV1CollectionPersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1CollectionPersistentVolumeHandler")
	}
	if o.CoreV1DeleteCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespaceHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedEventHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedPodHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1DeleteCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1DeleteCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1NodeHandler")
	}
	if o.CoreV1DeleteCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.DeleteCoreV1PersistentVolumeHandler")
	}
	if o.DiscoveryV1beta1DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler")
	}
	if o.DiscoveryV1beta1DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1DeleteEventsV1CollectionNamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.DeleteEventsV1CollectionNamespacedEventHandler")
	}
	if o.EventsV1DeleteEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.DeleteEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1DeleteEventsV1beta1CollectionNamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.DeleteEventsV1beta1CollectionNamespacedEventHandler")
	}
	if o.EventsV1beta1DeleteEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.DeleteEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1DeleteExtensionsV1beta1CollectionNamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.DeleteExtensionsV1beta1CollectionNamespacedIngressHandler")
	}
	if o.ExtensionsV1beta1DeleteExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.DeleteExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler")
	}
	if o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1CollectionIngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1CollectionIngressClassHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1CollectionNamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1CollectionNamespacedIngressHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1DeleteNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.DeleteNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1beta1DeleteNetworkingV1beta1CollectionIngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.DeleteNetworkingV1beta1CollectionIngressClassHandler")
	}
	if o.NetworkingV1beta1DeleteNetworkingV1beta1CollectionNamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.DeleteNetworkingV1beta1CollectionNamespacedIngressHandler")
	}
	if o.NetworkingV1beta1DeleteNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.DeleteNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1DeleteNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.DeleteNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NodeV1alpha1DeleteNodeV1alpha1CollectionRuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.DeleteNodeV1alpha1CollectionRuntimeClassHandler")
	}
	if o.NodeV1alpha1DeleteNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.DeleteNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1DeleteNodeV1beta1CollectionRuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.DeleteNodeV1beta1CollectionRuntimeClassHandler")
	}
	if o.NodeV1beta1DeleteNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.DeleteNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1DeletePolicyV1beta1CollectionPodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.DeletePolicyV1beta1CollectionPodSecurityPolicyHandler")
	}
	if o.PolicyV1beta1DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1DeletePolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.DeletePolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.DeleteRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.SchedulingV1DeleteSchedulingV1CollectionPriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.DeleteSchedulingV1CollectionPriorityClassHandler")
	}
	if o.SchedulingV1DeleteSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.DeleteSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1DeleteSchedulingV1alpha1CollectionPriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.DeleteSchedulingV1alpha1CollectionPriorityClassHandler")
	}
	if o.SchedulingV1alpha1DeleteSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.DeleteSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1DeleteSchedulingV1beta1CollectionPriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.DeleteSchedulingV1beta1CollectionPriorityClassHandler")
	}
	if o.SchedulingV1beta1DeleteSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.DeleteSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler")
	}
	if o.SettingsV1alpha1DeleteSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.DeleteSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.StorageV1DeleteStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CSIDriverHandler")
	}
	if o.StorageV1DeleteStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CSINodeHandler")
	}
	if o.StorageV1DeleteStorageV1CollectionCSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CollectionCSIDriverHandler")
	}
	if o.StorageV1DeleteStorageV1CollectionCSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CollectionCSINodeHandler")
	}
	if o.StorageV1DeleteStorageV1CollectionStorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CollectionStorageClassHandler")
	}
	if o.StorageV1DeleteStorageV1CollectionVolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1CollectionVolumeAttachmentHandler")
	}
	if o.StorageV1DeleteStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1StorageClassHandler")
	}
	if o.StorageV1DeleteStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.DeleteStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1alpha1DeleteStorageV1alpha1CollectionVolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.DeleteStorageV1alpha1CollectionVolumeAttachmentHandler")
	}
	if o.StorageV1alpha1DeleteStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.DeleteStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CollectionCSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CollectionCSIDriverHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CollectionCSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CollectionCSINodeHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CollectionStorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CollectionStorageClassHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1CollectionVolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1CollectionVolumeAttachmentHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1DeleteStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.DeleteStorageV1beta1VolumeAttachmentHandler")
	}
	if o.ApisGetAPIVersionsHandler == nil {
		unregistered = append(unregistered, "apis.GetAPIVersionsHandler")
	}
	if o.AdmissionregistrationGetAdmissionregistrationAPIGroupHandler == nil {
		unregistered = append(unregistered, "admissionregistration.GetAdmissionregistrationAPIGroupHandler")
	}
	if o.AdmissionregistrationV1GetAdmissionregistrationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.GetAdmissionregistrationV1APIResourcesHandler")
	}
	if o.AdmissionregistrationV1beta1GetAdmissionregistrationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.GetAdmissionregistrationV1beta1APIResourcesHandler")
	}
	if o.ApiextensionsGetApiextensionsAPIGroupHandler == nil {
		unregistered = append(unregistered, "apiextensions.GetApiextensionsAPIGroupHandler")
	}
	if o.ApiextensionsV1GetApiextensionsV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.GetApiextensionsV1APIResourcesHandler")
	}
	if o.ApiextensionsV1beta1GetApiextensionsV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.GetApiextensionsV1beta1APIResourcesHandler")
	}
	if o.ApiregistrationGetApiregistrationAPIGroupHandler == nil {
		unregistered = append(unregistered, "apiregistration.GetApiregistrationAPIGroupHandler")
	}
	if o.ApiregistrationV1GetApiregistrationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.GetApiregistrationV1APIResourcesHandler")
	}
	if o.ApiregistrationV1beta1GetApiregistrationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.GetApiregistrationV1beta1APIResourcesHandler")
	}
	if o.AppsGetAppsAPIGroupHandler == nil {
		unregistered = append(unregistered, "apps.GetAppsAPIGroupHandler")
	}
	if o.AppsV1GetAppsV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "apps_v1.GetAppsV1APIResourcesHandler")
	}
	if o.AuthenticationGetAuthenticationAPIGroupHandler == nil {
		unregistered = append(unregistered, "authentication.GetAuthenticationAPIGroupHandler")
	}
	if o.AuthenticationV1GetAuthenticationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "authentication_v1.GetAuthenticationV1APIResourcesHandler")
	}
	if o.AuthenticationV1beta1GetAuthenticationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "authentication_v1beta1.GetAuthenticationV1beta1APIResourcesHandler")
	}
	if o.AuthorizationGetAuthorizationAPIGroupHandler == nil {
		unregistered = append(unregistered, "authorization.GetAuthorizationAPIGroupHandler")
	}
	if o.AuthorizationV1GetAuthorizationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "authorization_v1.GetAuthorizationV1APIResourcesHandler")
	}
	if o.AuthorizationV1beta1GetAuthorizationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "authorization_v1beta1.GetAuthorizationV1beta1APIResourcesHandler")
	}
	if o.AutoscalingGetAutoscalingAPIGroupHandler == nil {
		unregistered = append(unregistered, "autoscaling.GetAutoscalingAPIGroupHandler")
	}
	if o.AutoscalingV1GetAutoscalingV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.GetAutoscalingV1APIResourcesHandler")
	}
	if o.AutoscalingV2beta1GetAutoscalingV2beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.GetAutoscalingV2beta1APIResourcesHandler")
	}
	if o.AutoscalingV2beta2GetAutoscalingV2beta2APIResourcesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.GetAutoscalingV2beta2APIResourcesHandler")
	}
	if o.BatchGetBatchAPIGroupHandler == nil {
		unregistered = append(unregistered, "batch.GetBatchAPIGroupHandler")
	}
	if o.BatchV1GetBatchV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "batch_v1.GetBatchV1APIResourcesHandler")
	}
	if o.BatchV1beta1GetBatchV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.GetBatchV1beta1APIResourcesHandler")
	}
	if o.BatchV2alpha1GetBatchV2alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.GetBatchV2alpha1APIResourcesHandler")
	}
	if o.CertificatesGetCertificatesAPIGroupHandler == nil {
		unregistered = append(unregistered, "certificates.GetCertificatesAPIGroupHandler")
	}
	if o.CertificatesV1GetCertificatesV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "certificates_v1.GetCertificatesV1APIResourcesHandler")
	}
	if o.CertificatesV1beta1GetCertificatesV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.GetCertificatesV1beta1APIResourcesHandler")
	}
	if o.VersionGetCodeVersionHandler == nil {
		unregistered = append(unregistered, "version.GetCodeVersionHandler")
	}
	if o.CoordinationGetCoordinationAPIGroupHandler == nil {
		unregistered = append(unregistered, "coordination.GetCoordinationAPIGroupHandler")
	}
	if o.CoordinationV1GetCoordinationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "coordination_v1.GetCoordinationV1APIResourcesHandler")
	}
	if o.CoordinationV1beta1GetCoordinationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.GetCoordinationV1beta1APIResourcesHandler")
	}
	if o.CoreGetCoreAPIVersionsHandler == nil {
		unregistered = append(unregistered, "core.GetCoreAPIVersionsHandler")
	}
	if o.CoreV1GetCoreV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "core_v1.GetCoreV1APIResourcesHandler")
	}
	if o.DiscoveryGetDiscoveryAPIGroupHandler == nil {
		unregistered = append(unregistered, "discovery.GetDiscoveryAPIGroupHandler")
	}
	if o.DiscoveryV1beta1GetDiscoveryV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.GetDiscoveryV1beta1APIResourcesHandler")
	}
	if o.EventsGetEventsAPIGroupHandler == nil {
		unregistered = append(unregistered, "events.GetEventsAPIGroupHandler")
	}
	if o.EventsV1GetEventsV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "events_v1.GetEventsV1APIResourcesHandler")
	}
	if o.EventsV1beta1GetEventsV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.GetEventsV1beta1APIResourcesHandler")
	}
	if o.ExtensionsGetExtensionsAPIGroupHandler == nil {
		unregistered = append(unregistered, "extensions.GetExtensionsAPIGroupHandler")
	}
	if o.ExtensionsV1beta1GetExtensionsV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.GetExtensionsV1beta1APIResourcesHandler")
	}
	if o.FlowcontrolApiserverGetFlowcontrolApiserverAPIGroupHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver.GetFlowcontrolApiserverAPIGroupHandler")
	}
	if o.FlowcontrolApiserverV1alpha1GetFlowcontrolApiserverV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.GetFlowcontrolApiserverV1alpha1APIResourcesHandler")
	}
	if o.NetworkingGetNetworkingAPIGroupHandler == nil {
		unregistered = append(unregistered, "networking.GetNetworkingAPIGroupHandler")
	}
	if o.NetworkingV1GetNetworkingV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "networking_v1.GetNetworkingV1APIResourcesHandler")
	}
	if o.NetworkingV1beta1GetNetworkingV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.GetNetworkingV1beta1APIResourcesHandler")
	}
	if o.NodeGetNodeAPIGroupHandler == nil {
		unregistered = append(unregistered, "node.GetNodeAPIGroupHandler")
	}
	if o.NodeV1alpha1GetNodeV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.GetNodeV1alpha1APIResourcesHandler")
	}
	if o.NodeV1beta1GetNodeV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.GetNodeV1beta1APIResourcesHandler")
	}
	if o.PolicyGetPolicyAPIGroupHandler == nil {
		unregistered = append(unregistered, "policy.GetPolicyAPIGroupHandler")
	}
	if o.PolicyV1beta1GetPolicyV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.GetPolicyV1beta1APIResourcesHandler")
	}
	if o.RbacAuthorizationGetRbacAuthorizationAPIGroupHandler == nil {
		unregistered = append(unregistered, "rbac_authorization.GetRbacAuthorizationAPIGroupHandler")
	}
	if o.RbacAuthorizationV1GetRbacAuthorizationV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.GetRbacAuthorizationV1APIResourcesHandler")
	}
	if o.RbacAuthorizationV1alpha1GetRbacAuthorizationV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.GetRbacAuthorizationV1alpha1APIResourcesHandler")
	}
	if o.RbacAuthorizationV1beta1GetRbacAuthorizationV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.GetRbacAuthorizationV1beta1APIResourcesHandler")
	}
	if o.SchedulingGetSchedulingAPIGroupHandler == nil {
		unregistered = append(unregistered, "scheduling.GetSchedulingAPIGroupHandler")
	}
	if o.SchedulingV1GetSchedulingV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.GetSchedulingV1APIResourcesHandler")
	}
	if o.SchedulingV1alpha1GetSchedulingV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.GetSchedulingV1alpha1APIResourcesHandler")
	}
	if o.SchedulingV1beta1GetSchedulingV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.GetSchedulingV1beta1APIResourcesHandler")
	}
	if o.SettingsGetSettingsAPIGroupHandler == nil {
		unregistered = append(unregistered, "settings.GetSettingsAPIGroupHandler")
	}
	if o.SettingsV1alpha1GetSettingsV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.GetSettingsV1alpha1APIResourcesHandler")
	}
	if o.StorageGetStorageAPIGroupHandler == nil {
		unregistered = append(unregistered, "storage.GetStorageAPIGroupHandler")
	}
	if o.StorageV1GetStorageV1APIResourcesHandler == nil {
		unregistered = append(unregistered, "storage_v1.GetStorageV1APIResourcesHandler")
	}
	if o.StorageV1alpha1GetStorageV1alpha1APIResourcesHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.GetStorageV1alpha1APIResourcesHandler")
	}
	if o.StorageV1beta1GetStorageV1beta1APIResourcesHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.GetStorageV1beta1APIResourcesHandler")
	}
	if o.AdmissionregistrationV1ListAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ListAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1ListApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.ListApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1ListApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.ListApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiregistrationV1ListApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.ListApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1ListApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.ListApiregistrationV1beta1APIServiceHandler")
	}
	if o.AppsV1ListAppsV1ControllerRevisionForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1ControllerRevisionForAllNamespacesHandler")
	}
	if o.AppsV1ListAppsV1DaemonSetForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1DaemonSetForAllNamespacesHandler")
	}
	if o.AppsV1ListAppsV1DeploymentForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1DeploymentForAllNamespacesHandler")
	}
	if o.AppsV1ListAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1ListAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1ListAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1ListAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1ListAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1NamespacedStatefulSetHandler")
	}
	if o.AppsV1ListAppsV1ReplicaSetForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1ReplicaSetForAllNamespacesHandler")
	}
	if o.AppsV1ListAppsV1StatefulSetForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.ListAppsV1StatefulSetForAllNamespacesHandler")
	}
	if o.AutoscalingV1ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler")
	}
	if o.AutoscalingV1ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler")
	}
	if o.AutoscalingV2beta1ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler")
	}
	if o.AutoscalingV2beta2ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.BatchV1ListBatchV1JobForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v1.ListBatchV1JobForAllNamespacesHandler")
	}
	if o.BatchV1ListBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.ListBatchV1NamespacedJobHandler")
	}
	if o.BatchV1beta1ListBatchV1beta1CronJobForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ListBatchV1beta1CronJobForAllNamespacesHandler")
	}
	if o.BatchV1beta1ListBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ListBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1ListBatchV2alpha1CronJobForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ListBatchV2alpha1CronJobForAllNamespacesHandler")
	}
	if o.BatchV2alpha1ListBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ListBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.CertificatesV1ListCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ListCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1ListCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ListCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CoordinationV1ListCoordinationV1LeaseForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "coordination_v1.ListCoordinationV1LeaseForAllNamespacesHandler")
	}
	if o.CoordinationV1ListCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.ListCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1ListCoordinationV1beta1LeaseForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.ListCoordinationV1beta1LeaseForAllNamespacesHandler")
	}
	if o.CoordinationV1beta1ListCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.ListCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1ListCoreV1ComponentStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ComponentStatusHandler")
	}
	if o.CoreV1ListCoreV1ConfigMapForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ConfigMapForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1EndpointsForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1EndpointsForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1EventForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1EventForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1LimitRangeForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1LimitRangeForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespaceHandler")
	}
	if o.CoreV1ListCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1ListCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1ListCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedEventHandler")
	}
	if o.CoreV1ListCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1ListCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1ListCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedPodHandler")
	}
	if o.CoreV1ListCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1ListCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1ListCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1ListCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1ListCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1ListCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1ListCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1NodeHandler")
	}
	if o.CoreV1ListCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1PersistentVolumeHandler")
	}
	if o.CoreV1ListCoreV1PersistentVolumeClaimForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1PersistentVolumeClaimForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1PodForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1PodForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1PodTemplateForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1PodTemplateForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1ReplicationControllerForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ReplicationControllerForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1ResourceQuotaForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ResourceQuotaForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1SecretForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1SecretForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1ServiceAccountForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ServiceAccountForAllNamespacesHandler")
	}
	if o.CoreV1ListCoreV1ServiceForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.ListCoreV1ServiceForAllNamespacesHandler")
	}
	if o.DiscoveryV1beta1ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler")
	}
	if o.DiscoveryV1beta1ListDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.ListDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1ListEventsV1EventForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "events_v1.ListEventsV1EventForAllNamespacesHandler")
	}
	if o.EventsV1ListEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.ListEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1ListEventsV1beta1EventForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.ListEventsV1beta1EventForAllNamespacesHandler")
	}
	if o.EventsV1beta1ListEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.ListEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1ListExtensionsV1beta1IngressForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ListExtensionsV1beta1IngressForAllNamespacesHandler")
	}
	if o.ExtensionsV1beta1ListExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ListExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.NetworkingV1ListNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.ListNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1ListNetworkingV1IngressForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1.ListNetworkingV1IngressForAllNamespacesHandler")
	}
	if o.NetworkingV1ListNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.ListNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1ListNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.ListNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1ListNetworkingV1NetworkPolicyForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1.ListNetworkingV1NetworkPolicyForAllNamespacesHandler")
	}
	if o.NetworkingV1beta1ListNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ListNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1ListNetworkingV1beta1IngressForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ListNetworkingV1beta1IngressForAllNamespacesHandler")
	}
	if o.NetworkingV1beta1ListNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ListNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NodeV1alpha1ListNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.ListNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1ListNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.ListNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler")
	}
	if o.PolicyV1beta1ListPolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ListPolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1ListRbacAuthorizationV1RoleForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ListRbacAuthorizationV1RoleForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler")
	}
	if o.SchedulingV1ListSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.ListSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1ListSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.ListSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1ListSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.ListSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1ListSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.ListSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.SettingsV1alpha1ListSettingsV1alpha1PodPresetForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.ListSettingsV1alpha1PodPresetForAllNamespacesHandler")
	}
	if o.StorageV1ListStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.ListStorageV1CSIDriverHandler")
	}
	if o.StorageV1ListStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.ListStorageV1CSINodeHandler")
	}
	if o.StorageV1ListStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.ListStorageV1StorageClassHandler")
	}
	if o.StorageV1ListStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.ListStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1alpha1ListStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.ListStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1ListStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ListStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1ListStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ListStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1ListStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ListStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1ListStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ListStorageV1beta1VolumeAttachmentHandler")
	}
	if o.LogsLogFileHandlerHandler == nil {
		unregistered = append(unregistered, "logs.LogFileHandlerHandler")
	}
	if o.LogsLogFileListHandlerHandler == nil {
		unregistered = append(unregistered, "logs.LogFileListHandlerHandler")
	}
	if o.AdmissionregistrationV1PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.PatchApiextensionsV1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiregistrationV1PatchApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.PatchApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1PatchApiregistrationV1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.PatchApiregistrationV1APIServiceStatusHandler")
	}
	if o.ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.PatchApiregistrationV1beta1APIServiceStatusHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedDaemonSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedDaemonSetStatusHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedDeploymentScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedDeploymentScaleHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedDeploymentStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedDeploymentStatusHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedReplicaSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedReplicaSetScaleHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedReplicaSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedReplicaSetStatusHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedStatefulSetHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedStatefulSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedStatefulSetScaleHandler")
	}
	if o.AppsV1PatchAppsV1NamespacedStatefulSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.PatchAppsV1NamespacedStatefulSetStatusHandler")
	}
	if o.AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.BatchV1PatchBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.PatchBatchV1NamespacedJobHandler")
	}
	if o.BatchV1PatchBatchV1NamespacedJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1.PatchBatchV1NamespacedJobStatusHandler")
	}
	if o.BatchV1beta1PatchBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.PatchBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV1beta1PatchBatchV1beta1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.PatchBatchV1beta1NamespacedCronJobStatusHandler")
	}
	if o.BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.PatchBatchV2alpha1NamespacedCronJobStatusHandler")
	}
	if o.CertificatesV1PatchCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.PatchCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1PatchCertificatesV1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1.PatchCertificatesV1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1PatchCertificatesV1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1.PatchCertificatesV1CertificateSigningRequestStatusHandler")
	}
	if o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.PatchCertificatesV1beta1CertificateSigningRequestStatusHandler")
	}
	if o.CoordinationV1PatchCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.PatchCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1PatchCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.PatchCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1PatchCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespaceHandler")
	}
	if o.CoreV1PatchCoreV1NamespaceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespaceStatusHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedEventHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedPodHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedPodStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedPodStatusHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedReplicationControllerScaleHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedReplicationControllerScaleHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedReplicationControllerStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedReplicationControllerStatusHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedResourceQuotaStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedResourceQuotaStatusHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1PatchCoreV1NamespacedServiceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NamespacedServiceStatusHandler")
	}
	if o.CoreV1PatchCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NodeHandler")
	}
	if o.CoreV1PatchCoreV1NodeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1NodeStatusHandler")
	}
	if o.CoreV1PatchCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1PersistentVolumeHandler")
	}
	if o.CoreV1PatchCoreV1PersistentVolumeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.PatchCoreV1PersistentVolumeStatusHandler")
	}
	if o.DiscoveryV1beta1PatchDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.PatchDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1PatchEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.PatchEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1PatchEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.PatchEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.PatchExtensionsV1beta1NamespacedIngressStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler")
	}
	if o.NetworkingV1PatchNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.PatchNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1PatchNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.PatchNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1PatchNetworkingV1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1.PatchNetworkingV1NamespacedIngressStatusHandler")
	}
	if o.NetworkingV1PatchNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.PatchNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1beta1PatchNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.PatchNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.PatchNetworkingV1beta1NamespacedIngressStatusHandler")
	}
	if o.NodeV1alpha1PatchNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.PatchNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1PatchNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.PatchNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler")
	}
	if o.PolicyV1beta1PatchPolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.PatchPolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.PatchRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.PatchRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.SchedulingV1PatchSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.PatchSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1PatchSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.PatchSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1PatchSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.PatchSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1PatchSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.PatchSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.StorageV1PatchStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.PatchStorageV1CSIDriverHandler")
	}
	if o.StorageV1PatchStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.PatchStorageV1CSINodeHandler")
	}
	if o.StorageV1PatchStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.PatchStorageV1StorageClassHandler")
	}
	if o.StorageV1PatchStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.PatchStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1PatchStorageV1VolumeAttachmentStatusHandler == nil {
		unregistered = append(unregistered, "storage_v1.PatchStorageV1VolumeAttachmentStatusHandler")
	}
	if o.StorageV1alpha1PatchStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.PatchStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1PatchStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.PatchStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1PatchStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.PatchStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1PatchStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.PatchStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1PatchStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.PatchStorageV1beta1VolumeAttachmentHandler")
	}
	if o.AdmissionregistrationV1ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.ReadApiextensionsV1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiregistrationV1ReadApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.ReadApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1ReadApiregistrationV1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.ReadApiregistrationV1APIServiceStatusHandler")
	}
	if o.ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.ReadApiregistrationV1beta1APIServiceStatusHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedDaemonSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedDaemonSetStatusHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedDeploymentScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedDeploymentScaleHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedDeploymentStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedDeploymentStatusHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedReplicaSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedReplicaSetScaleHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedReplicaSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedReplicaSetStatusHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedStatefulSetHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedStatefulSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedStatefulSetScaleHandler")
	}
	if o.AppsV1ReadAppsV1NamespacedStatefulSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReadAppsV1NamespacedStatefulSetStatusHandler")
	}
	if o.AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.BatchV1ReadBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.ReadBatchV1NamespacedJobHandler")
	}
	if o.BatchV1ReadBatchV1NamespacedJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1.ReadBatchV1NamespacedJobStatusHandler")
	}
	if o.BatchV1beta1ReadBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ReadBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV1beta1ReadBatchV1beta1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ReadBatchV1beta1NamespacedCronJobStatusHandler")
	}
	if o.BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ReadBatchV2alpha1NamespacedCronJobStatusHandler")
	}
	if o.CertificatesV1ReadCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReadCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1ReadCertificatesV1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReadCertificatesV1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1ReadCertificatesV1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReadCertificatesV1CertificateSigningRequestStatusHandler")
	}
	if o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReadCertificatesV1beta1CertificateSigningRequestStatusHandler")
	}
	if o.CoordinationV1ReadCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.ReadCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1ReadCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.ReadCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1ReadCoreV1ComponentStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1ComponentStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespaceHandler")
	}
	if o.CoreV1ReadCoreV1NamespaceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespaceStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedEventHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPodHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPodLogHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPodLogHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPodStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPodStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedReplicationControllerScaleHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedReplicationControllerScaleHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedReplicationControllerStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedReplicationControllerStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedResourceQuotaStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedResourceQuotaStatusHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1ReadCoreV1NamespacedServiceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NamespacedServiceStatusHandler")
	}
	if o.CoreV1ReadCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NodeHandler")
	}
	if o.CoreV1ReadCoreV1NodeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1NodeStatusHandler")
	}
	if o.CoreV1ReadCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1PersistentVolumeHandler")
	}
	if o.CoreV1ReadCoreV1PersistentVolumeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReadCoreV1PersistentVolumeStatusHandler")
	}
	if o.DiscoveryV1beta1ReadDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.ReadDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1ReadEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.ReadEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1ReadEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.ReadEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ReadExtensionsV1beta1NamespacedIngressStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler")
	}
	if o.NetworkingV1ReadNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReadNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1ReadNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReadNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1ReadNetworkingV1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReadNetworkingV1NamespacedIngressStatusHandler")
	}
	if o.NetworkingV1ReadNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReadNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1beta1ReadNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReadNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReadNetworkingV1beta1NamespacedIngressStatusHandler")
	}
	if o.NodeV1alpha1ReadNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.ReadNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1ReadNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.ReadNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler")
	}
	if o.PolicyV1beta1ReadPolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReadPolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReadRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReadRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.SchedulingV1ReadSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.ReadSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1ReadSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.ReadSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1ReadSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.ReadSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1ReadSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.ReadSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.StorageV1ReadStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReadStorageV1CSIDriverHandler")
	}
	if o.StorageV1ReadStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReadStorageV1CSINodeHandler")
	}
	if o.StorageV1ReadStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReadStorageV1StorageClassHandler")
	}
	if o.StorageV1ReadStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReadStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1ReadStorageV1VolumeAttachmentStatusHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReadStorageV1VolumeAttachmentStatusHandler")
	}
	if o.StorageV1alpha1ReadStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.ReadStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1ReadStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReadStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1ReadStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReadStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1ReadStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReadStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1ReadStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReadStorageV1beta1VolumeAttachmentHandler")
	}
	if o.AdmissionregistrationV1ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler")
	}
	if o.ApiregistrationV1ReplaceApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.ReplaceApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1ReplaceApiregistrationV1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.ReplaceApiregistrationV1APIServiceStatusHandler")
	}
	if o.ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceStatusHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.ReplaceApiregistrationV1beta1APIServiceStatusHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedDaemonSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedDaemonSetStatusHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedDeploymentScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedDeploymentScaleHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedDeploymentStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedDeploymentStatusHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedReplicaSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedReplicaSetScaleHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedReplicaSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedReplicaSetStatusHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedStatefulSetHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedStatefulSetScaleHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedStatefulSetScaleHandler")
	}
	if o.AppsV1ReplaceAppsV1NamespacedStatefulSetStatusHandler == nil {
		unregistered = append(unregistered, "apps_v1.ReplaceAppsV1NamespacedStatefulSetStatusHandler")
	}
	if o.AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler")
	}
	if o.BatchV1ReplaceBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.ReplaceBatchV1NamespacedJobHandler")
	}
	if o.BatchV1ReplaceBatchV1NamespacedJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1.ReplaceBatchV1NamespacedJobStatusHandler")
	}
	if o.BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.ReplaceBatchV1beta1NamespacedCronJobStatusHandler")
	}
	if o.BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobStatusHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.ReplaceBatchV2alpha1NamespacedCronJobStatusHandler")
	}
	if o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReplaceCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReplaceCertificatesV1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1.ReplaceCertificatesV1CertificateSigningRequestStatusHandler")
	}
	if o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler")
	}
	if o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler")
	}
	if o.CoordinationV1ReplaceCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.ReplaceCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1ReplaceCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.ReplaceCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespaceHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespaceFinalizeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespaceFinalizeHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespaceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespaceStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedEventHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedPodHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedPodStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedPodStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedReplicationControllerScaleHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedReplicationControllerScaleHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedReplicationControllerStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedReplicationControllerStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedResourceQuotaStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedResourceQuotaStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1ReplaceCoreV1NamespacedServiceStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NamespacedServiceStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NodeHandler")
	}
	if o.CoreV1ReplaceCoreV1NodeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1NodeStatusHandler")
	}
	if o.CoreV1ReplaceCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1PersistentVolumeHandler")
	}
	if o.CoreV1ReplaceCoreV1PersistentVolumeStatusHandler == nil {
		unregistered = append(unregistered, "core_v1.ReplaceCoreV1PersistentVolumeStatusHandler")
	}
	if o.DiscoveryV1beta1ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.EventsV1ReplaceEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.ReplaceEventsV1NamespacedEventHandler")
	}
	if o.EventsV1beta1ReplaceEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.ReplaceEventsV1beta1NamespacedEventHandler")
	}
	if o.ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.ReplaceExtensionsV1beta1NamespacedIngressStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler")
	}
	if o.NetworkingV1ReplaceNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReplaceNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1ReplaceNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReplaceNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1ReplaceNetworkingV1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReplaceNetworkingV1NamespacedIngressStatusHandler")
	}
	if o.NetworkingV1ReplaceNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.ReplaceNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1beta1ReplaceNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReplaceNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressStatusHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.ReplaceNetworkingV1beta1NamespacedIngressStatusHandler")
	}
	if o.NodeV1alpha1ReplaceNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.ReplaceNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1beta1ReplaceNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.ReplaceNodeV1beta1RuntimeClassHandler")
	}
	if o.PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler")
	}
	if o.PolicyV1beta1ReplacePolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.ReplacePolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReplaceRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.SchedulingV1ReplaceSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.ReplaceSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1ReplaceSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.ReplaceSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1beta1ReplaceSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.ReplaceSchedulingV1beta1PriorityClassHandler")
	}
	if o.SettingsV1alpha1ReplaceSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.ReplaceSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.StorageV1ReplaceStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReplaceStorageV1CSIDriverHandler")
	}
	if o.StorageV1ReplaceStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReplaceStorageV1CSINodeHandler")
	}
	if o.StorageV1ReplaceStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReplaceStorageV1StorageClassHandler")
	}
	if o.StorageV1ReplaceStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReplaceStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1ReplaceStorageV1VolumeAttachmentStatusHandler == nil {
		unregistered = append(unregistered, "storage_v1.ReplaceStorageV1VolumeAttachmentStatusHandler")
	}
	if o.StorageV1alpha1ReplaceStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.ReplaceStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1ReplaceStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReplaceStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1ReplaceStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReplaceStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1ReplaceStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReplaceStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1ReplaceStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.ReplaceStorageV1beta1VolumeAttachmentHandler")
	}
	if o.AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler")
	}
	if o.AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1.WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler")
	}
	if o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler")
	}
	if o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler")
	}
	if o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler == nil {
		unregistered = append(unregistered, "admissionregistration_v1beta1.WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler")
	}
	if o.ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionListHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1.WatchApiextensionsV1CustomResourceDefinitionListHandler")
	}
	if o.ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionHandler")
	}
	if o.ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionListHandler == nil {
		unregistered = append(unregistered, "apiextensions_v1beta1.WatchApiextensionsV1beta1CustomResourceDefinitionListHandler")
	}
	if o.ApiregistrationV1WatchApiregistrationV1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.WatchApiregistrationV1APIServiceHandler")
	}
	if o.ApiregistrationV1WatchApiregistrationV1APIServiceListHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1.WatchApiregistrationV1APIServiceListHandler")
	}
	if o.ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceHandler")
	}
	if o.ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceListHandler == nil {
		unregistered = append(unregistered, "apiregistration_v1beta1.WatchApiregistrationV1beta1APIServiceListHandler")
	}
	if o.AppsV1WatchAppsV1ControllerRevisionListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1ControllerRevisionListForAllNamespacesHandler")
	}
	if o.AppsV1WatchAppsV1DaemonSetListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1DaemonSetListForAllNamespacesHandler")
	}
	if o.AppsV1WatchAppsV1DeploymentListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1DeploymentListForAllNamespacesHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedControllerRevisionHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedControllerRevisionHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedControllerRevisionListHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedControllerRevisionListHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedDaemonSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedDaemonSetHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedDaemonSetListHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedDaemonSetListHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedDeploymentHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedDeploymentHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedDeploymentListHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedDeploymentListHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedReplicaSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedReplicaSetHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedReplicaSetListHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedReplicaSetListHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedStatefulSetHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedStatefulSetHandler")
	}
	if o.AppsV1WatchAppsV1NamespacedStatefulSetListHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1NamespacedStatefulSetListHandler")
	}
	if o.AppsV1WatchAppsV1ReplicaSetListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1ReplicaSetListForAllNamespacesHandler")
	}
	if o.AppsV1WatchAppsV1StatefulSetListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "apps_v1.WatchAppsV1StatefulSetListForAllNamespacesHandler")
	}
	if o.AutoscalingV1WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler")
	}
	if o.AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler == nil {
		unregistered = append(unregistered, "autoscaling_v1.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler")
	}
	if o.AutoscalingV2beta1WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler")
	}
	if o.AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta1.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler")
	}
	if o.AutoscalingV2beta2WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler")
	}
	if o.AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler")
	}
	if o.AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler == nil {
		unregistered = append(unregistered, "autoscaling_v2beta2.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler")
	}
	if o.BatchV1WatchBatchV1JobListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v1.WatchBatchV1JobListForAllNamespacesHandler")
	}
	if o.BatchV1WatchBatchV1NamespacedJobHandler == nil {
		unregistered = append(unregistered, "batch_v1.WatchBatchV1NamespacedJobHandler")
	}
	if o.BatchV1WatchBatchV1NamespacedJobListHandler == nil {
		unregistered = append(unregistered, "batch_v1.WatchBatchV1NamespacedJobListHandler")
	}
	if o.BatchV1beta1WatchBatchV1beta1CronJobListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.WatchBatchV1beta1CronJobListForAllNamespacesHandler")
	}
	if o.BatchV1beta1WatchBatchV1beta1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.WatchBatchV1beta1NamespacedCronJobHandler")
	}
	if o.BatchV1beta1WatchBatchV1beta1NamespacedCronJobListHandler == nil {
		unregistered = append(unregistered, "batch_v1beta1.WatchBatchV1beta1NamespacedCronJobListHandler")
	}
	if o.BatchV2alpha1WatchBatchV2alpha1CronJobListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.WatchBatchV2alpha1CronJobListForAllNamespacesHandler")
	}
	if o.BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobHandler")
	}
	if o.BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobListHandler == nil {
		unregistered = append(unregistered, "batch_v2alpha1.WatchBatchV2alpha1NamespacedCronJobListHandler")
	}
	if o.CertificatesV1WatchCertificatesV1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1.WatchCertificatesV1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1WatchCertificatesV1CertificateSigningRequestListHandler == nil {
		unregistered = append(unregistered, "certificates_v1.WatchCertificatesV1CertificateSigningRequestListHandler")
	}
	if o.CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestHandler")
	}
	if o.CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestListHandler == nil {
		unregistered = append(unregistered, "certificates_v1beta1.WatchCertificatesV1beta1CertificateSigningRequestListHandler")
	}
	if o.CoordinationV1WatchCoordinationV1LeaseListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "coordination_v1.WatchCoordinationV1LeaseListForAllNamespacesHandler")
	}
	if o.CoordinationV1WatchCoordinationV1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1.WatchCoordinationV1NamespacedLeaseHandler")
	}
	if o.CoordinationV1WatchCoordinationV1NamespacedLeaseListHandler == nil {
		unregistered = append(unregistered, "coordination_v1.WatchCoordinationV1NamespacedLeaseListHandler")
	}
	if o.CoordinationV1beta1WatchCoordinationV1beta1LeaseListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.WatchCoordinationV1beta1LeaseListForAllNamespacesHandler")
	}
	if o.CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseHandler")
	}
	if o.CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseListHandler == nil {
		unregistered = append(unregistered, "coordination_v1beta1.WatchCoordinationV1beta1NamespacedLeaseListHandler")
	}
	if o.CoreV1WatchCoreV1ConfigMapListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1ConfigMapListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1EndpointsListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1EndpointsListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1EventListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1EventListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1LimitRangeListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1LimitRangeListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1NamespaceHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespaceHandler")
	}
	if o.CoreV1WatchCoreV1NamespaceListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespaceListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedConfigMapHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedConfigMapHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedConfigMapListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedConfigMapListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedEndpointsHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedEndpointsHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedEndpointsListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedEndpointsListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedEventHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedEventListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedEventListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedLimitRangeHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedLimitRangeHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedLimitRangeListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedLimitRangeListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPersistentVolumeClaimHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPersistentVolumeClaimHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPersistentVolumeClaimListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPersistentVolumeClaimListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPodHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPodHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPodListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPodListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPodTemplateHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPodTemplateHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedPodTemplateListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedPodTemplateListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedReplicationControllerHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedReplicationControllerHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedReplicationControllerListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedReplicationControllerListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedResourceQuotaHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedResourceQuotaHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedResourceQuotaListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedResourceQuotaListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedSecretHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedSecretHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedSecretListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedSecretListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedServiceHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedServiceHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedServiceAccountHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedServiceAccountHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedServiceAccountListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedServiceAccountListHandler")
	}
	if o.CoreV1WatchCoreV1NamespacedServiceListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NamespacedServiceListHandler")
	}
	if o.CoreV1WatchCoreV1NodeHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NodeHandler")
	}
	if o.CoreV1WatchCoreV1NodeListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1NodeListHandler")
	}
	if o.CoreV1WatchCoreV1PersistentVolumeHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1PersistentVolumeHandler")
	}
	if o.CoreV1WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1PersistentVolumeListHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1PersistentVolumeListHandler")
	}
	if o.CoreV1WatchCoreV1PodListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1PodListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1PodTemplateListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1PodTemplateListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1ReplicationControllerListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1ReplicationControllerListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1ResourceQuotaListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1ResourceQuotaListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1SecretListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1SecretListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1ServiceAccountListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1ServiceAccountListForAllNamespacesHandler")
	}
	if o.CoreV1WatchCoreV1ServiceListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "core_v1.WatchCoreV1ServiceListForAllNamespacesHandler")
	}
	if o.DiscoveryV1beta1WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler")
	}
	if o.DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceHandler")
	}
	if o.DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler == nil {
		unregistered = append(unregistered, "discovery_v1beta1.WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler")
	}
	if o.EventsV1WatchEventsV1EventListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "events_v1.WatchEventsV1EventListForAllNamespacesHandler")
	}
	if o.EventsV1WatchEventsV1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1.WatchEventsV1NamespacedEventHandler")
	}
	if o.EventsV1WatchEventsV1NamespacedEventListHandler == nil {
		unregistered = append(unregistered, "events_v1.WatchEventsV1NamespacedEventListHandler")
	}
	if o.EventsV1beta1WatchEventsV1beta1EventListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.WatchEventsV1beta1EventListForAllNamespacesHandler")
	}
	if o.EventsV1beta1WatchEventsV1beta1NamespacedEventHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.WatchEventsV1beta1NamespacedEventHandler")
	}
	if o.EventsV1beta1WatchEventsV1beta1NamespacedEventListHandler == nil {
		unregistered = append(unregistered, "events_v1beta1.WatchEventsV1beta1NamespacedEventListHandler")
	}
	if o.ExtensionsV1beta1WatchExtensionsV1beta1IngressListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.WatchExtensionsV1beta1IngressListForAllNamespacesHandler")
	}
	if o.ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressHandler")
	}
	if o.ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressListHandler == nil {
		unregistered = append(unregistered, "extensions_v1beta1.WatchExtensionsV1beta1NamespacedIngressListHandler")
	}
	if o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler")
	}
	if o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler")
	}
	if o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler")
	}
	if o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler == nil {
		unregistered = append(unregistered, "flowcontrol_apiserver_v1alpha1.WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler")
	}
	if o.NetworkingV1WatchNetworkingV1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1IngressClassHandler")
	}
	if o.NetworkingV1WatchNetworkingV1IngressClassListHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1IngressClassListHandler")
	}
	if o.NetworkingV1WatchNetworkingV1IngressListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1IngressListForAllNamespacesHandler")
	}
	if o.NetworkingV1WatchNetworkingV1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1NamespacedIngressHandler")
	}
	if o.NetworkingV1WatchNetworkingV1NamespacedIngressListHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1NamespacedIngressListHandler")
	}
	if o.NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1NamespacedNetworkPolicyHandler")
	}
	if o.NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyListHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1NamespacedNetworkPolicyListHandler")
	}
	if o.NetworkingV1WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1.WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler")
	}
	if o.NetworkingV1beta1WatchNetworkingV1beta1IngressClassHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.WatchNetworkingV1beta1IngressClassHandler")
	}
	if o.NetworkingV1beta1WatchNetworkingV1beta1IngressClassListHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.WatchNetworkingV1beta1IngressClassListHandler")
	}
	if o.NetworkingV1beta1WatchNetworkingV1beta1IngressListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.WatchNetworkingV1beta1IngressListForAllNamespacesHandler")
	}
	if o.NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressHandler")
	}
	if o.NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressListHandler == nil {
		unregistered = append(unregistered, "networking_v1beta1.WatchNetworkingV1beta1NamespacedIngressListHandler")
	}
	if o.NodeV1alpha1WatchNodeV1alpha1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.WatchNodeV1alpha1RuntimeClassHandler")
	}
	if o.NodeV1alpha1WatchNodeV1alpha1RuntimeClassListHandler == nil {
		unregistered = append(unregistered, "node_v1alpha1.WatchNodeV1alpha1RuntimeClassListHandler")
	}
	if o.NodeV1beta1WatchNodeV1beta1RuntimeClassHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.WatchNodeV1beta1RuntimeClassHandler")
	}
	if o.NodeV1beta1WatchNodeV1beta1RuntimeClassListHandler == nil {
		unregistered = append(unregistered, "node_v1beta1.WatchNodeV1beta1RuntimeClassListHandler")
	}
	if o.PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler")
	}
	if o.PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler")
	}
	if o.PolicyV1beta1WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler")
	}
	if o.PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyHandler")
	}
	if o.PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyListHandler == nil {
		unregistered = append(unregistered, "policy_v1beta1.WatchPolicyV1beta1PodSecurityPolicyListHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1ClusterRoleListHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1NamespacedRoleListHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1WatchRbacAuthorizationV1RoleListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1.WatchRbacAuthorizationV1RoleListForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1ClusterRoleListHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1alpha1.WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1ClusterRoleListHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleListHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1NamespacedRoleListHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler")
	}
	if o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "rbac_authorization_v1beta1.WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler")
	}
	if o.SchedulingV1WatchSchedulingV1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.WatchSchedulingV1PriorityClassHandler")
	}
	if o.SchedulingV1WatchSchedulingV1PriorityClassListHandler == nil {
		unregistered = append(unregistered, "scheduling_v1.WatchSchedulingV1PriorityClassListHandler")
	}
	if o.SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassHandler")
	}
	if o.SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassListHandler == nil {
		unregistered = append(unregistered, "scheduling_v1alpha1.WatchSchedulingV1alpha1PriorityClassListHandler")
	}
	if o.SchedulingV1beta1WatchSchedulingV1beta1PriorityClassHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassHandler")
	}
	if o.SchedulingV1beta1WatchSchedulingV1beta1PriorityClassListHandler == nil {
		unregistered = append(unregistered, "scheduling_v1beta1.WatchSchedulingV1beta1PriorityClassListHandler")
	}
	if o.SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetHandler")
	}
	if o.SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetListHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.WatchSettingsV1alpha1NamespacedPodPresetListHandler")
	}
	if o.SettingsV1alpha1WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler == nil {
		unregistered = append(unregistered, "settings_v1alpha1.WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler")
	}
	if o.StorageV1WatchStorageV1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1CSIDriverHandler")
	}
	if o.StorageV1WatchStorageV1CSIDriverListHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1CSIDriverListHandler")
	}
	if o.StorageV1WatchStorageV1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1CSINodeHandler")
	}
	if o.StorageV1WatchStorageV1CSINodeListHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1CSINodeListHandler")
	}
	if o.StorageV1WatchStorageV1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1StorageClassHandler")
	}
	if o.StorageV1WatchStorageV1StorageClassListHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1StorageClassListHandler")
	}
	if o.StorageV1WatchStorageV1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1VolumeAttachmentHandler")
	}
	if o.StorageV1WatchStorageV1VolumeAttachmentListHandler == nil {
		unregistered = append(unregistered, "storage_v1.WatchStorageV1VolumeAttachmentListHandler")
	}
	if o.StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentHandler")
	}
	if o.StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentListHandler == nil {
		unregistered = append(unregistered, "storage_v1alpha1.WatchStorageV1alpha1VolumeAttachmentListHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1CSIDriverHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1CSIDriverHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1CSIDriverListHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1CSIDriverListHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1CSINodeHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1CSINodeHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1CSINodeListHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1CSINodeListHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1StorageClassHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1StorageClassHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1StorageClassListHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1StorageClassListHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1VolumeAttachmentHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1VolumeAttachmentHandler")
	}
	if o.StorageV1beta1WatchStorageV1beta1VolumeAttachmentListHandler == nil {
		unregistered = append(unregistered, "storage_v1beta1.WatchStorageV1beta1VolumeAttachmentListHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KubernetesAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KubernetesAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *KubernetesAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *KubernetesAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "*/*":
			result["*/*"] = o.EmptyConsumer
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/json-patch+json":
			result["application/json-patch+json"] = o.JSONConsumer
		case "application/merge-patch+json":
			result["application/merge-patch+json"] = o.JSONConsumer
		case "application/strategic-merge-patch+json":
			result["application/strategic-merge-patch+json"] = o.JSONConsumer
		case "application/vnd.kubernetes.protobuf":
			result["application/vnd.kubernetes.protobuf"] = o.ProtobufConsumer
		case "application/apply-patch+yaml":
			result["application/apply-patch+yaml"] = o.YamlConsumer
		case "application/yaml":
			result["application/yaml"] = o.YamlConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *KubernetesAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "*/*":
			result["*/*"] = o.EmptyProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		case "application/vnd.kubernetes.protobuf":
			result["application/vnd.kubernetes.protobuf"] = o.ProtobufProducer
		case "text/plain":
			result["text/plain"] = o.TxtProducer
		case "application/yaml":
			result["application/yaml"] = o.YamlProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KubernetesAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kubernetes API
func (o *KubernetesAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KubernetesAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/cilium.io/v2/namespaces/{namespace}/ciliumendpoints/{name}"] = cilium.NewDeleteApisCiliumIoV2CiliumEndpoint(o.context, o.CiliumDeleteApisCiliumIoV2CiliumEndpointHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumclusterwidelocalredirectpolicy"] = cilium.NewListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicy(o.context, o.CiliumListApisCiliumIoV2CiliumClusterwideLocalRedirectPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumclusterwidenetworkpolicies"] = cilium.NewListApisCiliumIoV2CiliumClusterwideNetworkPolicy(o.context, o.CiliumListApisCiliumIoV2CiliumClusterwideNetworkPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumendpoints"] = cilium.NewListApisCiliumIoV2CiliumEndpoint(o.context, o.CiliumListApisCiliumIoV2CiliumEndpointHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumidentities"] = cilium.NewListApisCiliumIoV2CiliumIdentity(o.context, o.CiliumListApisCiliumIoV2CiliumIdentityHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumlocalredirectpolicy"] = cilium.NewListApisCiliumIoV2CiliumLocalRedirectPolicy(o.context, o.CiliumListApisCiliumIoV2CiliumLocalRedirectPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumnetworkpolicies"] = cilium.NewListApisCiliumIoV2CiliumNetworkPolicy(o.context, o.CiliumListApisCiliumIoV2CiliumNetworkPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumnodes"] = cilium.NewListApisCiliumIoV2CiliumNodes(o.context, o.CiliumListApisCiliumIoV2CiliumNodesHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/cilium.io/v2/namespaces/{namespace}/ciliumendpoints/{name}/status"] = cilium.NewPatchApisCiliumIoV2CiliumEndpointStatus(o.context, o.CiliumPatchApisCiliumIoV2CiliumEndpointStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/cilium.io/v2/ciliumidentities/{name}/status"] = cilium.NewPatchApisCiliumIoV2CiliumIdentityStatus(o.context, o.CiliumPatchApisCiliumIoV2CiliumIdentityStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/cilium.io/v2/namespaces/{namespace}/ciliumendpoints"] = cilium.NewPostApisCiliumIoV2CiliumEndpoint(o.context, o.CiliumPostApisCiliumIoV2CiliumEndpointHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/cilium.io/v2/ciliumnodes"] = cilium.NewPostApisCiliumIoV2CiliumNodes(o.context, o.CiliumPostApisCiliumIoV2CiliumNodesHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/cilium.io/v2/ciliumnodes/{name}"] = cilium.NewPutApisCiliumIoV2CiliumNodes(o.context, o.CiliumPutApisCiliumIoV2CiliumNodesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/cilium.io/v2/ciliumnodes/{name}"] = cilium.NewReadApisCiliumIoV2CiliumNode(o.context, o.CiliumReadApisCiliumIoV2CiliumNodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1DeleteNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1DeleteNamespacedPodProxyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1DeleteNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1DeleteNamespacedPodProxyWithPathHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1DeleteNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1DeleteNamespacedServiceProxyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1DeleteNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1DeleteNamespacedServiceProxyWithPathHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1DeleteNodeProxy(o.context, o.CoreV1ConnectCoreV1DeleteNodeProxyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1DeleteNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1DeleteNodeProxyWithPathHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/attach"] = core_v1.NewConnectCoreV1GetNamespacedPodAttach(o.context, o.CoreV1ConnectCoreV1GetNamespacedPodAttachHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/exec"] = core_v1.NewConnectCoreV1GetNamespacedPodExec(o.context, o.CoreV1ConnectCoreV1GetNamespacedPodExecHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/portforward"] = core_v1.NewConnectCoreV1GetNamespacedPodPortforward(o.context, o.CoreV1ConnectCoreV1GetNamespacedPodPortforwardHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1GetNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1GetNamespacedPodProxyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1GetNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1GetNamespacedPodProxyWithPathHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1GetNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1GetNamespacedServiceProxyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1GetNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1GetNamespacedServiceProxyWithPathHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1GetNodeProxy(o.context, o.CoreV1ConnectCoreV1GetNodeProxyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1GetNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1GetNodeProxyWithPathHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1HeadNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1HeadNamespacedPodProxyHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1HeadNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1HeadNamespacedPodProxyWithPathHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1HeadNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1HeadNamespacedServiceProxyHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1HeadNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1HeadNamespacedServiceProxyWithPathHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1HeadNodeProxy(o.context, o.CoreV1ConnectCoreV1HeadNodeProxyHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1HeadNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1HeadNodeProxyWithPathHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1OptionsNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1OptionsNamespacedPodProxyHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1OptionsNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1OptionsNamespacedPodProxyWithPathHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1OptionsNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1OptionsNamespacedServiceProxyHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1OptionsNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1OptionsNamespacedServiceProxyWithPathHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1OptionsNodeProxy(o.context, o.CoreV1ConnectCoreV1OptionsNodeProxyHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1OptionsNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1OptionsNodeProxyWithPathHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1PatchNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1PatchNamespacedPodProxyHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PatchNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1PatchNamespacedPodProxyWithPathHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1PatchNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1PatchNamespacedServiceProxyHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PatchNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1PatchNamespacedServiceProxyWithPathHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1PatchNodeProxy(o.context, o.CoreV1ConnectCoreV1PatchNodeProxyHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PatchNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1PatchNodeProxyWithPathHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/attach"] = core_v1.NewConnectCoreV1PostNamespacedPodAttach(o.context, o.CoreV1ConnectCoreV1PostNamespacedPodAttachHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/exec"] = core_v1.NewConnectCoreV1PostNamespacedPodExec(o.context, o.CoreV1ConnectCoreV1PostNamespacedPodExecHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/portforward"] = core_v1.NewConnectCoreV1PostNamespacedPodPortforward(o.context, o.CoreV1ConnectCoreV1PostNamespacedPodPortforwardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1PostNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1PostNamespacedPodProxyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PostNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1PostNamespacedPodProxyWithPathHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1PostNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1PostNamespacedServiceProxyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PostNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1PostNamespacedServiceProxyWithPathHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1PostNodeProxy(o.context, o.CoreV1ConnectCoreV1PostNodeProxyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PostNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1PostNodeProxyWithPathHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy"] = core_v1.NewConnectCoreV1PutNamespacedPodProxy(o.context, o.CoreV1ConnectCoreV1PutNamespacedPodProxyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PutNamespacedPodProxyWithPath(o.context, o.CoreV1ConnectCoreV1PutNamespacedPodProxyWithPathHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/services/{name}/proxy"] = core_v1.NewConnectCoreV1PutNamespacedServiceProxy(o.context, o.CoreV1ConnectCoreV1PutNamespacedServiceProxyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PutNamespacedServiceProxyWithPath(o.context, o.CoreV1ConnectCoreV1PutNamespacedServiceProxyWithPathHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/nodes/{name}/proxy"] = core_v1.NewConnectCoreV1PutNodeProxy(o.context, o.CoreV1ConnectCoreV1PutNodeProxyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/nodes/{name}/proxy/{path}"] = core_v1.NewConnectCoreV1PutNodeProxyWithPath(o.context, o.CoreV1ConnectCoreV1PutNodeProxyWithPathHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations"] = admissionregistration_v1.NewCreateAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1CreateAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations"] = admissionregistration_v1.NewCreateAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1CreateAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations"] = admissionregistration_v1beta1.NewCreateAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations"] = admissionregistration_v1beta1.NewCreateAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1CreateAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions"] = apiextensions_v1.NewCreateApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1CreateApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions"] = apiextensions_v1beta1.NewCreateApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1CreateApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apiregistration.k8s.io/v1/apiservices"] = apiregistration_v1.NewCreateApiregistrationV1APIService(o.context, o.ApiregistrationV1CreateApiregistrationV1APIServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apiregistration.k8s.io/v1beta1/apiservices"] = apiregistration_v1beta1.NewCreateApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1CreateApiregistrationV1beta1APIServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions"] = apps_v1.NewCreateAppsV1NamespacedControllerRevision(o.context, o.AppsV1CreateAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apps/v1/namespaces/{namespace}/daemonsets"] = apps_v1.NewCreateAppsV1NamespacedDaemonSet(o.context, o.AppsV1CreateAppsV1NamespacedDaemonSetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apps/v1/namespaces/{namespace}/deployments"] = apps_v1.NewCreateAppsV1NamespacedDeployment(o.context, o.AppsV1CreateAppsV1NamespacedDeploymentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apps/v1/namespaces/{namespace}/replicasets"] = apps_v1.NewCreateAppsV1NamespacedReplicaSet(o.context, o.AppsV1CreateAppsV1NamespacedReplicaSetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/apps/v1/namespaces/{namespace}/statefulsets"] = apps_v1.NewCreateAppsV1NamespacedStatefulSet(o.context, o.AppsV1CreateAppsV1NamespacedStatefulSetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authentication.k8s.io/v1/tokenreviews"] = authentication_v1.NewCreateAuthenticationV1TokenReview(o.context, o.AuthenticationV1CreateAuthenticationV1TokenReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authentication.k8s.io/v1beta1/tokenreviews"] = authentication_v1beta1.NewCreateAuthenticationV1beta1TokenReview(o.context, o.AuthenticationV1beta1CreateAuthenticationV1beta1TokenReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews"] = authorization_v1.NewCreateAuthorizationV1NamespacedLocalSubjectAccessReview(o.context, o.AuthorizationV1CreateAuthorizationV1NamespacedLocalSubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1/selfsubjectaccessreviews"] = authorization_v1.NewCreateAuthorizationV1SelfSubjectAccessReview(o.context, o.AuthorizationV1CreateAuthorizationV1SelfSubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1/selfsubjectrulesreviews"] = authorization_v1.NewCreateAuthorizationV1SelfSubjectRulesReview(o.context, o.AuthorizationV1CreateAuthorizationV1SelfSubjectRulesReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1/subjectaccessreviews"] = authorization_v1.NewCreateAuthorizationV1SubjectAccessReview(o.context, o.AuthorizationV1CreateAuthorizationV1SubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews"] = authorization_v1beta1.NewCreateAuthorizationV1beta1NamespacedLocalSubjectAccessReview(o.context, o.AuthorizationV1beta1CreateAuthorizationV1beta1NamespacedLocalSubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews"] = authorization_v1beta1.NewCreateAuthorizationV1beta1SelfSubjectAccessReview(o.context, o.AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews"] = authorization_v1beta1.NewCreateAuthorizationV1beta1SelfSubjectRulesReview(o.context, o.AuthorizationV1beta1CreateAuthorizationV1beta1SelfSubjectRulesReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/authorization.k8s.io/v1beta1/subjectaccessreviews"] = authorization_v1beta1.NewCreateAuthorizationV1beta1SubjectAccessReview(o.context, o.AuthorizationV1beta1CreateAuthorizationV1beta1SubjectAccessReviewHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v1.NewCreateAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1CreateAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta1.NewCreateAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1CreateAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta2.NewCreateAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2CreateAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/batch/v1/namespaces/{namespace}/jobs"] = batch_v1.NewCreateBatchV1NamespacedJob(o.context, o.BatchV1CreateBatchV1NamespacedJobHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"] = batch_v1beta1.NewCreateBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1CreateBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs"] = batch_v2alpha1.NewCreateBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1CreateBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/certificates.k8s.io/v1/certificatesigningrequests"] = certificates_v1.NewCreateCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1CreateCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"] = certificates_v1beta1.NewCreateCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1CreateCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases"] = coordination_v1.NewCreateCoordinationV1NamespacedLease(o.context, o.CoordinationV1CreateCoordinationV1NamespacedLeaseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases"] = coordination_v1beta1.NewCreateCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1CreateCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces"] = core_v1.NewCreateCoreV1Namespace(o.context, o.CoreV1CreateCoreV1NamespaceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/bindings"] = core_v1.NewCreateCoreV1NamespacedBinding(o.context, o.CoreV1CreateCoreV1NamespacedBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/configmaps"] = core_v1.NewCreateCoreV1NamespacedConfigMap(o.context, o.CoreV1CreateCoreV1NamespacedConfigMapHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/endpoints"] = core_v1.NewCreateCoreV1NamespacedEndpoints(o.context, o.CoreV1CreateCoreV1NamespacedEndpointsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/events"] = core_v1.NewCreateCoreV1NamespacedEvent(o.context, o.CoreV1CreateCoreV1NamespacedEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/limitranges"] = core_v1.NewCreateCoreV1NamespacedLimitRange(o.context, o.CoreV1CreateCoreV1NamespacedLimitRangeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims"] = core_v1.NewCreateCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1CreateCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods"] = core_v1.NewCreateCoreV1NamespacedPod(o.context, o.CoreV1CreateCoreV1NamespacedPodHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/binding"] = core_v1.NewCreateCoreV1NamespacedPodBinding(o.context, o.CoreV1CreateCoreV1NamespacedPodBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/pods/{name}/eviction"] = core_v1.NewCreateCoreV1NamespacedPodEviction(o.context, o.CoreV1CreateCoreV1NamespacedPodEvictionHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/podtemplates"] = core_v1.NewCreateCoreV1NamespacedPodTemplate(o.context, o.CoreV1CreateCoreV1NamespacedPodTemplateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/replicationcontrollers"] = core_v1.NewCreateCoreV1NamespacedReplicationController(o.context, o.CoreV1CreateCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/resourcequotas"] = core_v1.NewCreateCoreV1NamespacedResourceQuota(o.context, o.CoreV1CreateCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/secrets"] = core_v1.NewCreateCoreV1NamespacedSecret(o.context, o.CoreV1CreateCoreV1NamespacedSecretHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/services"] = core_v1.NewCreateCoreV1NamespacedService(o.context, o.CoreV1CreateCoreV1NamespacedServiceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/serviceaccounts"] = core_v1.NewCreateCoreV1NamespacedServiceAccount(o.context, o.CoreV1CreateCoreV1NamespacedServiceAccountHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token"] = core_v1.NewCreateCoreV1NamespacedServiceAccountToken(o.context, o.CoreV1CreateCoreV1NamespacedServiceAccountTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/nodes"] = core_v1.NewCreateCoreV1Node(o.context, o.CoreV1CreateCoreV1NodeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/persistentvolumes"] = core_v1.NewCreateCoreV1PersistentVolume(o.context, o.CoreV1CreateCoreV1PersistentVolumeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices"] = discovery_v1beta1.NewCreateDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1CreateDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events"] = events_v1.NewCreateEventsV1NamespacedEvent(o.context, o.EventsV1CreateEventsV1NamespacedEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events"] = events_v1beta1.NewCreateEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1CreateEventsV1beta1NamespacedEventHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses"] = extensions_v1beta1.NewCreateExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1CreateExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas"] = flowcontrol_apiserver_v1alpha1.NewCreateFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations"] = flowcontrol_apiserver_v1alpha1.NewCreateFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1CreateFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/networking.k8s.io/v1/ingressclasses"] = networking_v1.NewCreateNetworkingV1IngressClass(o.context, o.NetworkingV1CreateNetworkingV1IngressClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses"] = networking_v1.NewCreateNetworkingV1NamespacedIngress(o.context, o.NetworkingV1CreateNetworkingV1NamespacedIngressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies"] = networking_v1.NewCreateNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1CreateNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/networking.k8s.io/v1beta1/ingressclasses"] = networking_v1beta1.NewCreateNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1CreateNetworkingV1beta1IngressClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses"] = networking_v1beta1.NewCreateNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1CreateNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/node.k8s.io/v1alpha1/runtimeclasses"] = node_v1alpha1.NewCreateNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1CreateNodeV1alpha1RuntimeClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/node.k8s.io/v1beta1/runtimeclasses"] = node_v1beta1.NewCreateNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1CreateNodeV1beta1RuntimeClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets"] = policy_v1beta1.NewCreatePolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1CreatePolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/policy/v1beta1/podsecuritypolicies"] = policy_v1beta1.NewCreatePolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1CreatePolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1/clusterroles"] = rbac_authorization_v1.NewCreateRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"] = rbac_authorization_v1.NewCreateRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1CreateRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"] = rbac_authorization_v1.NewCreateRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1.NewCreateRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1CreateRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles"] = rbac_authorization_v1alpha1.NewCreateRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings"] = rbac_authorization_v1alpha1.NewCreateRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles"] = rbac_authorization_v1alpha1.NewCreateRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1alpha1.NewCreateRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1CreateRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles"] = rbac_authorization_v1beta1.NewCreateRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings"] = rbac_authorization_v1beta1.NewCreateRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles"] = rbac_authorization_v1beta1.NewCreateRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1beta1.NewCreateRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1CreateRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/scheduling.k8s.io/v1/priorityclasses"] = scheduling_v1.NewCreateSchedulingV1PriorityClass(o.context, o.SchedulingV1CreateSchedulingV1PriorityClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses"] = scheduling_v1alpha1.NewCreateSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1CreateSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses"] = scheduling_v1beta1.NewCreateSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1CreateSchedulingV1beta1PriorityClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets"] = settings_v1alpha1.NewCreateSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1CreateSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1/csidrivers"] = storage_v1.NewCreateStorageV1CSIDriver(o.context, o.StorageV1CreateStorageV1CSIDriverHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1/csinodes"] = storage_v1.NewCreateStorageV1CSINode(o.context, o.StorageV1CreateStorageV1CSINodeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1/storageclasses"] = storage_v1.NewCreateStorageV1StorageClass(o.context, o.StorageV1CreateStorageV1StorageClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1/volumeattachments"] = storage_v1.NewCreateStorageV1VolumeAttachment(o.context, o.StorageV1CreateStorageV1VolumeAttachmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1alpha1/volumeattachments"] = storage_v1alpha1.NewCreateStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1CreateStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1beta1/csidrivers"] = storage_v1beta1.NewCreateStorageV1beta1CSIDriver(o.context, o.StorageV1beta1CreateStorageV1beta1CSIDriverHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1beta1/csinodes"] = storage_v1beta1.NewCreateStorageV1beta1CSINode(o.context, o.StorageV1beta1CreateStorageV1beta1CSINodeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1beta1/storageclasses"] = storage_v1beta1.NewCreateStorageV1beta1StorageClass(o.context, o.StorageV1beta1CreateStorageV1beta1StorageClassHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/apis/storage.k8s.io/v1beta1/volumeattachments"] = storage_v1beta1.NewCreateStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1CreateStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations"] = admissionregistration_v1.NewDeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionMutatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations"] = admissionregistration_v1.NewDeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1DeleteAdmissionregistrationV1CollectionValidatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewDeleteAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1DeleteAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewDeleteAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1DeleteAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations"] = admissionregistration_v1beta1.NewDeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations"] = admissionregistration_v1beta1.NewDeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewDeleteAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewDeleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1DeleteAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions"] = apiextensions_v1.NewDeleteApiextensionsV1CollectionCustomResourceDefinition(o.context, o.ApiextensionsV1DeleteApiextensionsV1CollectionCustomResourceDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"] = apiextensions_v1.NewDeleteApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1DeleteApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions"] = apiextensions_v1beta1.NewDeleteApiextensionsV1beta1CollectionCustomResourceDefinition(o.context, o.ApiextensionsV1beta1DeleteApiextensionsV1beta1CollectionCustomResourceDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}"] = apiextensions_v1beta1.NewDeleteApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1DeleteApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}"] = apiregistration_v1.NewDeleteApiregistrationV1APIService(o.context, o.ApiregistrationV1DeleteApiregistrationV1APIServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiregistration.k8s.io/v1/apiservices"] = apiregistration_v1.NewDeleteApiregistrationV1CollectionAPIService(o.context, o.ApiregistrationV1DeleteApiregistrationV1CollectionAPIServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}"] = apiregistration_v1beta1.NewDeleteApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1DeleteApiregistrationV1beta1APIServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apiregistration.k8s.io/v1beta1/apiservices"] = apiregistration_v1beta1.NewDeleteApiregistrationV1beta1CollectionAPIService(o.context, o.ApiregistrationV1beta1DeleteApiregistrationV1beta1CollectionAPIServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions"] = apps_v1.NewDeleteAppsV1CollectionNamespacedControllerRevision(o.context, o.AppsV1DeleteAppsV1CollectionNamespacedControllerRevisionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/daemonsets"] = apps_v1.NewDeleteAppsV1CollectionNamespacedDaemonSet(o.context, o.AppsV1DeleteAppsV1CollectionNamespacedDaemonSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/deployments"] = apps_v1.NewDeleteAppsV1CollectionNamespacedDeployment(o.context, o.AppsV1DeleteAppsV1CollectionNamespacedDeploymentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/replicasets"] = apps_v1.NewDeleteAppsV1CollectionNamespacedReplicaSet(o.context, o.AppsV1DeleteAppsV1CollectionNamespacedReplicaSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/statefulsets"] = apps_v1.NewDeleteAppsV1CollectionNamespacedStatefulSet(o.context, o.AppsV1DeleteAppsV1CollectionNamespacedStatefulSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"] = apps_v1.NewDeleteAppsV1NamespacedControllerRevision(o.context, o.AppsV1DeleteAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"] = apps_v1.NewDeleteAppsV1NamespacedDaemonSet(o.context, o.AppsV1DeleteAppsV1NamespacedDaemonSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}"] = apps_v1.NewDeleteAppsV1NamespacedDeployment(o.context, o.AppsV1DeleteAppsV1NamespacedDeploymentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"] = apps_v1.NewDeleteAppsV1NamespacedReplicaSet(o.context, o.AppsV1DeleteAppsV1NamespacedReplicaSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"] = apps_v1.NewDeleteAppsV1NamespacedStatefulSet(o.context, o.AppsV1DeleteAppsV1NamespacedStatefulSetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v1.NewDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1DeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v1.NewDeleteAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1DeleteAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta1.NewDeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1DeleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta1.NewDeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1DeleteAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta2.NewDeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2DeleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta2.NewDeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2DeleteAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v1/namespaces/{namespace}/jobs"] = batch_v1.NewDeleteBatchV1CollectionNamespacedJob(o.context, o.BatchV1DeleteBatchV1CollectionNamespacedJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}"] = batch_v1.NewDeleteBatchV1NamespacedJob(o.context, o.BatchV1DeleteBatchV1NamespacedJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"] = batch_v1beta1.NewDeleteBatchV1beta1CollectionNamespacedCronJob(o.context, o.BatchV1beta1DeleteBatchV1beta1CollectionNamespacedCronJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"] = batch_v1beta1.NewDeleteBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1DeleteBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs"] = batch_v2alpha1.NewDeleteBatchV2alpha1CollectionNamespacedCronJob(o.context, o.BatchV2alpha1DeleteBatchV2alpha1CollectionNamespacedCronJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}"] = batch_v2alpha1.NewDeleteBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1DeleteBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"] = certificates_v1.NewDeleteCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1DeleteCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/certificates.k8s.io/v1/certificatesigningrequests"] = certificates_v1.NewDeleteCertificatesV1CollectionCertificateSigningRequest(o.context, o.CertificatesV1DeleteCertificatesV1CollectionCertificateSigningRequestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}"] = certificates_v1beta1.NewDeleteCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1DeleteCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"] = certificates_v1beta1.NewDeleteCertificatesV1beta1CollectionCertificateSigningRequest(o.context, o.CertificatesV1beta1DeleteCertificatesV1beta1CollectionCertificateSigningRequestHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases"] = coordination_v1.NewDeleteCoordinationV1CollectionNamespacedLease(o.context, o.CoordinationV1DeleteCoordinationV1CollectionNamespacedLeaseHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"] = coordination_v1.NewDeleteCoordinationV1NamespacedLease(o.context, o.CoordinationV1DeleteCoordinationV1NamespacedLeaseHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases"] = coordination_v1beta1.NewDeleteCoordinationV1beta1CollectionNamespacedLease(o.context, o.CoordinationV1beta1DeleteCoordinationV1beta1CollectionNamespacedLeaseHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}"] = coordination_v1beta1.NewDeleteCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1DeleteCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/configmaps"] = core_v1.NewDeleteCoreV1CollectionNamespacedConfigMap(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedConfigMapHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/endpoints"] = core_v1.NewDeleteCoreV1CollectionNamespacedEndpoints(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedEndpointsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/events"] = core_v1.NewDeleteCoreV1CollectionNamespacedEvent(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/limitranges"] = core_v1.NewDeleteCoreV1CollectionNamespacedLimitRange(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedLimitRangeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims"] = core_v1.NewDeleteCoreV1CollectionNamespacedPersistentVolumeClaim(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedPersistentVolumeClaimHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/pods"] = core_v1.NewDeleteCoreV1CollectionNamespacedPod(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedPodHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/podtemplates"] = core_v1.NewDeleteCoreV1CollectionNamespacedPodTemplate(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedPodTemplateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/replicationcontrollers"] = core_v1.NewDeleteCoreV1CollectionNamespacedReplicationController(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedReplicationControllerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/resourcequotas"] = core_v1.NewDeleteCoreV1CollectionNamespacedResourceQuota(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedResourceQuotaHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/secrets"] = core_v1.NewDeleteCoreV1CollectionNamespacedSecret(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedSecretHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/serviceaccounts"] = core_v1.NewDeleteCoreV1CollectionNamespacedServiceAccount(o.context, o.CoreV1DeleteCoreV1CollectionNamespacedServiceAccountHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/nodes"] = core_v1.NewDeleteCoreV1CollectionNode(o.context, o.CoreV1DeleteCoreV1CollectionNodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/persistentvolumes"] = core_v1.NewDeleteCoreV1CollectionPersistentVolume(o.context, o.CoreV1DeleteCoreV1CollectionPersistentVolumeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{name}"] = core_v1.NewDeleteCoreV1Namespace(o.context, o.CoreV1DeleteCoreV1NamespaceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/configmaps/{name}"] = core_v1.NewDeleteCoreV1NamespacedConfigMap(o.context, o.CoreV1DeleteCoreV1NamespacedConfigMapHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/endpoints/{name}"] = core_v1.NewDeleteCoreV1NamespacedEndpoints(o.context, o.CoreV1DeleteCoreV1NamespacedEndpointsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/events/{name}"] = core_v1.NewDeleteCoreV1NamespacedEvent(o.context, o.CoreV1DeleteCoreV1NamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/limitranges/{name}"] = core_v1.NewDeleteCoreV1NamespacedLimitRange(o.context, o.CoreV1DeleteCoreV1NamespacedLimitRangeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"] = core_v1.NewDeleteCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1DeleteCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/pods/{name}"] = core_v1.NewDeleteCoreV1NamespacedPod(o.context, o.CoreV1DeleteCoreV1NamespacedPodHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/podtemplates/{name}"] = core_v1.NewDeleteCoreV1NamespacedPodTemplate(o.context, o.CoreV1DeleteCoreV1NamespacedPodTemplateHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"] = core_v1.NewDeleteCoreV1NamespacedReplicationController(o.context, o.CoreV1DeleteCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}"] = core_v1.NewDeleteCoreV1NamespacedResourceQuota(o.context, o.CoreV1DeleteCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/secrets/{name}"] = core_v1.NewDeleteCoreV1NamespacedSecret(o.context, o.CoreV1DeleteCoreV1NamespacedSecretHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/services/{name}"] = core_v1.NewDeleteCoreV1NamespacedService(o.context, o.CoreV1DeleteCoreV1NamespacedServiceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/namespaces/{namespace}/serviceaccounts/{name}"] = core_v1.NewDeleteCoreV1NamespacedServiceAccount(o.context, o.CoreV1DeleteCoreV1NamespacedServiceAccountHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/nodes/{name}"] = core_v1.NewDeleteCoreV1Node(o.context, o.CoreV1DeleteCoreV1NodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/persistentvolumes/{name}"] = core_v1.NewDeleteCoreV1PersistentVolume(o.context, o.CoreV1DeleteCoreV1PersistentVolumeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices"] = discovery_v1beta1.NewDeleteDiscoveryV1beta1CollectionNamespacedEndpointSlice(o.context, o.DiscoveryV1beta1DeleteDiscoveryV1beta1CollectionNamespacedEndpointSliceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"] = discovery_v1beta1.NewDeleteDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1DeleteDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events"] = events_v1.NewDeleteEventsV1CollectionNamespacedEvent(o.context, o.EventsV1DeleteEventsV1CollectionNamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"] = events_v1.NewDeleteEventsV1NamespacedEvent(o.context, o.EventsV1DeleteEventsV1NamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events"] = events_v1beta1.NewDeleteEventsV1beta1CollectionNamespacedEvent(o.context, o.EventsV1beta1DeleteEventsV1beta1CollectionNamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"] = events_v1beta1.NewDeleteEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1DeleteEventsV1beta1NamespacedEventHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses"] = extensions_v1beta1.NewDeleteExtensionsV1beta1CollectionNamespacedIngress(o.context, o.ExtensionsV1beta1DeleteExtensionsV1beta1CollectionNamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}"] = extensions_v1beta1.NewDeleteExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1DeleteExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas"] = flowcontrol_apiserver_v1alpha1.NewDeleteFlowcontrolApiserverV1alpha1CollectionFlowSchema(o.context, o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionFlowSchemaHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations"] = flowcontrol_apiserver_v1alpha1.NewDeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}"] = flowcontrol_apiserver_v1alpha1.NewDeleteFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}"] = flowcontrol_apiserver_v1alpha1.NewDeleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1DeleteFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/ingressclasses"] = networking_v1.NewDeleteNetworkingV1CollectionIngressClass(o.context, o.NetworkingV1DeleteNetworkingV1CollectionIngressClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses"] = networking_v1.NewDeleteNetworkingV1CollectionNamespacedIngress(o.context, o.NetworkingV1DeleteNetworkingV1CollectionNamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies"] = networking_v1.NewDeleteNetworkingV1CollectionNamespacedNetworkPolicy(o.context, o.NetworkingV1DeleteNetworkingV1CollectionNamespacedNetworkPolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/ingressclasses/{name}"] = networking_v1.NewDeleteNetworkingV1IngressClass(o.context, o.NetworkingV1DeleteNetworkingV1IngressClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"] = networking_v1.NewDeleteNetworkingV1NamespacedIngress(o.context, o.NetworkingV1DeleteNetworkingV1NamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"] = networking_v1.NewDeleteNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1DeleteNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1beta1/ingressclasses"] = networking_v1beta1.NewDeleteNetworkingV1beta1CollectionIngressClass(o.context, o.NetworkingV1beta1DeleteNetworkingV1beta1CollectionIngressClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses"] = networking_v1beta1.NewDeleteNetworkingV1beta1CollectionNamespacedIngress(o.context, o.NetworkingV1beta1DeleteNetworkingV1beta1CollectionNamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1beta1/ingressclasses/{name}"] = networking_v1beta1.NewDeleteNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1DeleteNetworkingV1beta1IngressClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}"] = networking_v1beta1.NewDeleteNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1DeleteNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/node.k8s.io/v1alpha1/runtimeclasses"] = node_v1alpha1.NewDeleteNodeV1alpha1CollectionRuntimeClass(o.context, o.NodeV1alpha1DeleteNodeV1alpha1CollectionRuntimeClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"] = node_v1alpha1.NewDeleteNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1DeleteNodeV1alpha1RuntimeClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/node.k8s.io/v1beta1/runtimeclasses"] = node_v1beta1.NewDeleteNodeV1beta1CollectionRuntimeClass(o.context, o.NodeV1beta1DeleteNodeV1beta1CollectionRuntimeClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"] = node_v1beta1.NewDeleteNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1DeleteNodeV1beta1RuntimeClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets"] = policy_v1beta1.NewDeletePolicyV1beta1CollectionNamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1DeletePolicyV1beta1CollectionNamespacedPodDisruptionBudgetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/policy/v1beta1/podsecuritypolicies"] = policy_v1beta1.NewDeletePolicyV1beta1CollectionPodSecurityPolicy(o.context, o.PolicyV1beta1DeletePolicyV1beta1CollectionPodSecurityPolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"] = policy_v1beta1.NewDeletePolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1DeletePolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/policy/v1beta1/podsecuritypolicies/{name}"] = policy_v1beta1.NewDeletePolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1DeletePolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/clusterroles"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1CollectionClusterRole(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1CollectionClusterRoleBinding(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1CollectionNamespacedRole(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1CollectionNamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1.NewDeleteRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1DeleteRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1CollectionClusterRole(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1CollectionNamespacedRole(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1alpha1.NewDeleteRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1DeleteRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1CollectionClusterRole(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1CollectionClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionClusterRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1CollectionNamespacedRole(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1CollectionNamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1beta1.NewDeleteRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1DeleteRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1/priorityclasses"] = scheduling_v1.NewDeleteSchedulingV1CollectionPriorityClass(o.context, o.SchedulingV1DeleteSchedulingV1CollectionPriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1/priorityclasses/{name}"] = scheduling_v1.NewDeleteSchedulingV1PriorityClass(o.context, o.SchedulingV1DeleteSchedulingV1PriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses"] = scheduling_v1alpha1.NewDeleteSchedulingV1alpha1CollectionPriorityClass(o.context, o.SchedulingV1alpha1DeleteSchedulingV1alpha1CollectionPriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}"] = scheduling_v1alpha1.NewDeleteSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1DeleteSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses"] = scheduling_v1beta1.NewDeleteSchedulingV1beta1CollectionPriorityClass(o.context, o.SchedulingV1beta1DeleteSchedulingV1beta1CollectionPriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}"] = scheduling_v1beta1.NewDeleteSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1DeleteSchedulingV1beta1PriorityClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets"] = settings_v1alpha1.NewDeleteSettingsV1alpha1CollectionNamespacedPodPreset(o.context, o.SettingsV1alpha1DeleteSettingsV1alpha1CollectionNamespacedPodPresetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}"] = settings_v1alpha1.NewDeleteSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1DeleteSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/csidrivers/{name}"] = storage_v1.NewDeleteStorageV1CSIDriver(o.context, o.StorageV1DeleteStorageV1CSIDriverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/csinodes/{name}"] = storage_v1.NewDeleteStorageV1CSINode(o.context, o.StorageV1DeleteStorageV1CSINodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/csidrivers"] = storage_v1.NewDeleteStorageV1CollectionCSIDriver(o.context, o.StorageV1DeleteStorageV1CollectionCSIDriverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/csinodes"] = storage_v1.NewDeleteStorageV1CollectionCSINode(o.context, o.StorageV1DeleteStorageV1CollectionCSINodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/storageclasses"] = storage_v1.NewDeleteStorageV1CollectionStorageClass(o.context, o.StorageV1DeleteStorageV1CollectionStorageClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/volumeattachments"] = storage_v1.NewDeleteStorageV1CollectionVolumeAttachment(o.context, o.StorageV1DeleteStorageV1CollectionVolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/storageclasses/{name}"] = storage_v1.NewDeleteStorageV1StorageClass(o.context, o.StorageV1DeleteStorageV1StorageClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1/volumeattachments/{name}"] = storage_v1.NewDeleteStorageV1VolumeAttachment(o.context, o.StorageV1DeleteStorageV1VolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1alpha1/volumeattachments"] = storage_v1alpha1.NewDeleteStorageV1alpha1CollectionVolumeAttachment(o.context, o.StorageV1alpha1DeleteStorageV1alpha1CollectionVolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}"] = storage_v1alpha1.NewDeleteStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1DeleteStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/csidrivers/{name}"] = storage_v1beta1.NewDeleteStorageV1beta1CSIDriver(o.context, o.StorageV1beta1DeleteStorageV1beta1CSIDriverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/csinodes/{name}"] = storage_v1beta1.NewDeleteStorageV1beta1CSINode(o.context, o.StorageV1beta1DeleteStorageV1beta1CSINodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/csidrivers"] = storage_v1beta1.NewDeleteStorageV1beta1CollectionCSIDriver(o.context, o.StorageV1beta1DeleteStorageV1beta1CollectionCSIDriverHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/csinodes"] = storage_v1beta1.NewDeleteStorageV1beta1CollectionCSINode(o.context, o.StorageV1beta1DeleteStorageV1beta1CollectionCSINodeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/storageclasses"] = storage_v1beta1.NewDeleteStorageV1beta1CollectionStorageClass(o.context, o.StorageV1beta1DeleteStorageV1beta1CollectionStorageClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/volumeattachments"] = storage_v1beta1.NewDeleteStorageV1beta1CollectionVolumeAttachment(o.context, o.StorageV1beta1DeleteStorageV1beta1CollectionVolumeAttachmentHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/storageclasses/{name}"] = storage_v1beta1.NewDeleteStorageV1beta1StorageClass(o.context, o.StorageV1beta1DeleteStorageV1beta1StorageClassHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/apis/storage.k8s.io/v1beta1/volumeattachments/{name}"] = storage_v1beta1.NewDeleteStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1DeleteStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis"] = apis.NewGetAPIVersions(o.context, o.ApisGetAPIVersionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io"] = admissionregistration.NewGetAdmissionregistrationAPIGroup(o.context, o.AdmissionregistrationGetAdmissionregistrationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1"] = admissionregistration_v1.NewGetAdmissionregistrationV1APIResources(o.context, o.AdmissionregistrationV1GetAdmissionregistrationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1"] = admissionregistration_v1beta1.NewGetAdmissionregistrationV1beta1APIResources(o.context, o.AdmissionregistrationV1beta1GetAdmissionregistrationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io"] = apiextensions.NewGetApiextensionsAPIGroup(o.context, o.ApiextensionsGetApiextensionsAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1"] = apiextensions_v1.NewGetApiextensionsV1APIResources(o.context, o.ApiextensionsV1GetApiextensionsV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1"] = apiextensions_v1beta1.NewGetApiextensionsV1beta1APIResources(o.context, o.ApiextensionsV1beta1GetApiextensionsV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io"] = apiregistration.NewGetApiregistrationAPIGroup(o.context, o.ApiregistrationGetApiregistrationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1"] = apiregistration_v1.NewGetApiregistrationV1APIResources(o.context, o.ApiregistrationV1GetApiregistrationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1"] = apiregistration_v1beta1.NewGetApiregistrationV1beta1APIResources(o.context, o.ApiregistrationV1beta1GetApiregistrationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps"] = apps.NewGetAppsAPIGroup(o.context, o.AppsGetAppsAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1"] = apps_v1.NewGetAppsV1APIResources(o.context, o.AppsV1GetAppsV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authentication.k8s.io"] = authentication.NewGetAuthenticationAPIGroup(o.context, o.AuthenticationGetAuthenticationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authentication.k8s.io/v1"] = authentication_v1.NewGetAuthenticationV1APIResources(o.context, o.AuthenticationV1GetAuthenticationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authentication.k8s.io/v1beta1"] = authentication_v1beta1.NewGetAuthenticationV1beta1APIResources(o.context, o.AuthenticationV1beta1GetAuthenticationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authorization.k8s.io"] = authorization.NewGetAuthorizationAPIGroup(o.context, o.AuthorizationGetAuthorizationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authorization.k8s.io/v1"] = authorization_v1.NewGetAuthorizationV1APIResources(o.context, o.AuthorizationV1GetAuthorizationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/authorization.k8s.io/v1beta1"] = authorization_v1beta1.NewGetAuthorizationV1beta1APIResources(o.context, o.AuthorizationV1beta1GetAuthorizationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling"] = autoscaling.NewGetAutoscalingAPIGroup(o.context, o.AutoscalingGetAutoscalingAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1"] = autoscaling_v1.NewGetAutoscalingV1APIResources(o.context, o.AutoscalingV1GetAutoscalingV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1"] = autoscaling_v2beta1.NewGetAutoscalingV2beta1APIResources(o.context, o.AutoscalingV2beta1GetAutoscalingV2beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2"] = autoscaling_v2beta2.NewGetAutoscalingV2beta2APIResources(o.context, o.AutoscalingV2beta2GetAutoscalingV2beta2APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch"] = batch.NewGetBatchAPIGroup(o.context, o.BatchGetBatchAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1"] = batch_v1.NewGetBatchV1APIResources(o.context, o.BatchV1GetBatchV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1"] = batch_v1beta1.NewGetBatchV1beta1APIResources(o.context, o.BatchV1beta1GetBatchV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1"] = batch_v2alpha1.NewGetBatchV2alpha1APIResources(o.context, o.BatchV2alpha1GetBatchV2alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io"] = certificates.NewGetCertificatesAPIGroup(o.context, o.CertificatesGetCertificatesAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1"] = certificates_v1.NewGetCertificatesV1APIResources(o.context, o.CertificatesV1GetCertificatesV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1"] = certificates_v1beta1.NewGetCertificatesV1beta1APIResources(o.context, o.CertificatesV1beta1GetCertificatesV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = version.NewGetCodeVersion(o.context, o.VersionGetCodeVersionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io"] = coordination.NewGetCoordinationAPIGroup(o.context, o.CoordinationGetCoordinationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1"] = coordination_v1.NewGetCoordinationV1APIResources(o.context, o.CoordinationV1GetCoordinationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1"] = coordination_v1beta1.NewGetCoordinationV1beta1APIResources(o.context, o.CoordinationV1beta1GetCoordinationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api"] = core.NewGetCoreAPIVersions(o.context, o.CoreGetCoreAPIVersionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1"] = core_v1.NewGetCoreV1APIResources(o.context, o.CoreV1GetCoreV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io"] = discovery.NewGetDiscoveryAPIGroup(o.context, o.DiscoveryGetDiscoveryAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1"] = discovery_v1beta1.NewGetDiscoveryV1beta1APIResources(o.context, o.DiscoveryV1beta1GetDiscoveryV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io"] = events.NewGetEventsAPIGroup(o.context, o.EventsGetEventsAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1"] = events_v1.NewGetEventsV1APIResources(o.context, o.EventsV1GetEventsV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1"] = events_v1beta1.NewGetEventsV1beta1APIResources(o.context, o.EventsV1beta1GetEventsV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions"] = extensions.NewGetExtensionsAPIGroup(o.context, o.ExtensionsGetExtensionsAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1"] = extensions_v1beta1.NewGetExtensionsV1beta1APIResources(o.context, o.ExtensionsV1beta1GetExtensionsV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io"] = flowcontrol_apiserver.NewGetFlowcontrolApiserverAPIGroup(o.context, o.FlowcontrolApiserverGetFlowcontrolApiserverAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1"] = flowcontrol_apiserver_v1alpha1.NewGetFlowcontrolApiserverV1alpha1APIResources(o.context, o.FlowcontrolApiserverV1alpha1GetFlowcontrolApiserverV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io"] = networking.NewGetNetworkingAPIGroup(o.context, o.NetworkingGetNetworkingAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1"] = networking_v1.NewGetNetworkingV1APIResources(o.context, o.NetworkingV1GetNetworkingV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1"] = networking_v1beta1.NewGetNetworkingV1beta1APIResources(o.context, o.NetworkingV1beta1GetNetworkingV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io"] = node.NewGetNodeAPIGroup(o.context, o.NodeGetNodeAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1alpha1"] = node_v1alpha1.NewGetNodeV1alpha1APIResources(o.context, o.NodeV1alpha1GetNodeV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1beta1"] = node_v1beta1.NewGetNodeV1beta1APIResources(o.context, o.NodeV1beta1GetNodeV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy"] = policy.NewGetPolicyAPIGroup(o.context, o.PolicyGetPolicyAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1"] = policy_v1beta1.NewGetPolicyV1beta1APIResources(o.context, o.PolicyV1beta1GetPolicyV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io"] = rbac_authorization.NewGetRbacAuthorizationAPIGroup(o.context, o.RbacAuthorizationGetRbacAuthorizationAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1"] = rbac_authorization_v1.NewGetRbacAuthorizationV1APIResources(o.context, o.RbacAuthorizationV1GetRbacAuthorizationV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1"] = rbac_authorization_v1alpha1.NewGetRbacAuthorizationV1alpha1APIResources(o.context, o.RbacAuthorizationV1alpha1GetRbacAuthorizationV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1"] = rbac_authorization_v1beta1.NewGetRbacAuthorizationV1beta1APIResources(o.context, o.RbacAuthorizationV1beta1GetRbacAuthorizationV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io"] = scheduling.NewGetSchedulingAPIGroup(o.context, o.SchedulingGetSchedulingAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1"] = scheduling_v1.NewGetSchedulingV1APIResources(o.context, o.SchedulingV1GetSchedulingV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1alpha1"] = scheduling_v1alpha1.NewGetSchedulingV1alpha1APIResources(o.context, o.SchedulingV1alpha1GetSchedulingV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1beta1"] = scheduling_v1beta1.NewGetSchedulingV1beta1APIResources(o.context, o.SchedulingV1beta1GetSchedulingV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io"] = settings.NewGetSettingsAPIGroup(o.context, o.SettingsGetSettingsAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1"] = settings_v1alpha1.NewGetSettingsV1alpha1APIResources(o.context, o.SettingsV1alpha1GetSettingsV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io"] = storage.NewGetStorageAPIGroup(o.context, o.StorageGetStorageAPIGroupHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1"] = storage_v1.NewGetStorageV1APIResources(o.context, o.StorageV1GetStorageV1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1alpha1"] = storage_v1alpha1.NewGetStorageV1alpha1APIResources(o.context, o.StorageV1alpha1GetStorageV1alpha1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1"] = storage_v1beta1.NewGetStorageV1beta1APIResources(o.context, o.StorageV1beta1GetStorageV1beta1APIResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations"] = admissionregistration_v1.NewListAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ListAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations"] = admissionregistration_v1.NewListAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ListAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations"] = admissionregistration_v1beta1.NewListAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations"] = admissionregistration_v1beta1.NewListAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ListAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions"] = apiextensions_v1.NewListApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1ListApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions"] = apiextensions_v1beta1.NewListApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1ListApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1/apiservices"] = apiregistration_v1.NewListApiregistrationV1APIService(o.context, o.ApiregistrationV1ListApiregistrationV1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1/apiservices"] = apiregistration_v1beta1.NewListApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1ListApiregistrationV1beta1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/controllerrevisions"] = apps_v1.NewListAppsV1ControllerRevisionForAllNamespaces(o.context, o.AppsV1ListAppsV1ControllerRevisionForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/daemonsets"] = apps_v1.NewListAppsV1DaemonSetForAllNamespaces(o.context, o.AppsV1ListAppsV1DaemonSetForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/deployments"] = apps_v1.NewListAppsV1DeploymentForAllNamespaces(o.context, o.AppsV1ListAppsV1DeploymentForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions"] = apps_v1.NewListAppsV1NamespacedControllerRevision(o.context, o.AppsV1ListAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/daemonsets"] = apps_v1.NewListAppsV1NamespacedDaemonSet(o.context, o.AppsV1ListAppsV1NamespacedDaemonSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/deployments"] = apps_v1.NewListAppsV1NamespacedDeployment(o.context, o.AppsV1ListAppsV1NamespacedDeploymentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/replicasets"] = apps_v1.NewListAppsV1NamespacedReplicaSet(o.context, o.AppsV1ListAppsV1NamespacedReplicaSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/statefulsets"] = apps_v1.NewListAppsV1NamespacedStatefulSet(o.context, o.AppsV1ListAppsV1NamespacedStatefulSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/replicasets"] = apps_v1.NewListAppsV1ReplicaSetForAllNamespaces(o.context, o.AppsV1ListAppsV1ReplicaSetForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/statefulsets"] = apps_v1.NewListAppsV1StatefulSetForAllNamespaces(o.context, o.AppsV1ListAppsV1StatefulSetForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/horizontalpodautoscalers"] = autoscaling_v1.NewListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(o.context, o.AutoscalingV1ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v1.NewListAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1ListAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/horizontalpodautoscalers"] = autoscaling_v2beta1.NewListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces(o.context, o.AutoscalingV2beta1ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta1.NewListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/horizontalpodautoscalers"] = autoscaling_v2beta2.NewListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces(o.context, o.AutoscalingV2beta2ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta2.NewListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/jobs"] = batch_v1.NewListBatchV1JobForAllNamespaces(o.context, o.BatchV1ListBatchV1JobForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/namespaces/{namespace}/jobs"] = batch_v1.NewListBatchV1NamespacedJob(o.context, o.BatchV1ListBatchV1NamespacedJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/cronjobs"] = batch_v1beta1.NewListBatchV1beta1CronJobForAllNamespaces(o.context, o.BatchV1beta1ListBatchV1beta1CronJobForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"] = batch_v1beta1.NewListBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1ListBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/cronjobs"] = batch_v2alpha1.NewListBatchV2alpha1CronJobForAllNamespaces(o.context, o.BatchV2alpha1ListBatchV2alpha1CronJobForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs"] = batch_v2alpha1.NewListBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1ListBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/certificatesigningrequests"] = certificates_v1.NewListCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1ListCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests"] = certificates_v1beta1.NewListCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1ListCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/leases"] = coordination_v1.NewListCoordinationV1LeaseForAllNamespaces(o.context, o.CoordinationV1ListCoordinationV1LeaseForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases"] = coordination_v1.NewListCoordinationV1NamespacedLease(o.context, o.CoordinationV1ListCoordinationV1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/leases"] = coordination_v1beta1.NewListCoordinationV1beta1LeaseForAllNamespaces(o.context, o.CoordinationV1beta1ListCoordinationV1beta1LeaseForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases"] = coordination_v1beta1.NewListCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1ListCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/componentstatuses"] = core_v1.NewListCoreV1ComponentStatus(o.context, o.CoreV1ListCoreV1ComponentStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/configmaps"] = core_v1.NewListCoreV1ConfigMapForAllNamespaces(o.context, o.CoreV1ListCoreV1ConfigMapForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/endpoints"] = core_v1.NewListCoreV1EndpointsForAllNamespaces(o.context, o.CoreV1ListCoreV1EndpointsForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/events"] = core_v1.NewListCoreV1EventForAllNamespaces(o.context, o.CoreV1ListCoreV1EventForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/limitranges"] = core_v1.NewListCoreV1LimitRangeForAllNamespaces(o.context, o.CoreV1ListCoreV1LimitRangeForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces"] = core_v1.NewListCoreV1Namespace(o.context, o.CoreV1ListCoreV1NamespaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/configmaps"] = core_v1.NewListCoreV1NamespacedConfigMap(o.context, o.CoreV1ListCoreV1NamespacedConfigMapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/endpoints"] = core_v1.NewListCoreV1NamespacedEndpoints(o.context, o.CoreV1ListCoreV1NamespacedEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/events"] = core_v1.NewListCoreV1NamespacedEvent(o.context, o.CoreV1ListCoreV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/limitranges"] = core_v1.NewListCoreV1NamespacedLimitRange(o.context, o.CoreV1ListCoreV1NamespacedLimitRangeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims"] = core_v1.NewListCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1ListCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods"] = core_v1.NewListCoreV1NamespacedPod(o.context, o.CoreV1ListCoreV1NamespacedPodHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/podtemplates"] = core_v1.NewListCoreV1NamespacedPodTemplate(o.context, o.CoreV1ListCoreV1NamespacedPodTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/replicationcontrollers"] = core_v1.NewListCoreV1NamespacedReplicationController(o.context, o.CoreV1ListCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/resourcequotas"] = core_v1.NewListCoreV1NamespacedResourceQuota(o.context, o.CoreV1ListCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/secrets"] = core_v1.NewListCoreV1NamespacedSecret(o.context, o.CoreV1ListCoreV1NamespacedSecretHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/services"] = core_v1.NewListCoreV1NamespacedService(o.context, o.CoreV1ListCoreV1NamespacedServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/serviceaccounts"] = core_v1.NewListCoreV1NamespacedServiceAccount(o.context, o.CoreV1ListCoreV1NamespacedServiceAccountHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/nodes"] = core_v1.NewListCoreV1Node(o.context, o.CoreV1ListCoreV1NodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/persistentvolumes"] = core_v1.NewListCoreV1PersistentVolume(o.context, o.CoreV1ListCoreV1PersistentVolumeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/persistentvolumeclaims"] = core_v1.NewListCoreV1PersistentVolumeClaimForAllNamespaces(o.context, o.CoreV1ListCoreV1PersistentVolumeClaimForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/pods"] = core_v1.NewListCoreV1PodForAllNamespaces(o.context, o.CoreV1ListCoreV1PodForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/podtemplates"] = core_v1.NewListCoreV1PodTemplateForAllNamespaces(o.context, o.CoreV1ListCoreV1PodTemplateForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/replicationcontrollers"] = core_v1.NewListCoreV1ReplicationControllerForAllNamespaces(o.context, o.CoreV1ListCoreV1ReplicationControllerForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/resourcequotas"] = core_v1.NewListCoreV1ResourceQuotaForAllNamespaces(o.context, o.CoreV1ListCoreV1ResourceQuotaForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/secrets"] = core_v1.NewListCoreV1SecretForAllNamespaces(o.context, o.CoreV1ListCoreV1SecretForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/serviceaccounts"] = core_v1.NewListCoreV1ServiceAccountForAllNamespaces(o.context, o.CoreV1ListCoreV1ServiceAccountForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/services"] = core_v1.NewListCoreV1ServiceForAllNamespaces(o.context, o.CoreV1ListCoreV1ServiceForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/endpointslices"] = discovery_v1beta1.NewListDiscoveryV1beta1EndpointSliceForAllNamespaces(o.context, o.DiscoveryV1beta1ListDiscoveryV1beta1EndpointSliceForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices"] = discovery_v1beta1.NewListDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1ListDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/events"] = events_v1.NewListEventsV1EventForAllNamespaces(o.context, o.EventsV1ListEventsV1EventForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events"] = events_v1.NewListEventsV1NamespacedEvent(o.context, o.EventsV1ListEventsV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/events"] = events_v1beta1.NewListEventsV1beta1EventForAllNamespaces(o.context, o.EventsV1beta1ListEventsV1beta1EventForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events"] = events_v1beta1.NewListEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1ListEventsV1beta1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/ingresses"] = extensions_v1beta1.NewListExtensionsV1beta1IngressForAllNamespaces(o.context, o.ExtensionsV1beta1ListExtensionsV1beta1IngressForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses"] = extensions_v1beta1.NewListExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1ListExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas"] = flowcontrol_apiserver_v1alpha1.NewListFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations"] = flowcontrol_apiserver_v1alpha1.NewListFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1ListFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/ingressclasses"] = networking_v1.NewListNetworkingV1IngressClass(o.context, o.NetworkingV1ListNetworkingV1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/ingresses"] = networking_v1.NewListNetworkingV1IngressForAllNamespaces(o.context, o.NetworkingV1ListNetworkingV1IngressForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses"] = networking_v1.NewListNetworkingV1NamespacedIngress(o.context, o.NetworkingV1ListNetworkingV1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies"] = networking_v1.NewListNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1ListNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/networkpolicies"] = networking_v1.NewListNetworkingV1NetworkPolicyForAllNamespaces(o.context, o.NetworkingV1ListNetworkingV1NetworkPolicyForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/ingressclasses"] = networking_v1beta1.NewListNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1ListNetworkingV1beta1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/ingresses"] = networking_v1beta1.NewListNetworkingV1beta1IngressForAllNamespaces(o.context, o.NetworkingV1beta1ListNetworkingV1beta1IngressForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses"] = networking_v1beta1.NewListNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1ListNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1alpha1/runtimeclasses"] = node_v1alpha1.NewListNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1ListNodeV1alpha1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1beta1/runtimeclasses"] = node_v1beta1.NewListNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1ListNodeV1beta1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets"] = policy_v1beta1.NewListPolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1ListPolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/poddisruptionbudgets"] = policy_v1beta1.NewListPolicyV1beta1PodDisruptionBudgetForAllNamespaces(o.context, o.PolicyV1beta1ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/podsecuritypolicies"] = policy_v1beta1.NewListPolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1ListPolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/clusterroles"] = rbac_authorization_v1.NewListRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"] = rbac_authorization_v1.NewListRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"] = rbac_authorization_v1.NewListRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1.NewListRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/rolebindings"] = rbac_authorization_v1.NewListRbacAuthorizationV1RoleBindingForAllNamespaces(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1RoleBindingForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/roles"] = rbac_authorization_v1.NewListRbacAuthorizationV1RoleForAllNamespaces(o.context, o.RbacAuthorizationV1ListRbacAuthorizationV1RoleForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1RoleBindingForAllNamespaces(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleBindingForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/roles"] = rbac_authorization_v1alpha1.NewListRbacAuthorizationV1alpha1RoleForAllNamespaces(o.context, o.RbacAuthorizationV1alpha1ListRbacAuthorizationV1alpha1RoleForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/rolebindings"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1RoleBindingForAllNamespaces(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleBindingForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/roles"] = rbac_authorization_v1beta1.NewListRbacAuthorizationV1beta1RoleForAllNamespaces(o.context, o.RbacAuthorizationV1beta1ListRbacAuthorizationV1beta1RoleForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1/priorityclasses"] = scheduling_v1.NewListSchedulingV1PriorityClass(o.context, o.SchedulingV1ListSchedulingV1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses"] = scheduling_v1alpha1.NewListSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1ListSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses"] = scheduling_v1beta1.NewListSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1ListSchedulingV1beta1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets"] = settings_v1alpha1.NewListSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1ListSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/podpresets"] = settings_v1alpha1.NewListSettingsV1alpha1PodPresetForAllNamespaces(o.context, o.SettingsV1alpha1ListSettingsV1alpha1PodPresetForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/csidrivers"] = storage_v1.NewListStorageV1CSIDriver(o.context, o.StorageV1ListStorageV1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/csinodes"] = storage_v1.NewListStorageV1CSINode(o.context, o.StorageV1ListStorageV1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/storageclasses"] = storage_v1.NewListStorageV1StorageClass(o.context, o.StorageV1ListStorageV1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/volumeattachments"] = storage_v1.NewListStorageV1VolumeAttachment(o.context, o.StorageV1ListStorageV1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1alpha1/volumeattachments"] = storage_v1alpha1.NewListStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1ListStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/csidrivers"] = storage_v1beta1.NewListStorageV1beta1CSIDriver(o.context, o.StorageV1beta1ListStorageV1beta1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/csinodes"] = storage_v1beta1.NewListStorageV1beta1CSINode(o.context, o.StorageV1beta1ListStorageV1beta1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/storageclasses"] = storage_v1beta1.NewListStorageV1beta1StorageClass(o.context, o.StorageV1beta1ListStorageV1beta1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/volumeattachments"] = storage_v1beta1.NewListStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1ListStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logs/{logpath}"] = logs.NewLogFileHandler(o.context, o.LogsLogFileHandlerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logs"] = logs.NewLogFileListHandler(o.context, o.LogsLogFileListHandlerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewPatchAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1PatchAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewPatchAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1PatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewPatchAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewPatchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1PatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"] = apiextensions_v1.NewPatchApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status"] = apiextensions_v1.NewPatchApiextensionsV1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1PatchApiextensionsV1CustomResourceDefinitionStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}"] = apiextensions_v1beta1.NewPatchApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status"] = apiextensions_v1beta1.NewPatchApiextensionsV1beta1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1beta1PatchApiextensionsV1beta1CustomResourceDefinitionStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}"] = apiregistration_v1.NewPatchApiregistrationV1APIService(o.context, o.ApiregistrationV1PatchApiregistrationV1APIServiceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}/status"] = apiregistration_v1.NewPatchApiregistrationV1APIServiceStatus(o.context, o.ApiregistrationV1PatchApiregistrationV1APIServiceStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}"] = apiregistration_v1beta1.NewPatchApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status"] = apiregistration_v1beta1.NewPatchApiregistrationV1beta1APIServiceStatus(o.context, o.ApiregistrationV1beta1PatchApiregistrationV1beta1APIServiceStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"] = apps_v1.NewPatchAppsV1NamespacedControllerRevision(o.context, o.AppsV1PatchAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"] = apps_v1.NewPatchAppsV1NamespacedDaemonSet(o.context, o.AppsV1PatchAppsV1NamespacedDaemonSetHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status"] = apps_v1.NewPatchAppsV1NamespacedDaemonSetStatus(o.context, o.AppsV1PatchAppsV1NamespacedDaemonSetStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}"] = apps_v1.NewPatchAppsV1NamespacedDeployment(o.context, o.AppsV1PatchAppsV1NamespacedDeploymentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale"] = apps_v1.NewPatchAppsV1NamespacedDeploymentScale(o.context, o.AppsV1PatchAppsV1NamespacedDeploymentScaleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status"] = apps_v1.NewPatchAppsV1NamespacedDeploymentStatus(o.context, o.AppsV1PatchAppsV1NamespacedDeploymentStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"] = apps_v1.NewPatchAppsV1NamespacedReplicaSet(o.context, o.AppsV1PatchAppsV1NamespacedReplicaSetHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale"] = apps_v1.NewPatchAppsV1NamespacedReplicaSetScale(o.context, o.AppsV1PatchAppsV1NamespacedReplicaSetScaleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status"] = apps_v1.NewPatchAppsV1NamespacedReplicaSetStatus(o.context, o.AppsV1PatchAppsV1NamespacedReplicaSetStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"] = apps_v1.NewPatchAppsV1NamespacedStatefulSet(o.context, o.AppsV1PatchAppsV1NamespacedStatefulSetHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale"] = apps_v1.NewPatchAppsV1NamespacedStatefulSetScale(o.context, o.AppsV1PatchAppsV1NamespacedStatefulSetScaleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status"] = apps_v1.NewPatchAppsV1NamespacedStatefulSetStatus(o.context, o.AppsV1PatchAppsV1NamespacedStatefulSetStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v1.NewPatchAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v1.NewPatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV1PatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta1.NewPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta1.NewPatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta1PatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta2.NewPatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta2.NewPatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta2PatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}"] = batch_v1.NewPatchBatchV1NamespacedJob(o.context, o.BatchV1PatchBatchV1NamespacedJobHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status"] = batch_v1.NewPatchBatchV1NamespacedJobStatus(o.context, o.BatchV1PatchBatchV1NamespacedJobStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"] = batch_v1beta1.NewPatchBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1PatchBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v1beta1.NewPatchBatchV1beta1NamespacedCronJobStatus(o.context, o.BatchV1beta1PatchBatchV1beta1NamespacedCronJobStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}"] = batch_v2alpha1.NewPatchBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v2alpha1.NewPatchBatchV2alpha1NamespacedCronJobStatus(o.context, o.BatchV2alpha1PatchBatchV2alpha1NamespacedCronJobStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"] = certificates_v1.NewPatchCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1PatchCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval"] = certificates_v1.NewPatchCertificatesV1CertificateSigningRequestApproval(o.context, o.CertificatesV1PatchCertificatesV1CertificateSigningRequestApprovalHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status"] = certificates_v1.NewPatchCertificatesV1CertificateSigningRequestStatus(o.context, o.CertificatesV1PatchCertificatesV1CertificateSigningRequestStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}"] = certificates_v1beta1.NewPatchCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval"] = certificates_v1beta1.NewPatchCertificatesV1beta1CertificateSigningRequestApproval(o.context, o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestApprovalHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status"] = certificates_v1beta1.NewPatchCertificatesV1beta1CertificateSigningRequestStatus(o.context, o.CertificatesV1beta1PatchCertificatesV1beta1CertificateSigningRequestStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"] = coordination_v1.NewPatchCoordinationV1NamespacedLease(o.context, o.CoordinationV1PatchCoordinationV1NamespacedLeaseHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}"] = coordination_v1beta1.NewPatchCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1PatchCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{name}"] = core_v1.NewPatchCoreV1Namespace(o.context, o.CoreV1PatchCoreV1NamespaceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{name}/status"] = core_v1.NewPatchCoreV1NamespaceStatus(o.context, o.CoreV1PatchCoreV1NamespaceStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/configmaps/{name}"] = core_v1.NewPatchCoreV1NamespacedConfigMap(o.context, o.CoreV1PatchCoreV1NamespacedConfigMapHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/endpoints/{name}"] = core_v1.NewPatchCoreV1NamespacedEndpoints(o.context, o.CoreV1PatchCoreV1NamespacedEndpointsHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/events/{name}"] = core_v1.NewPatchCoreV1NamespacedEvent(o.context, o.CoreV1PatchCoreV1NamespacedEventHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/limitranges/{name}"] = core_v1.NewPatchCoreV1NamespacedLimitRange(o.context, o.CoreV1PatchCoreV1NamespacedLimitRangeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"] = core_v1.NewPatchCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1PatchCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"] = core_v1.NewPatchCoreV1NamespacedPersistentVolumeClaimStatus(o.context, o.CoreV1PatchCoreV1NamespacedPersistentVolumeClaimStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/pods/{name}"] = core_v1.NewPatchCoreV1NamespacedPod(o.context, o.CoreV1PatchCoreV1NamespacedPodHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/pods/{name}/status"] = core_v1.NewPatchCoreV1NamespacedPodStatus(o.context, o.CoreV1PatchCoreV1NamespacedPodStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/podtemplates/{name}"] = core_v1.NewPatchCoreV1NamespacedPodTemplate(o.context, o.CoreV1PatchCoreV1NamespacedPodTemplateHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"] = core_v1.NewPatchCoreV1NamespacedReplicationController(o.context, o.CoreV1PatchCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"] = core_v1.NewPatchCoreV1NamespacedReplicationControllerScale(o.context, o.CoreV1PatchCoreV1NamespacedReplicationControllerScaleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"] = core_v1.NewPatchCoreV1NamespacedReplicationControllerStatus(o.context, o.CoreV1PatchCoreV1NamespacedReplicationControllerStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}"] = core_v1.NewPatchCoreV1NamespacedResourceQuota(o.context, o.CoreV1PatchCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"] = core_v1.NewPatchCoreV1NamespacedResourceQuotaStatus(o.context, o.CoreV1PatchCoreV1NamespacedResourceQuotaStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/secrets/{name}"] = core_v1.NewPatchCoreV1NamespacedSecret(o.context, o.CoreV1PatchCoreV1NamespacedSecretHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/services/{name}"] = core_v1.NewPatchCoreV1NamespacedService(o.context, o.CoreV1PatchCoreV1NamespacedServiceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/serviceaccounts/{name}"] = core_v1.NewPatchCoreV1NamespacedServiceAccount(o.context, o.CoreV1PatchCoreV1NamespacedServiceAccountHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/namespaces/{namespace}/services/{name}/status"] = core_v1.NewPatchCoreV1NamespacedServiceStatus(o.context, o.CoreV1PatchCoreV1NamespacedServiceStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/nodes/{name}"] = core_v1.NewPatchCoreV1Node(o.context, o.CoreV1PatchCoreV1NodeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/nodes/{name}/status"] = core_v1.NewPatchCoreV1NodeStatus(o.context, o.CoreV1PatchCoreV1NodeStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/persistentvolumes/{name}"] = core_v1.NewPatchCoreV1PersistentVolume(o.context, o.CoreV1PatchCoreV1PersistentVolumeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/api/v1/persistentvolumes/{name}/status"] = core_v1.NewPatchCoreV1PersistentVolumeStatus(o.context, o.CoreV1PatchCoreV1PersistentVolumeStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"] = discovery_v1beta1.NewPatchDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1PatchDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"] = events_v1.NewPatchEventsV1NamespacedEvent(o.context, o.EventsV1PatchEventsV1NamespacedEventHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"] = events_v1beta1.NewPatchEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1PatchEventsV1beta1NamespacedEventHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}"] = extensions_v1beta1.NewPatchExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = extensions_v1beta1.NewPatchExtensionsV1beta1NamespacedIngressStatus(o.context, o.ExtensionsV1beta1PatchExtensionsV1beta1NamespacedIngressStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}"] = flowcontrol_apiserver_v1alpha1.NewPatchFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewPatchFlowcontrolApiserverV1alpha1FlowSchemaStatus(o.context, o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}"] = flowcontrol_apiserver_v1alpha1.NewPatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewPatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(o.context, o.FlowcontrolApiserverV1alpha1PatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1/ingressclasses/{name}"] = networking_v1.NewPatchNetworkingV1IngressClass(o.context, o.NetworkingV1PatchNetworkingV1IngressClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"] = networking_v1.NewPatchNetworkingV1NamespacedIngress(o.context, o.NetworkingV1PatchNetworkingV1NamespacedIngressHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1.NewPatchNetworkingV1NamespacedIngressStatus(o.context, o.NetworkingV1PatchNetworkingV1NamespacedIngressStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"] = networking_v1.NewPatchNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1PatchNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1beta1/ingressclasses/{name}"] = networking_v1beta1.NewPatchNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1PatchNetworkingV1beta1IngressClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}"] = networking_v1beta1.NewPatchNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1beta1.NewPatchNetworkingV1beta1NamespacedIngressStatus(o.context, o.NetworkingV1beta1PatchNetworkingV1beta1NamespacedIngressStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"] = node_v1alpha1.NewPatchNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1PatchNodeV1alpha1RuntimeClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"] = node_v1beta1.NewPatchNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1PatchNodeV1beta1RuntimeClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"] = policy_v1beta1.NewPatchPolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"] = policy_v1beta1.NewPatchPolicyV1beta1NamespacedPodDisruptionBudgetStatus(o.context, o.PolicyV1beta1PatchPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/policy/v1beta1/podsecuritypolicies/{name}"] = policy_v1beta1.NewPatchPolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1PatchPolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"] = rbac_authorization_v1.NewPatchRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"] = rbac_authorization_v1.NewPatchRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1PatchRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1.NewPatchRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1.NewPatchRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1PatchRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}"] = rbac_authorization_v1alpha1.NewPatchRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}"] = rbac_authorization_v1alpha1.NewPatchRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1alpha1.NewPatchRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1alpha1.NewPatchRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1PatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}"] = rbac_authorization_v1beta1.NewPatchRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}"] = rbac_authorization_v1beta1.NewPatchRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1beta1.NewPatchRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1beta1.NewPatchRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1PatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/scheduling.k8s.io/v1/priorityclasses/{name}"] = scheduling_v1.NewPatchSchedulingV1PriorityClass(o.context, o.SchedulingV1PatchSchedulingV1PriorityClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}"] = scheduling_v1alpha1.NewPatchSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1PatchSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}"] = scheduling_v1beta1.NewPatchSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1PatchSchedulingV1beta1PriorityClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}"] = settings_v1alpha1.NewPatchSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1PatchSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1/csidrivers/{name}"] = storage_v1.NewPatchStorageV1CSIDriver(o.context, o.StorageV1PatchStorageV1CSIDriverHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1/csinodes/{name}"] = storage_v1.NewPatchStorageV1CSINode(o.context, o.StorageV1PatchStorageV1CSINodeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1/storageclasses/{name}"] = storage_v1.NewPatchStorageV1StorageClass(o.context, o.StorageV1PatchStorageV1StorageClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1/volumeattachments/{name}"] = storage_v1.NewPatchStorageV1VolumeAttachment(o.context, o.StorageV1PatchStorageV1VolumeAttachmentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1/volumeattachments/{name}/status"] = storage_v1.NewPatchStorageV1VolumeAttachmentStatus(o.context, o.StorageV1PatchStorageV1VolumeAttachmentStatusHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}"] = storage_v1alpha1.NewPatchStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1PatchStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1beta1/csidrivers/{name}"] = storage_v1beta1.NewPatchStorageV1beta1CSIDriver(o.context, o.StorageV1beta1PatchStorageV1beta1CSIDriverHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1beta1/csinodes/{name}"] = storage_v1beta1.NewPatchStorageV1beta1CSINode(o.context, o.StorageV1beta1PatchStorageV1beta1CSINodeHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1beta1/storageclasses/{name}"] = storage_v1beta1.NewPatchStorageV1beta1StorageClass(o.context, o.StorageV1beta1PatchStorageV1beta1StorageClassHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/apis/storage.k8s.io/v1beta1/volumeattachments/{name}"] = storage_v1beta1.NewPatchStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1PatchStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewReadAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ReadAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewReadAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ReadAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewReadAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewReadAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ReadAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"] = apiextensions_v1.NewReadApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status"] = apiextensions_v1.NewReadApiextensionsV1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1ReadApiextensionsV1CustomResourceDefinitionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}"] = apiextensions_v1beta1.NewReadApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status"] = apiextensions_v1beta1.NewReadApiextensionsV1beta1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1beta1ReadApiextensionsV1beta1CustomResourceDefinitionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}"] = apiregistration_v1.NewReadApiregistrationV1APIService(o.context, o.ApiregistrationV1ReadApiregistrationV1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}/status"] = apiregistration_v1.NewReadApiregistrationV1APIServiceStatus(o.context, o.ApiregistrationV1ReadApiregistrationV1APIServiceStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}"] = apiregistration_v1beta1.NewReadApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status"] = apiregistration_v1beta1.NewReadApiregistrationV1beta1APIServiceStatus(o.context, o.ApiregistrationV1beta1ReadApiregistrationV1beta1APIServiceStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"] = apps_v1.NewReadAppsV1NamespacedControllerRevision(o.context, o.AppsV1ReadAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"] = apps_v1.NewReadAppsV1NamespacedDaemonSet(o.context, o.AppsV1ReadAppsV1NamespacedDaemonSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status"] = apps_v1.NewReadAppsV1NamespacedDaemonSetStatus(o.context, o.AppsV1ReadAppsV1NamespacedDaemonSetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}"] = apps_v1.NewReadAppsV1NamespacedDeployment(o.context, o.AppsV1ReadAppsV1NamespacedDeploymentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale"] = apps_v1.NewReadAppsV1NamespacedDeploymentScale(o.context, o.AppsV1ReadAppsV1NamespacedDeploymentScaleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status"] = apps_v1.NewReadAppsV1NamespacedDeploymentStatus(o.context, o.AppsV1ReadAppsV1NamespacedDeploymentStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"] = apps_v1.NewReadAppsV1NamespacedReplicaSet(o.context, o.AppsV1ReadAppsV1NamespacedReplicaSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale"] = apps_v1.NewReadAppsV1NamespacedReplicaSetScale(o.context, o.AppsV1ReadAppsV1NamespacedReplicaSetScaleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status"] = apps_v1.NewReadAppsV1NamespacedReplicaSetStatus(o.context, o.AppsV1ReadAppsV1NamespacedReplicaSetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"] = apps_v1.NewReadAppsV1NamespacedStatefulSet(o.context, o.AppsV1ReadAppsV1NamespacedStatefulSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale"] = apps_v1.NewReadAppsV1NamespacedStatefulSetScale(o.context, o.AppsV1ReadAppsV1NamespacedStatefulSetScaleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status"] = apps_v1.NewReadAppsV1NamespacedStatefulSetStatus(o.context, o.AppsV1ReadAppsV1NamespacedStatefulSetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v1.NewReadAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v1.NewReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV1ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta1.NewReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta1.NewReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta1ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta2.NewReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta2.NewReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta2ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}"] = batch_v1.NewReadBatchV1NamespacedJob(o.context, o.BatchV1ReadBatchV1NamespacedJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status"] = batch_v1.NewReadBatchV1NamespacedJobStatus(o.context, o.BatchV1ReadBatchV1NamespacedJobStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"] = batch_v1beta1.NewReadBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1ReadBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v1beta1.NewReadBatchV1beta1NamespacedCronJobStatus(o.context, o.BatchV1beta1ReadBatchV1beta1NamespacedCronJobStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}"] = batch_v2alpha1.NewReadBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v2alpha1.NewReadBatchV2alpha1NamespacedCronJobStatus(o.context, o.BatchV2alpha1ReadBatchV2alpha1NamespacedCronJobStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"] = certificates_v1.NewReadCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1ReadCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval"] = certificates_v1.NewReadCertificatesV1CertificateSigningRequestApproval(o.context, o.CertificatesV1ReadCertificatesV1CertificateSigningRequestApprovalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status"] = certificates_v1.NewReadCertificatesV1CertificateSigningRequestStatus(o.context, o.CertificatesV1ReadCertificatesV1CertificateSigningRequestStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}"] = certificates_v1beta1.NewReadCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval"] = certificates_v1beta1.NewReadCertificatesV1beta1CertificateSigningRequestApproval(o.context, o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestApprovalHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status"] = certificates_v1beta1.NewReadCertificatesV1beta1CertificateSigningRequestStatus(o.context, o.CertificatesV1beta1ReadCertificatesV1beta1CertificateSigningRequestStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"] = coordination_v1.NewReadCoordinationV1NamespacedLease(o.context, o.CoordinationV1ReadCoordinationV1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}"] = coordination_v1beta1.NewReadCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1ReadCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/componentstatuses/{name}"] = core_v1.NewReadCoreV1ComponentStatus(o.context, o.CoreV1ReadCoreV1ComponentStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{name}"] = core_v1.NewReadCoreV1Namespace(o.context, o.CoreV1ReadCoreV1NamespaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{name}/status"] = core_v1.NewReadCoreV1NamespaceStatus(o.context, o.CoreV1ReadCoreV1NamespaceStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/configmaps/{name}"] = core_v1.NewReadCoreV1NamespacedConfigMap(o.context, o.CoreV1ReadCoreV1NamespacedConfigMapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/endpoints/{name}"] = core_v1.NewReadCoreV1NamespacedEndpoints(o.context, o.CoreV1ReadCoreV1NamespacedEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/events/{name}"] = core_v1.NewReadCoreV1NamespacedEvent(o.context, o.CoreV1ReadCoreV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/limitranges/{name}"] = core_v1.NewReadCoreV1NamespacedLimitRange(o.context, o.CoreV1ReadCoreV1NamespacedLimitRangeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"] = core_v1.NewReadCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1ReadCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"] = core_v1.NewReadCoreV1NamespacedPersistentVolumeClaimStatus(o.context, o.CoreV1ReadCoreV1NamespacedPersistentVolumeClaimStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}"] = core_v1.NewReadCoreV1NamespacedPod(o.context, o.CoreV1ReadCoreV1NamespacedPodHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/log"] = core_v1.NewReadCoreV1NamespacedPodLog(o.context, o.CoreV1ReadCoreV1NamespacedPodLogHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/pods/{name}/status"] = core_v1.NewReadCoreV1NamespacedPodStatus(o.context, o.CoreV1ReadCoreV1NamespacedPodStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/podtemplates/{name}"] = core_v1.NewReadCoreV1NamespacedPodTemplate(o.context, o.CoreV1ReadCoreV1NamespacedPodTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"] = core_v1.NewReadCoreV1NamespacedReplicationController(o.context, o.CoreV1ReadCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"] = core_v1.NewReadCoreV1NamespacedReplicationControllerScale(o.context, o.CoreV1ReadCoreV1NamespacedReplicationControllerScaleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"] = core_v1.NewReadCoreV1NamespacedReplicationControllerStatus(o.context, o.CoreV1ReadCoreV1NamespacedReplicationControllerStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}"] = core_v1.NewReadCoreV1NamespacedResourceQuota(o.context, o.CoreV1ReadCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"] = core_v1.NewReadCoreV1NamespacedResourceQuotaStatus(o.context, o.CoreV1ReadCoreV1NamespacedResourceQuotaStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/secrets/{name}"] = core_v1.NewReadCoreV1NamespacedSecret(o.context, o.CoreV1ReadCoreV1NamespacedSecretHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/services/{name}"] = core_v1.NewReadCoreV1NamespacedService(o.context, o.CoreV1ReadCoreV1NamespacedServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/serviceaccounts/{name}"] = core_v1.NewReadCoreV1NamespacedServiceAccount(o.context, o.CoreV1ReadCoreV1NamespacedServiceAccountHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/namespaces/{namespace}/services/{name}/status"] = core_v1.NewReadCoreV1NamespacedServiceStatus(o.context, o.CoreV1ReadCoreV1NamespacedServiceStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/nodes/{name}"] = core_v1.NewReadCoreV1Node(o.context, o.CoreV1ReadCoreV1NodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/nodes/{name}/status"] = core_v1.NewReadCoreV1NodeStatus(o.context, o.CoreV1ReadCoreV1NodeStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/persistentvolumes/{name}"] = core_v1.NewReadCoreV1PersistentVolume(o.context, o.CoreV1ReadCoreV1PersistentVolumeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/persistentvolumes/{name}/status"] = core_v1.NewReadCoreV1PersistentVolumeStatus(o.context, o.CoreV1ReadCoreV1PersistentVolumeStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"] = discovery_v1beta1.NewReadDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1ReadDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"] = events_v1.NewReadEventsV1NamespacedEvent(o.context, o.EventsV1ReadEventsV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"] = events_v1beta1.NewReadEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1ReadEventsV1beta1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}"] = extensions_v1beta1.NewReadExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = extensions_v1beta1.NewReadExtensionsV1beta1NamespacedIngressStatus(o.context, o.ExtensionsV1beta1ReadExtensionsV1beta1NamespacedIngressStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}"] = flowcontrol_apiserver_v1alpha1.NewReadFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewReadFlowcontrolApiserverV1alpha1FlowSchemaStatus(o.context, o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}"] = flowcontrol_apiserver_v1alpha1.NewReadFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(o.context, o.FlowcontrolApiserverV1alpha1ReadFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/ingressclasses/{name}"] = networking_v1.NewReadNetworkingV1IngressClass(o.context, o.NetworkingV1ReadNetworkingV1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"] = networking_v1.NewReadNetworkingV1NamespacedIngress(o.context, o.NetworkingV1ReadNetworkingV1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1.NewReadNetworkingV1NamespacedIngressStatus(o.context, o.NetworkingV1ReadNetworkingV1NamespacedIngressStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"] = networking_v1.NewReadNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1ReadNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/ingressclasses/{name}"] = networking_v1beta1.NewReadNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1ReadNetworkingV1beta1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}"] = networking_v1beta1.NewReadNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1beta1.NewReadNetworkingV1beta1NamespacedIngressStatus(o.context, o.NetworkingV1beta1ReadNetworkingV1beta1NamespacedIngressStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"] = node_v1alpha1.NewReadNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1ReadNodeV1alpha1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"] = node_v1beta1.NewReadNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1ReadNodeV1beta1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"] = policy_v1beta1.NewReadPolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"] = policy_v1beta1.NewReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus(o.context, o.PolicyV1beta1ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/podsecuritypolicies/{name}"] = policy_v1beta1.NewReadPolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1ReadPolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"] = rbac_authorization_v1.NewReadRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"] = rbac_authorization_v1.NewReadRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1ReadRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1.NewReadRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1.NewReadRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1ReadRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}"] = rbac_authorization_v1alpha1.NewReadRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}"] = rbac_authorization_v1alpha1.NewReadRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1alpha1.NewReadRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1alpha1.NewReadRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1ReadRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}"] = rbac_authorization_v1beta1.NewReadRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}"] = rbac_authorization_v1beta1.NewReadRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1beta1.NewReadRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1beta1.NewReadRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1ReadRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1/priorityclasses/{name}"] = scheduling_v1.NewReadSchedulingV1PriorityClass(o.context, o.SchedulingV1ReadSchedulingV1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}"] = scheduling_v1alpha1.NewReadSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1ReadSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}"] = scheduling_v1beta1.NewReadSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1ReadSchedulingV1beta1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}"] = settings_v1alpha1.NewReadSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1ReadSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/csidrivers/{name}"] = storage_v1.NewReadStorageV1CSIDriver(o.context, o.StorageV1ReadStorageV1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/csinodes/{name}"] = storage_v1.NewReadStorageV1CSINode(o.context, o.StorageV1ReadStorageV1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/storageclasses/{name}"] = storage_v1.NewReadStorageV1StorageClass(o.context, o.StorageV1ReadStorageV1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/volumeattachments/{name}"] = storage_v1.NewReadStorageV1VolumeAttachment(o.context, o.StorageV1ReadStorageV1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/volumeattachments/{name}/status"] = storage_v1.NewReadStorageV1VolumeAttachmentStatus(o.context, o.StorageV1ReadStorageV1VolumeAttachmentStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}"] = storage_v1alpha1.NewReadStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1ReadStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/csidrivers/{name}"] = storage_v1beta1.NewReadStorageV1beta1CSIDriver(o.context, o.StorageV1beta1ReadStorageV1beta1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/csinodes/{name}"] = storage_v1beta1.NewReadStorageV1beta1CSINode(o.context, o.StorageV1beta1ReadStorageV1beta1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/storageclasses/{name}"] = storage_v1beta1.NewReadStorageV1beta1StorageClass(o.context, o.StorageV1beta1ReadStorageV1beta1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/volumeattachments/{name}"] = storage_v1beta1.NewReadStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1ReadStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewReplaceAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ReplaceAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewReplaceAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1ReplaceAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewReplaceAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewReplaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1ReplaceAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"] = apiextensions_v1.NewReplaceApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status"] = apiextensions_v1.NewReplaceApiextensionsV1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1ReplaceApiextensionsV1CustomResourceDefinitionStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}"] = apiextensions_v1beta1.NewReplaceApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status"] = apiextensions_v1beta1.NewReplaceApiextensionsV1beta1CustomResourceDefinitionStatus(o.context, o.ApiextensionsV1beta1ReplaceApiextensionsV1beta1CustomResourceDefinitionStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}"] = apiregistration_v1.NewReplaceApiregistrationV1APIService(o.context, o.ApiregistrationV1ReplaceApiregistrationV1APIServiceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiregistration.k8s.io/v1/apiservices/{name}/status"] = apiregistration_v1.NewReplaceApiregistrationV1APIServiceStatus(o.context, o.ApiregistrationV1ReplaceApiregistrationV1APIServiceStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}"] = apiregistration_v1beta1.NewReplaceApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status"] = apiregistration_v1beta1.NewReplaceApiregistrationV1beta1APIServiceStatus(o.context, o.ApiregistrationV1beta1ReplaceApiregistrationV1beta1APIServiceStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"] = apps_v1.NewReplaceAppsV1NamespacedControllerRevision(o.context, o.AppsV1ReplaceAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"] = apps_v1.NewReplaceAppsV1NamespacedDaemonSet(o.context, o.AppsV1ReplaceAppsV1NamespacedDaemonSetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status"] = apps_v1.NewReplaceAppsV1NamespacedDaemonSetStatus(o.context, o.AppsV1ReplaceAppsV1NamespacedDaemonSetStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}"] = apps_v1.NewReplaceAppsV1NamespacedDeployment(o.context, o.AppsV1ReplaceAppsV1NamespacedDeploymentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale"] = apps_v1.NewReplaceAppsV1NamespacedDeploymentScale(o.context, o.AppsV1ReplaceAppsV1NamespacedDeploymentScaleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status"] = apps_v1.NewReplaceAppsV1NamespacedDeploymentStatus(o.context, o.AppsV1ReplaceAppsV1NamespacedDeploymentStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"] = apps_v1.NewReplaceAppsV1NamespacedReplicaSet(o.context, o.AppsV1ReplaceAppsV1NamespacedReplicaSetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale"] = apps_v1.NewReplaceAppsV1NamespacedReplicaSetScale(o.context, o.AppsV1ReplaceAppsV1NamespacedReplicaSetScaleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status"] = apps_v1.NewReplaceAppsV1NamespacedReplicaSetStatus(o.context, o.AppsV1ReplaceAppsV1NamespacedReplicaSetStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"] = apps_v1.NewReplaceAppsV1NamespacedStatefulSet(o.context, o.AppsV1ReplaceAppsV1NamespacedStatefulSetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale"] = apps_v1.NewReplaceAppsV1NamespacedStatefulSetScale(o.context, o.AppsV1ReplaceAppsV1NamespacedStatefulSetScaleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status"] = apps_v1.NewReplaceAppsV1NamespacedStatefulSetStatus(o.context, o.AppsV1ReplaceAppsV1NamespacedStatefulSetStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v1.NewReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v1.NewReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV1ReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta1.NewReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta1.NewReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta1ReplaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta2.NewReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"] = autoscaling_v2beta2.NewReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus(o.context, o.AutoscalingV2beta2ReplaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}"] = batch_v1.NewReplaceBatchV1NamespacedJob(o.context, o.BatchV1ReplaceBatchV1NamespacedJobHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status"] = batch_v1.NewReplaceBatchV1NamespacedJobStatus(o.context, o.BatchV1ReplaceBatchV1NamespacedJobStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"] = batch_v1beta1.NewReplaceBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v1beta1.NewReplaceBatchV1beta1NamespacedCronJobStatus(o.context, o.BatchV1beta1ReplaceBatchV1beta1NamespacedCronJobStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}"] = batch_v2alpha1.NewReplaceBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status"] = batch_v2alpha1.NewReplaceBatchV2alpha1NamespacedCronJobStatus(o.context, o.BatchV2alpha1ReplaceBatchV2alpha1NamespacedCronJobStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"] = certificates_v1.NewReplaceCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval"] = certificates_v1.NewReplaceCertificatesV1CertificateSigningRequestApproval(o.context, o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestApprovalHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status"] = certificates_v1.NewReplaceCertificatesV1CertificateSigningRequestStatus(o.context, o.CertificatesV1ReplaceCertificatesV1CertificateSigningRequestStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}"] = certificates_v1beta1.NewReplaceCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval"] = certificates_v1beta1.NewReplaceCertificatesV1beta1CertificateSigningRequestApproval(o.context, o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestApprovalHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status"] = certificates_v1beta1.NewReplaceCertificatesV1beta1CertificateSigningRequestStatus(o.context, o.CertificatesV1beta1ReplaceCertificatesV1beta1CertificateSigningRequestStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"] = coordination_v1.NewReplaceCoordinationV1NamespacedLease(o.context, o.CoordinationV1ReplaceCoordinationV1NamespacedLeaseHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}"] = coordination_v1beta1.NewReplaceCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1ReplaceCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{name}"] = core_v1.NewReplaceCoreV1Namespace(o.context, o.CoreV1ReplaceCoreV1NamespaceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{name}/finalize"] = core_v1.NewReplaceCoreV1NamespaceFinalize(o.context, o.CoreV1ReplaceCoreV1NamespaceFinalizeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{name}/status"] = core_v1.NewReplaceCoreV1NamespaceStatus(o.context, o.CoreV1ReplaceCoreV1NamespaceStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/configmaps/{name}"] = core_v1.NewReplaceCoreV1NamespacedConfigMap(o.context, o.CoreV1ReplaceCoreV1NamespacedConfigMapHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/endpoints/{name}"] = core_v1.NewReplaceCoreV1NamespacedEndpoints(o.context, o.CoreV1ReplaceCoreV1NamespacedEndpointsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/events/{name}"] = core_v1.NewReplaceCoreV1NamespacedEvent(o.context, o.CoreV1ReplaceCoreV1NamespacedEventHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/limitranges/{name}"] = core_v1.NewReplaceCoreV1NamespacedLimitRange(o.context, o.CoreV1ReplaceCoreV1NamespacedLimitRangeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"] = core_v1.NewReplaceCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"] = core_v1.NewReplaceCoreV1NamespacedPersistentVolumeClaimStatus(o.context, o.CoreV1ReplaceCoreV1NamespacedPersistentVolumeClaimStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/pods/{name}"] = core_v1.NewReplaceCoreV1NamespacedPod(o.context, o.CoreV1ReplaceCoreV1NamespacedPodHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/pods/{name}/status"] = core_v1.NewReplaceCoreV1NamespacedPodStatus(o.context, o.CoreV1ReplaceCoreV1NamespacedPodStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/podtemplates/{name}"] = core_v1.NewReplaceCoreV1NamespacedPodTemplate(o.context, o.CoreV1ReplaceCoreV1NamespacedPodTemplateHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"] = core_v1.NewReplaceCoreV1NamespacedReplicationController(o.context, o.CoreV1ReplaceCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"] = core_v1.NewReplaceCoreV1NamespacedReplicationControllerScale(o.context, o.CoreV1ReplaceCoreV1NamespacedReplicationControllerScaleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"] = core_v1.NewReplaceCoreV1NamespacedReplicationControllerStatus(o.context, o.CoreV1ReplaceCoreV1NamespacedReplicationControllerStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}"] = core_v1.NewReplaceCoreV1NamespacedResourceQuota(o.context, o.CoreV1ReplaceCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"] = core_v1.NewReplaceCoreV1NamespacedResourceQuotaStatus(o.context, o.CoreV1ReplaceCoreV1NamespacedResourceQuotaStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/secrets/{name}"] = core_v1.NewReplaceCoreV1NamespacedSecret(o.context, o.CoreV1ReplaceCoreV1NamespacedSecretHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/services/{name}"] = core_v1.NewReplaceCoreV1NamespacedService(o.context, o.CoreV1ReplaceCoreV1NamespacedServiceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/serviceaccounts/{name}"] = core_v1.NewReplaceCoreV1NamespacedServiceAccount(o.context, o.CoreV1ReplaceCoreV1NamespacedServiceAccountHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/namespaces/{namespace}/services/{name}/status"] = core_v1.NewReplaceCoreV1NamespacedServiceStatus(o.context, o.CoreV1ReplaceCoreV1NamespacedServiceStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/nodes/{name}"] = core_v1.NewReplaceCoreV1Node(o.context, o.CoreV1ReplaceCoreV1NodeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/nodes/{name}/status"] = core_v1.NewReplaceCoreV1NodeStatus(o.context, o.CoreV1ReplaceCoreV1NodeStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/persistentvolumes/{name}"] = core_v1.NewReplaceCoreV1PersistentVolume(o.context, o.CoreV1ReplaceCoreV1PersistentVolumeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/persistentvolumes/{name}/status"] = core_v1.NewReplaceCoreV1PersistentVolumeStatus(o.context, o.CoreV1ReplaceCoreV1PersistentVolumeStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"] = discovery_v1beta1.NewReplaceDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1ReplaceDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"] = events_v1.NewReplaceEventsV1NamespacedEvent(o.context, o.EventsV1ReplaceEventsV1NamespacedEventHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"] = events_v1beta1.NewReplaceEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1ReplaceEventsV1beta1NamespacedEventHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}"] = extensions_v1beta1.NewReplaceExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = extensions_v1beta1.NewReplaceExtensionsV1beta1NamespacedIngressStatus(o.context, o.ExtensionsV1beta1ReplaceExtensionsV1beta1NamespacedIngressStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}"] = flowcontrol_apiserver_v1alpha1.NewReplaceFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatus(o.context, o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1FlowSchemaStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}"] = flowcontrol_apiserver_v1alpha1.NewReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status"] = flowcontrol_apiserver_v1alpha1.NewReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(o.context, o.FlowcontrolApiserverV1alpha1ReplaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1/ingressclasses/{name}"] = networking_v1.NewReplaceNetworkingV1IngressClass(o.context, o.NetworkingV1ReplaceNetworkingV1IngressClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"] = networking_v1.NewReplaceNetworkingV1NamespacedIngress(o.context, o.NetworkingV1ReplaceNetworkingV1NamespacedIngressHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1.NewReplaceNetworkingV1NamespacedIngressStatus(o.context, o.NetworkingV1ReplaceNetworkingV1NamespacedIngressStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"] = networking_v1.NewReplaceNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1ReplaceNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1beta1/ingressclasses/{name}"] = networking_v1beta1.NewReplaceNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1ReplaceNetworkingV1beta1IngressClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}"] = networking_v1beta1.NewReplaceNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status"] = networking_v1beta1.NewReplaceNetworkingV1beta1NamespacedIngressStatus(o.context, o.NetworkingV1beta1ReplaceNetworkingV1beta1NamespacedIngressStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"] = node_v1alpha1.NewReplaceNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1ReplaceNodeV1alpha1RuntimeClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"] = node_v1beta1.NewReplaceNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1ReplaceNodeV1beta1RuntimeClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"] = policy_v1beta1.NewReplacePolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"] = policy_v1beta1.NewReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatus(o.context, o.PolicyV1beta1ReplacePolicyV1beta1NamespacedPodDisruptionBudgetStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/policy/v1beta1/podsecuritypolicies/{name}"] = policy_v1beta1.NewReplacePolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1ReplacePolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"] = rbac_authorization_v1.NewReplaceRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"] = rbac_authorization_v1.NewReplaceRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1ReplaceRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1.NewReplaceRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1.NewReplaceRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1ReplaceRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}"] = rbac_authorization_v1alpha1.NewReplaceRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}"] = rbac_authorization_v1alpha1.NewReplaceRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1alpha1.NewReplaceRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1alpha1.NewReplaceRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1ReplaceRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}"] = rbac_authorization_v1beta1.NewReplaceRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}"] = rbac_authorization_v1beta1.NewReplaceRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1beta1.NewReplaceRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1beta1.NewReplaceRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1ReplaceRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/scheduling.k8s.io/v1/priorityclasses/{name}"] = scheduling_v1.NewReplaceSchedulingV1PriorityClass(o.context, o.SchedulingV1ReplaceSchedulingV1PriorityClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}"] = scheduling_v1alpha1.NewReplaceSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1ReplaceSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}"] = scheduling_v1beta1.NewReplaceSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1ReplaceSchedulingV1beta1PriorityClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}"] = settings_v1alpha1.NewReplaceSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1ReplaceSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1/csidrivers/{name}"] = storage_v1.NewReplaceStorageV1CSIDriver(o.context, o.StorageV1ReplaceStorageV1CSIDriverHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1/csinodes/{name}"] = storage_v1.NewReplaceStorageV1CSINode(o.context, o.StorageV1ReplaceStorageV1CSINodeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1/storageclasses/{name}"] = storage_v1.NewReplaceStorageV1StorageClass(o.context, o.StorageV1ReplaceStorageV1StorageClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1/volumeattachments/{name}"] = storage_v1.NewReplaceStorageV1VolumeAttachment(o.context, o.StorageV1ReplaceStorageV1VolumeAttachmentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1/volumeattachments/{name}/status"] = storage_v1.NewReplaceStorageV1VolumeAttachmentStatus(o.context, o.StorageV1ReplaceStorageV1VolumeAttachmentStatusHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}"] = storage_v1alpha1.NewReplaceStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1ReplaceStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1beta1/csidrivers/{name}"] = storage_v1beta1.NewReplaceStorageV1beta1CSIDriver(o.context, o.StorageV1beta1ReplaceStorageV1beta1CSIDriverHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1beta1/csinodes/{name}"] = storage_v1beta1.NewReplaceStorageV1beta1CSINode(o.context, o.StorageV1beta1ReplaceStorageV1beta1CSINodeHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1beta1/storageclasses/{name}"] = storage_v1beta1.NewReplaceStorageV1beta1StorageClass(o.context, o.StorageV1beta1ReplaceStorageV1beta1StorageClassHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/apis/storage.k8s.io/v1beta1/volumeattachments/{name}"] = storage_v1beta1.NewReplaceStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1ReplaceStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewWatchAdmissionregistrationV1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations"] = admissionregistration_v1.NewWatchAdmissionregistrationV1MutatingWebhookConfigurationList(o.context, o.AdmissionregistrationV1WatchAdmissionregistrationV1MutatingWebhookConfigurationListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}"] = admissionregistration_v1.NewWatchAdmissionregistrationV1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations"] = admissionregistration_v1.NewWatchAdmissionregistrationV1ValidatingWebhookConfigurationList(o.context, o.AdmissionregistrationV1WatchAdmissionregistrationV1ValidatingWebhookConfigurationListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewWatchAdmissionregistrationV1beta1MutatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations"] = admissionregistration_v1beta1.NewWatchAdmissionregistrationV1beta1MutatingWebhookConfigurationList(o.context, o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1MutatingWebhookConfigurationListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}"] = admissionregistration_v1beta1.NewWatchAdmissionregistrationV1beta1ValidatingWebhookConfiguration(o.context, o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations"] = admissionregistration_v1beta1.NewWatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationList(o.context, o.AdmissionregistrationV1beta1WatchAdmissionregistrationV1beta1ValidatingWebhookConfigurationListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}"] = apiextensions_v1.NewWatchApiextensionsV1CustomResourceDefinition(o.context, o.ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions"] = apiextensions_v1.NewWatchApiextensionsV1CustomResourceDefinitionList(o.context, o.ApiextensionsV1WatchApiextensionsV1CustomResourceDefinitionListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}"] = apiextensions_v1beta1.NewWatchApiextensionsV1beta1CustomResourceDefinition(o.context, o.ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions"] = apiextensions_v1beta1.NewWatchApiextensionsV1beta1CustomResourceDefinitionList(o.context, o.ApiextensionsV1beta1WatchApiextensionsV1beta1CustomResourceDefinitionListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}"] = apiregistration_v1.NewWatchApiregistrationV1APIService(o.context, o.ApiregistrationV1WatchApiregistrationV1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1/watch/apiservices"] = apiregistration_v1.NewWatchApiregistrationV1APIServiceList(o.context, o.ApiregistrationV1WatchApiregistrationV1APIServiceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}"] = apiregistration_v1beta1.NewWatchApiregistrationV1beta1APIService(o.context, o.ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apiregistration.k8s.io/v1beta1/watch/apiservices"] = apiregistration_v1beta1.NewWatchApiregistrationV1beta1APIServiceList(o.context, o.ApiregistrationV1beta1WatchApiregistrationV1beta1APIServiceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/controllerrevisions"] = apps_v1.NewWatchAppsV1ControllerRevisionListForAllNamespaces(o.context, o.AppsV1WatchAppsV1ControllerRevisionListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/daemonsets"] = apps_v1.NewWatchAppsV1DaemonSetListForAllNamespaces(o.context, o.AppsV1WatchAppsV1DaemonSetListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/deployments"] = apps_v1.NewWatchAppsV1DeploymentListForAllNamespaces(o.context, o.AppsV1WatchAppsV1DeploymentListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}"] = apps_v1.NewWatchAppsV1NamespacedControllerRevision(o.context, o.AppsV1WatchAppsV1NamespacedControllerRevisionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions"] = apps_v1.NewWatchAppsV1NamespacedControllerRevisionList(o.context, o.AppsV1WatchAppsV1NamespacedControllerRevisionListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}"] = apps_v1.NewWatchAppsV1NamespacedDaemonSet(o.context, o.AppsV1WatchAppsV1NamespacedDaemonSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/daemonsets"] = apps_v1.NewWatchAppsV1NamespacedDaemonSetList(o.context, o.AppsV1WatchAppsV1NamespacedDaemonSetListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}"] = apps_v1.NewWatchAppsV1NamespacedDeployment(o.context, o.AppsV1WatchAppsV1NamespacedDeploymentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/deployments"] = apps_v1.NewWatchAppsV1NamespacedDeploymentList(o.context, o.AppsV1WatchAppsV1NamespacedDeploymentListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}"] = apps_v1.NewWatchAppsV1NamespacedReplicaSet(o.context, o.AppsV1WatchAppsV1NamespacedReplicaSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/replicasets"] = apps_v1.NewWatchAppsV1NamespacedReplicaSetList(o.context, o.AppsV1WatchAppsV1NamespacedReplicaSetListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}"] = apps_v1.NewWatchAppsV1NamespacedStatefulSet(o.context, o.AppsV1WatchAppsV1NamespacedStatefulSetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/namespaces/{namespace}/statefulsets"] = apps_v1.NewWatchAppsV1NamespacedStatefulSetList(o.context, o.AppsV1WatchAppsV1NamespacedStatefulSetListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/replicasets"] = apps_v1.NewWatchAppsV1ReplicaSetListForAllNamespaces(o.context, o.AppsV1WatchAppsV1ReplicaSetListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/apps/v1/watch/statefulsets"] = apps_v1.NewWatchAppsV1StatefulSetListForAllNamespaces(o.context, o.AppsV1WatchAppsV1StatefulSetListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/watch/horizontalpodautoscalers"] = autoscaling_v1.NewWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(o.context, o.AutoscalingV1WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v1.NewWatchAutoscalingV1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v1.NewWatchAutoscalingV1NamespacedHorizontalPodAutoscalerList(o.context, o.AutoscalingV1WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers"] = autoscaling_v2beta1.NewWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces(o.context, o.AutoscalingV2beta1WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta1.NewWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta1.NewWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList(o.context, o.AutoscalingV2beta1WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers"] = autoscaling_v2beta2.NewWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces(o.context, o.AutoscalingV2beta2WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"] = autoscaling_v2beta2.NewWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler(o.context, o.AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers"] = autoscaling_v2beta2.NewWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList(o.context, o.AutoscalingV2beta2WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/watch/jobs"] = batch_v1.NewWatchBatchV1JobListForAllNamespaces(o.context, o.BatchV1WatchBatchV1JobListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}"] = batch_v1.NewWatchBatchV1NamespacedJob(o.context, o.BatchV1WatchBatchV1NamespacedJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1/watch/namespaces/{namespace}/jobs"] = batch_v1.NewWatchBatchV1NamespacedJobList(o.context, o.BatchV1WatchBatchV1NamespacedJobListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/watch/cronjobs"] = batch_v1beta1.NewWatchBatchV1beta1CronJobListForAllNamespaces(o.context, o.BatchV1beta1WatchBatchV1beta1CronJobListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}"] = batch_v1beta1.NewWatchBatchV1beta1NamespacedCronJob(o.context, o.BatchV1beta1WatchBatchV1beta1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs"] = batch_v1beta1.NewWatchBatchV1beta1NamespacedCronJobList(o.context, o.BatchV1beta1WatchBatchV1beta1NamespacedCronJobListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/watch/cronjobs"] = batch_v2alpha1.NewWatchBatchV2alpha1CronJobListForAllNamespaces(o.context, o.BatchV2alpha1WatchBatchV2alpha1CronJobListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}"] = batch_v2alpha1.NewWatchBatchV2alpha1NamespacedCronJob(o.context, o.BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs"] = batch_v2alpha1.NewWatchBatchV2alpha1NamespacedCronJobList(o.context, o.BatchV2alpha1WatchBatchV2alpha1NamespacedCronJobListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}"] = certificates_v1.NewWatchCertificatesV1CertificateSigningRequest(o.context, o.CertificatesV1WatchCertificatesV1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1/watch/certificatesigningrequests"] = certificates_v1.NewWatchCertificatesV1CertificateSigningRequestList(o.context, o.CertificatesV1WatchCertificatesV1CertificateSigningRequestListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}"] = certificates_v1beta1.NewWatchCertificatesV1beta1CertificateSigningRequest(o.context, o.CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests"] = certificates_v1beta1.NewWatchCertificatesV1beta1CertificateSigningRequestList(o.context, o.CertificatesV1beta1WatchCertificatesV1beta1CertificateSigningRequestListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/watch/leases"] = coordination_v1.NewWatchCoordinationV1LeaseListForAllNamespaces(o.context, o.CoordinationV1WatchCoordinationV1LeaseListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}"] = coordination_v1.NewWatchCoordinationV1NamespacedLease(o.context, o.CoordinationV1WatchCoordinationV1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases"] = coordination_v1.NewWatchCoordinationV1NamespacedLeaseList(o.context, o.CoordinationV1WatchCoordinationV1NamespacedLeaseListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/watch/leases"] = coordination_v1beta1.NewWatchCoordinationV1beta1LeaseListForAllNamespaces(o.context, o.CoordinationV1beta1WatchCoordinationV1beta1LeaseListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}"] = coordination_v1beta1.NewWatchCoordinationV1beta1NamespacedLease(o.context, o.CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases"] = coordination_v1beta1.NewWatchCoordinationV1beta1NamespacedLeaseList(o.context, o.CoordinationV1beta1WatchCoordinationV1beta1NamespacedLeaseListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/configmaps"] = core_v1.NewWatchCoreV1ConfigMapListForAllNamespaces(o.context, o.CoreV1WatchCoreV1ConfigMapListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/endpoints"] = core_v1.NewWatchCoreV1EndpointsListForAllNamespaces(o.context, o.CoreV1WatchCoreV1EndpointsListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/events"] = core_v1.NewWatchCoreV1EventListForAllNamespaces(o.context, o.CoreV1WatchCoreV1EventListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/limitranges"] = core_v1.NewWatchCoreV1LimitRangeListForAllNamespaces(o.context, o.CoreV1WatchCoreV1LimitRangeListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{name}"] = core_v1.NewWatchCoreV1Namespace(o.context, o.CoreV1WatchCoreV1NamespaceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces"] = core_v1.NewWatchCoreV1NamespaceList(o.context, o.CoreV1WatchCoreV1NamespaceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/configmaps/{name}"] = core_v1.NewWatchCoreV1NamespacedConfigMap(o.context, o.CoreV1WatchCoreV1NamespacedConfigMapHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/configmaps"] = core_v1.NewWatchCoreV1NamespacedConfigMapList(o.context, o.CoreV1WatchCoreV1NamespacedConfigMapListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/endpoints/{name}"] = core_v1.NewWatchCoreV1NamespacedEndpoints(o.context, o.CoreV1WatchCoreV1NamespacedEndpointsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/endpoints"] = core_v1.NewWatchCoreV1NamespacedEndpointsList(o.context, o.CoreV1WatchCoreV1NamespacedEndpointsListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/events/{name}"] = core_v1.NewWatchCoreV1NamespacedEvent(o.context, o.CoreV1WatchCoreV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/events"] = core_v1.NewWatchCoreV1NamespacedEventList(o.context, o.CoreV1WatchCoreV1NamespacedEventListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/limitranges/{name}"] = core_v1.NewWatchCoreV1NamespacedLimitRange(o.context, o.CoreV1WatchCoreV1NamespacedLimitRangeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/limitranges"] = core_v1.NewWatchCoreV1NamespacedLimitRangeList(o.context, o.CoreV1WatchCoreV1NamespacedLimitRangeListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}"] = core_v1.NewWatchCoreV1NamespacedPersistentVolumeClaim(o.context, o.CoreV1WatchCoreV1NamespacedPersistentVolumeClaimHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims"] = core_v1.NewWatchCoreV1NamespacedPersistentVolumeClaimList(o.context, o.CoreV1WatchCoreV1NamespacedPersistentVolumeClaimListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/pods/{name}"] = core_v1.NewWatchCoreV1NamespacedPod(o.context, o.CoreV1WatchCoreV1NamespacedPodHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/pods"] = core_v1.NewWatchCoreV1NamespacedPodList(o.context, o.CoreV1WatchCoreV1NamespacedPodListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/podtemplates/{name}"] = core_v1.NewWatchCoreV1NamespacedPodTemplate(o.context, o.CoreV1WatchCoreV1NamespacedPodTemplateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/podtemplates"] = core_v1.NewWatchCoreV1NamespacedPodTemplateList(o.context, o.CoreV1WatchCoreV1NamespacedPodTemplateListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}"] = core_v1.NewWatchCoreV1NamespacedReplicationController(o.context, o.CoreV1WatchCoreV1NamespacedReplicationControllerHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/replicationcontrollers"] = core_v1.NewWatchCoreV1NamespacedReplicationControllerList(o.context, o.CoreV1WatchCoreV1NamespacedReplicationControllerListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}"] = core_v1.NewWatchCoreV1NamespacedResourceQuota(o.context, o.CoreV1WatchCoreV1NamespacedResourceQuotaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/resourcequotas"] = core_v1.NewWatchCoreV1NamespacedResourceQuotaList(o.context, o.CoreV1WatchCoreV1NamespacedResourceQuotaListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/secrets/{name}"] = core_v1.NewWatchCoreV1NamespacedSecret(o.context, o.CoreV1WatchCoreV1NamespacedSecretHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/secrets"] = core_v1.NewWatchCoreV1NamespacedSecretList(o.context, o.CoreV1WatchCoreV1NamespacedSecretListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/services/{name}"] = core_v1.NewWatchCoreV1NamespacedService(o.context, o.CoreV1WatchCoreV1NamespacedServiceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}"] = core_v1.NewWatchCoreV1NamespacedServiceAccount(o.context, o.CoreV1WatchCoreV1NamespacedServiceAccountHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/serviceaccounts"] = core_v1.NewWatchCoreV1NamespacedServiceAccountList(o.context, o.CoreV1WatchCoreV1NamespacedServiceAccountListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/namespaces/{namespace}/services"] = core_v1.NewWatchCoreV1NamespacedServiceList(o.context, o.CoreV1WatchCoreV1NamespacedServiceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/nodes/{name}"] = core_v1.NewWatchCoreV1Node(o.context, o.CoreV1WatchCoreV1NodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/nodes"] = core_v1.NewWatchCoreV1NodeList(o.context, o.CoreV1WatchCoreV1NodeListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/persistentvolumes/{name}"] = core_v1.NewWatchCoreV1PersistentVolume(o.context, o.CoreV1WatchCoreV1PersistentVolumeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/persistentvolumeclaims"] = core_v1.NewWatchCoreV1PersistentVolumeClaimListForAllNamespaces(o.context, o.CoreV1WatchCoreV1PersistentVolumeClaimListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/persistentvolumes"] = core_v1.NewWatchCoreV1PersistentVolumeList(o.context, o.CoreV1WatchCoreV1PersistentVolumeListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/pods"] = core_v1.NewWatchCoreV1PodListForAllNamespaces(o.context, o.CoreV1WatchCoreV1PodListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/podtemplates"] = core_v1.NewWatchCoreV1PodTemplateListForAllNamespaces(o.context, o.CoreV1WatchCoreV1PodTemplateListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/replicationcontrollers"] = core_v1.NewWatchCoreV1ReplicationControllerListForAllNamespaces(o.context, o.CoreV1WatchCoreV1ReplicationControllerListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/resourcequotas"] = core_v1.NewWatchCoreV1ResourceQuotaListForAllNamespaces(o.context, o.CoreV1WatchCoreV1ResourceQuotaListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/secrets"] = core_v1.NewWatchCoreV1SecretListForAllNamespaces(o.context, o.CoreV1WatchCoreV1SecretListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/serviceaccounts"] = core_v1.NewWatchCoreV1ServiceAccountListForAllNamespaces(o.context, o.CoreV1WatchCoreV1ServiceAccountListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/watch/services"] = core_v1.NewWatchCoreV1ServiceListForAllNamespaces(o.context, o.CoreV1WatchCoreV1ServiceListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/watch/endpointslices"] = discovery_v1beta1.NewWatchDiscoveryV1beta1EndpointSliceListForAllNamespaces(o.context, o.DiscoveryV1beta1WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices/{name}"] = discovery_v1beta1.NewWatchDiscoveryV1beta1NamespacedEndpointSlice(o.context, o.DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices"] = discovery_v1beta1.NewWatchDiscoveryV1beta1NamespacedEndpointSliceList(o.context, o.DiscoveryV1beta1WatchDiscoveryV1beta1NamespacedEndpointSliceListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/watch/events"] = events_v1.NewWatchEventsV1EventListForAllNamespaces(o.context, o.EventsV1WatchEventsV1EventListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}"] = events_v1.NewWatchEventsV1NamespacedEvent(o.context, o.EventsV1WatchEventsV1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events"] = events_v1.NewWatchEventsV1NamespacedEventList(o.context, o.EventsV1WatchEventsV1NamespacedEventListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/watch/events"] = events_v1beta1.NewWatchEventsV1beta1EventListForAllNamespaces(o.context, o.EventsV1beta1WatchEventsV1beta1EventListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}"] = events_v1beta1.NewWatchEventsV1beta1NamespacedEvent(o.context, o.EventsV1beta1WatchEventsV1beta1NamespacedEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events"] = events_v1beta1.NewWatchEventsV1beta1NamespacedEventList(o.context, o.EventsV1beta1WatchEventsV1beta1NamespacedEventListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/watch/ingresses"] = extensions_v1beta1.NewWatchExtensionsV1beta1IngressListForAllNamespaces(o.context, o.ExtensionsV1beta1WatchExtensionsV1beta1IngressListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}"] = extensions_v1beta1.NewWatchExtensionsV1beta1NamespacedIngress(o.context, o.ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses"] = extensions_v1beta1.NewWatchExtensionsV1beta1NamespacedIngressList(o.context, o.ExtensionsV1beta1WatchExtensionsV1beta1NamespacedIngressListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas/{name}"] = flowcontrol_apiserver_v1alpha1.NewWatchFlowcontrolApiserverV1alpha1FlowSchema(o.context, o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas"] = flowcontrol_apiserver_v1alpha1.NewWatchFlowcontrolApiserverV1alpha1FlowSchemaList(o.context, o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1FlowSchemaListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations/{name}"] = flowcontrol_apiserver_v1alpha1.NewWatchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(o.context, o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations"] = flowcontrol_apiserver_v1alpha1.NewWatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList(o.context, o.FlowcontrolApiserverV1alpha1WatchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/ingressclasses/{name}"] = networking_v1.NewWatchNetworkingV1IngressClass(o.context, o.NetworkingV1WatchNetworkingV1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/ingressclasses"] = networking_v1.NewWatchNetworkingV1IngressClassList(o.context, o.NetworkingV1WatchNetworkingV1IngressClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/ingresses"] = networking_v1.NewWatchNetworkingV1IngressListForAllNamespaces(o.context, o.NetworkingV1WatchNetworkingV1IngressListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}"] = networking_v1.NewWatchNetworkingV1NamespacedIngress(o.context, o.NetworkingV1WatchNetworkingV1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses"] = networking_v1.NewWatchNetworkingV1NamespacedIngressList(o.context, o.NetworkingV1WatchNetworkingV1NamespacedIngressListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}"] = networking_v1.NewWatchNetworkingV1NamespacedNetworkPolicy(o.context, o.NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies"] = networking_v1.NewWatchNetworkingV1NamespacedNetworkPolicyList(o.context, o.NetworkingV1WatchNetworkingV1NamespacedNetworkPolicyListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1/watch/networkpolicies"] = networking_v1.NewWatchNetworkingV1NetworkPolicyListForAllNamespaces(o.context, o.NetworkingV1WatchNetworkingV1NetworkPolicyListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/watch/ingressclasses/{name}"] = networking_v1beta1.NewWatchNetworkingV1beta1IngressClass(o.context, o.NetworkingV1beta1WatchNetworkingV1beta1IngressClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/watch/ingressclasses"] = networking_v1beta1.NewWatchNetworkingV1beta1IngressClassList(o.context, o.NetworkingV1beta1WatchNetworkingV1beta1IngressClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/watch/ingresses"] = networking_v1beta1.NewWatchNetworkingV1beta1IngressListForAllNamespaces(o.context, o.NetworkingV1beta1WatchNetworkingV1beta1IngressListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses/{name}"] = networking_v1beta1.NewWatchNetworkingV1beta1NamespacedIngress(o.context, o.NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses"] = networking_v1beta1.NewWatchNetworkingV1beta1NamespacedIngressList(o.context, o.NetworkingV1beta1WatchNetworkingV1beta1NamespacedIngressListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}"] = node_v1alpha1.NewWatchNodeV1alpha1RuntimeClass(o.context, o.NodeV1alpha1WatchNodeV1alpha1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1alpha1/watch/runtimeclasses"] = node_v1alpha1.NewWatchNodeV1alpha1RuntimeClassList(o.context, o.NodeV1alpha1WatchNodeV1alpha1RuntimeClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}"] = node_v1beta1.NewWatchNodeV1beta1RuntimeClass(o.context, o.NodeV1beta1WatchNodeV1beta1RuntimeClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/node.k8s.io/v1beta1/watch/runtimeclasses"] = node_v1beta1.NewWatchNodeV1beta1RuntimeClassList(o.context, o.NodeV1beta1WatchNodeV1beta1RuntimeClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}"] = policy_v1beta1.NewWatchPolicyV1beta1NamespacedPodDisruptionBudget(o.context, o.PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets"] = policy_v1beta1.NewWatchPolicyV1beta1NamespacedPodDisruptionBudgetList(o.context, o.PolicyV1beta1WatchPolicyV1beta1NamespacedPodDisruptionBudgetListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/watch/poddisruptionbudgets"] = policy_v1beta1.NewWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces(o.context, o.PolicyV1beta1WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/watch/podsecuritypolicies/{name}"] = policy_v1beta1.NewWatchPolicyV1beta1PodSecurityPolicy(o.context, o.PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/policy/v1beta1/watch/podsecuritypolicies"] = policy_v1beta1.NewWatchPolicyV1beta1PodSecurityPolicyList(o.context, o.PolicyV1beta1WatchPolicyV1beta1PodSecurityPolicyListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1ClusterRole(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1ClusterRoleBinding(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1ClusterRoleBindingList(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/clusterroles"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1ClusterRoleList(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1ClusterRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1NamespacedRole(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1NamespacedRoleBindingList(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1NamespacedRoleList(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1NamespacedRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/rolebindings"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1RoleBindingListForAllNamespaces(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1RoleBindingListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1/watch/roles"] = rbac_authorization_v1.NewWatchRbacAuthorizationV1RoleListForAllNamespaces(o.context, o.RbacAuthorizationV1WatchRbacAuthorizationV1RoleListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1ClusterRole(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1ClusterRoleBinding(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1ClusterRoleBindingList(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1ClusterRoleList(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1ClusterRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1NamespacedRole(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1NamespacedRoleBindingList(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1NamespacedRoleList(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1NamespacedRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleBindingListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles"] = rbac_authorization_v1alpha1.NewWatchRbacAuthorizationV1alpha1RoleListForAllNamespaces(o.context, o.RbacAuthorizationV1alpha1WatchRbacAuthorizationV1alpha1RoleListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1ClusterRole(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1ClusterRoleBinding(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1ClusterRoleBindingList(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1ClusterRoleList(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1ClusterRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1NamespacedRole(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1NamespacedRoleBinding(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1NamespacedRoleBindingList(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleBindingListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1NamespacedRoleList(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1NamespacedRoleListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1RoleBindingListForAllNamespaces(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleBindingListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/rbac.authorization.k8s.io/v1beta1/watch/roles"] = rbac_authorization_v1beta1.NewWatchRbacAuthorizationV1beta1RoleListForAllNamespaces(o.context, o.RbacAuthorizationV1beta1WatchRbacAuthorizationV1beta1RoleListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}"] = scheduling_v1.NewWatchSchedulingV1PriorityClass(o.context, o.SchedulingV1WatchSchedulingV1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1/watch/priorityclasses"] = scheduling_v1.NewWatchSchedulingV1PriorityClassList(o.context, o.SchedulingV1WatchSchedulingV1PriorityClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/{name}"] = scheduling_v1alpha1.NewWatchSchedulingV1alpha1PriorityClass(o.context, o.SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses"] = scheduling_v1alpha1.NewWatchSchedulingV1alpha1PriorityClassList(o.context, o.SchedulingV1alpha1WatchSchedulingV1alpha1PriorityClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}"] = scheduling_v1beta1.NewWatchSchedulingV1beta1PriorityClass(o.context, o.SchedulingV1beta1WatchSchedulingV1beta1PriorityClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses"] = scheduling_v1beta1.NewWatchSchedulingV1beta1PriorityClassList(o.context, o.SchedulingV1beta1WatchSchedulingV1beta1PriorityClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}"] = settings_v1alpha1.NewWatchSettingsV1alpha1NamespacedPodPreset(o.context, o.SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets"] = settings_v1alpha1.NewWatchSettingsV1alpha1NamespacedPodPresetList(o.context, o.SettingsV1alpha1WatchSettingsV1alpha1NamespacedPodPresetListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/settings.k8s.io/v1alpha1/watch/podpresets"] = settings_v1alpha1.NewWatchSettingsV1alpha1PodPresetListForAllNamespaces(o.context, o.SettingsV1alpha1WatchSettingsV1alpha1PodPresetListForAllNamespacesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/csidrivers/{name}"] = storage_v1.NewWatchStorageV1CSIDriver(o.context, o.StorageV1WatchStorageV1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/csidrivers"] = storage_v1.NewWatchStorageV1CSIDriverList(o.context, o.StorageV1WatchStorageV1CSIDriverListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/csinodes/{name}"] = storage_v1.NewWatchStorageV1CSINode(o.context, o.StorageV1WatchStorageV1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/csinodes"] = storage_v1.NewWatchStorageV1CSINodeList(o.context, o.StorageV1WatchStorageV1CSINodeListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/storageclasses/{name}"] = storage_v1.NewWatchStorageV1StorageClass(o.context, o.StorageV1WatchStorageV1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/storageclasses"] = storage_v1.NewWatchStorageV1StorageClassList(o.context, o.StorageV1WatchStorageV1StorageClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/volumeattachments/{name}"] = storage_v1.NewWatchStorageV1VolumeAttachment(o.context, o.StorageV1WatchStorageV1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1/watch/volumeattachments"] = storage_v1.NewWatchStorageV1VolumeAttachmentList(o.context, o.StorageV1WatchStorageV1VolumeAttachmentListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1alpha1/watch/volumeattachments/{name}"] = storage_v1alpha1.NewWatchStorageV1alpha1VolumeAttachment(o.context, o.StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1alpha1/watch/volumeattachments"] = storage_v1alpha1.NewWatchStorageV1alpha1VolumeAttachmentList(o.context, o.StorageV1alpha1WatchStorageV1alpha1VolumeAttachmentListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/csidrivers/{name}"] = storage_v1beta1.NewWatchStorageV1beta1CSIDriver(o.context, o.StorageV1beta1WatchStorageV1beta1CSIDriverHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/csidrivers"] = storage_v1beta1.NewWatchStorageV1beta1CSIDriverList(o.context, o.StorageV1beta1WatchStorageV1beta1CSIDriverListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/csinodes/{name}"] = storage_v1beta1.NewWatchStorageV1beta1CSINode(o.context, o.StorageV1beta1WatchStorageV1beta1CSINodeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/csinodes"] = storage_v1beta1.NewWatchStorageV1beta1CSINodeList(o.context, o.StorageV1beta1WatchStorageV1beta1CSINodeListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}"] = storage_v1beta1.NewWatchStorageV1beta1StorageClass(o.context, o.StorageV1beta1WatchStorageV1beta1StorageClassHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/storageclasses"] = storage_v1beta1.NewWatchStorageV1beta1StorageClassList(o.context, o.StorageV1beta1WatchStorageV1beta1StorageClassListHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}"] = storage_v1beta1.NewWatchStorageV1beta1VolumeAttachment(o.context, o.StorageV1beta1WatchStorageV1beta1VolumeAttachmentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/apis/storage.k8s.io/v1beta1/watch/volumeattachments"] = storage_v1beta1.NewWatchStorageV1beta1VolumeAttachmentList(o.context, o.StorageV1beta1WatchStorageV1beta1VolumeAttachmentListHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KubernetesAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KubernetesAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KubernetesAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KubernetesAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *KubernetesAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
