// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListRbacAuthorizationV1RoleForAllNamespacesHandlerFunc turns a function with the right signature into a list rbac authorization v1 role for all namespaces handler
type ListRbacAuthorizationV1RoleForAllNamespacesHandlerFunc func(ListRbacAuthorizationV1RoleForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListRbacAuthorizationV1RoleForAllNamespacesHandlerFunc) Handle(params ListRbacAuthorizationV1RoleForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListRbacAuthorizationV1RoleForAllNamespacesHandler interface for that can handle valid list rbac authorization v1 role for all namespaces params
type ListRbacAuthorizationV1RoleForAllNamespacesHandler interface {
	Handle(ListRbacAuthorizationV1RoleForAllNamespacesParams) middleware.Responder
}

// NewListRbacAuthorizationV1RoleForAllNamespaces creates a new http.Handler for the list rbac authorization v1 role for all namespaces operation
func NewListRbacAuthorizationV1RoleForAllNamespaces(ctx *middleware.Context, handler ListRbacAuthorizationV1RoleForAllNamespacesHandler) *ListRbacAuthorizationV1RoleForAllNamespaces {
	return &ListRbacAuthorizationV1RoleForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListRbacAuthorizationV1RoleForAllNamespaces swagger:route GET /apis/rbac.authorization.k8s.io/v1/roles rbacAuthorization_v1 listRbacAuthorizationV1RoleForAllNamespaces

list or watch objects of kind Role

*/
type ListRbacAuthorizationV1RoleForAllNamespaces struct {
	Context *middleware.Context
	Handler ListRbacAuthorizationV1RoleForAllNamespacesHandler
}

func (o *ListRbacAuthorizationV1RoleForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListRbacAuthorizationV1RoleForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
