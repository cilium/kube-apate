// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/cilium/kube-apate/api/k8s/v1/models"
)

// CreateRbacAuthorizationV1NamespacedRoleOKCode is the HTTP code returned for type CreateRbacAuthorizationV1NamespacedRoleOK
const CreateRbacAuthorizationV1NamespacedRoleOKCode int = 200

/*CreateRbacAuthorizationV1NamespacedRoleOK OK

swagger:response createRbacAuthorizationV1NamespacedRoleOK
*/
type CreateRbacAuthorizationV1NamespacedRoleOK struct {

	/*
	  In: Body
	*/
	Payload *models.IoK8sAPIRbacV1Role `json:"body,omitempty"`
}

// NewCreateRbacAuthorizationV1NamespacedRoleOK creates CreateRbacAuthorizationV1NamespacedRoleOK with default headers values
func NewCreateRbacAuthorizationV1NamespacedRoleOK() *CreateRbacAuthorizationV1NamespacedRoleOK {

	return &CreateRbacAuthorizationV1NamespacedRoleOK{}
}

// WithPayload adds the payload to the create rbac authorization v1 namespaced role o k response
func (o *CreateRbacAuthorizationV1NamespacedRoleOK) WithPayload(payload *models.IoK8sAPIRbacV1Role) *CreateRbacAuthorizationV1NamespacedRoleOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create rbac authorization v1 namespaced role o k response
func (o *CreateRbacAuthorizationV1NamespacedRoleOK) SetPayload(payload *models.IoK8sAPIRbacV1Role) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRbacAuthorizationV1NamespacedRoleOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRbacAuthorizationV1NamespacedRoleCreatedCode is the HTTP code returned for type CreateRbacAuthorizationV1NamespacedRoleCreated
const CreateRbacAuthorizationV1NamespacedRoleCreatedCode int = 201

/*CreateRbacAuthorizationV1NamespacedRoleCreated Created

swagger:response createRbacAuthorizationV1NamespacedRoleCreated
*/
type CreateRbacAuthorizationV1NamespacedRoleCreated struct {

	/*
	  In: Body
	*/
	Payload *models.IoK8sAPIRbacV1Role `json:"body,omitempty"`
}

// NewCreateRbacAuthorizationV1NamespacedRoleCreated creates CreateRbacAuthorizationV1NamespacedRoleCreated with default headers values
func NewCreateRbacAuthorizationV1NamespacedRoleCreated() *CreateRbacAuthorizationV1NamespacedRoleCreated {

	return &CreateRbacAuthorizationV1NamespacedRoleCreated{}
}

// WithPayload adds the payload to the create rbac authorization v1 namespaced role created response
func (o *CreateRbacAuthorizationV1NamespacedRoleCreated) WithPayload(payload *models.IoK8sAPIRbacV1Role) *CreateRbacAuthorizationV1NamespacedRoleCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create rbac authorization v1 namespaced role created response
func (o *CreateRbacAuthorizationV1NamespacedRoleCreated) SetPayload(payload *models.IoK8sAPIRbacV1Role) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRbacAuthorizationV1NamespacedRoleCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRbacAuthorizationV1NamespacedRoleAcceptedCode is the HTTP code returned for type CreateRbacAuthorizationV1NamespacedRoleAccepted
const CreateRbacAuthorizationV1NamespacedRoleAcceptedCode int = 202

/*CreateRbacAuthorizationV1NamespacedRoleAccepted Accepted

swagger:response createRbacAuthorizationV1NamespacedRoleAccepted
*/
type CreateRbacAuthorizationV1NamespacedRoleAccepted struct {

	/*
	  In: Body
	*/
	Payload *models.IoK8sAPIRbacV1Role `json:"body,omitempty"`
}

// NewCreateRbacAuthorizationV1NamespacedRoleAccepted creates CreateRbacAuthorizationV1NamespacedRoleAccepted with default headers values
func NewCreateRbacAuthorizationV1NamespacedRoleAccepted() *CreateRbacAuthorizationV1NamespacedRoleAccepted {

	return &CreateRbacAuthorizationV1NamespacedRoleAccepted{}
}

// WithPayload adds the payload to the create rbac authorization v1 namespaced role accepted response
func (o *CreateRbacAuthorizationV1NamespacedRoleAccepted) WithPayload(payload *models.IoK8sAPIRbacV1Role) *CreateRbacAuthorizationV1NamespacedRoleAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create rbac authorization v1 namespaced role accepted response
func (o *CreateRbacAuthorizationV1NamespacedRoleAccepted) SetPayload(payload *models.IoK8sAPIRbacV1Role) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateRbacAuthorizationV1NamespacedRoleAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateRbacAuthorizationV1NamespacedRoleUnauthorizedCode is the HTTP code returned for type CreateRbacAuthorizationV1NamespacedRoleUnauthorized
const CreateRbacAuthorizationV1NamespacedRoleUnauthorizedCode int = 401

/*CreateRbacAuthorizationV1NamespacedRoleUnauthorized Unauthorized

swagger:response createRbacAuthorizationV1NamespacedRoleUnauthorized
*/
type CreateRbacAuthorizationV1NamespacedRoleUnauthorized struct {
}

// NewCreateRbacAuthorizationV1NamespacedRoleUnauthorized creates CreateRbacAuthorizationV1NamespacedRoleUnauthorized with default headers values
func NewCreateRbacAuthorizationV1NamespacedRoleUnauthorized() *CreateRbacAuthorizationV1NamespacedRoleUnauthorized {

	return &CreateRbacAuthorizationV1NamespacedRoleUnauthorized{}
}

// WriteResponse to the client
func (o *CreateRbacAuthorizationV1NamespacedRoleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}
