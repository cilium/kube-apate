// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandlerFunc turns a function with the right signature into a delete rbac authorization v1 collection cluster role binding handler
type DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandlerFunc func(DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandlerFunc) Handle(params DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) middleware.Responder {
	return fn(params)
}

// DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler interface for that can handle valid delete rbac authorization v1 collection cluster role binding params
type DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler interface {
	Handle(DeleteRbacAuthorizationV1CollectionClusterRoleBindingParams) middleware.Responder
}

// NewDeleteRbacAuthorizationV1CollectionClusterRoleBinding creates a new http.Handler for the delete rbac authorization v1 collection cluster role binding operation
func NewDeleteRbacAuthorizationV1CollectionClusterRoleBinding(ctx *middleware.Context, handler DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler) *DeleteRbacAuthorizationV1CollectionClusterRoleBinding {
	return &DeleteRbacAuthorizationV1CollectionClusterRoleBinding{Context: ctx, Handler: handler}
}

/*DeleteRbacAuthorizationV1CollectionClusterRoleBinding swagger:route DELETE /apis/rbac.authorization.k8s.io/v1/clusterrolebindings rbacAuthorization_v1 deleteRbacAuthorizationV1CollectionClusterRoleBinding

delete collection of ClusterRoleBinding

*/
type DeleteRbacAuthorizationV1CollectionClusterRoleBinding struct {
	Context *middleware.Context
	Handler DeleteRbacAuthorizationV1CollectionClusterRoleBindingHandler
}

func (o *DeleteRbacAuthorizationV1CollectionClusterRoleBinding) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteRbacAuthorizationV1CollectionClusterRoleBindingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
