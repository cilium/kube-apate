// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteRbacAuthorizationV1NamespacedRoleBindingHandlerFunc turns a function with the right signature into a delete rbac authorization v1 namespaced role binding handler
type DeleteRbacAuthorizationV1NamespacedRoleBindingHandlerFunc func(DeleteRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRbacAuthorizationV1NamespacedRoleBindingHandlerFunc) Handle(params DeleteRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder {
	return fn(params)
}

// DeleteRbacAuthorizationV1NamespacedRoleBindingHandler interface for that can handle valid delete rbac authorization v1 namespaced role binding params
type DeleteRbacAuthorizationV1NamespacedRoleBindingHandler interface {
	Handle(DeleteRbacAuthorizationV1NamespacedRoleBindingParams) middleware.Responder
}

// NewDeleteRbacAuthorizationV1NamespacedRoleBinding creates a new http.Handler for the delete rbac authorization v1 namespaced role binding operation
func NewDeleteRbacAuthorizationV1NamespacedRoleBinding(ctx *middleware.Context, handler DeleteRbacAuthorizationV1NamespacedRoleBindingHandler) *DeleteRbacAuthorizationV1NamespacedRoleBinding {
	return &DeleteRbacAuthorizationV1NamespacedRoleBinding{Context: ctx, Handler: handler}
}

/*DeleteRbacAuthorizationV1NamespacedRoleBinding swagger:route DELETE /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name} rbacAuthorization_v1 deleteRbacAuthorizationV1NamespacedRoleBinding

delete a RoleBinding

*/
type DeleteRbacAuthorizationV1NamespacedRoleBinding struct {
	Context *middleware.Context
	Handler DeleteRbacAuthorizationV1NamespacedRoleBindingHandler
}

func (o *DeleteRbacAuthorizationV1NamespacedRoleBinding) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteRbacAuthorizationV1NamespacedRoleBindingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
