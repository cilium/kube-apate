// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package cilium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadApisCiliumIoV2CiliumNodeHandlerFunc turns a function with the right signature into a read apis cilium io v2 cilium node handler
type ReadApisCiliumIoV2CiliumNodeHandlerFunc func(ReadApisCiliumIoV2CiliumNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadApisCiliumIoV2CiliumNodeHandlerFunc) Handle(params ReadApisCiliumIoV2CiliumNodeParams) middleware.Responder {
	return fn(params)
}

// ReadApisCiliumIoV2CiliumNodeHandler interface for that can handle valid read apis cilium io v2 cilium node params
type ReadApisCiliumIoV2CiliumNodeHandler interface {
	Handle(ReadApisCiliumIoV2CiliumNodeParams) middleware.Responder
}

// NewReadApisCiliumIoV2CiliumNode creates a new http.Handler for the read apis cilium io v2 cilium node operation
func NewReadApisCiliumIoV2CiliumNode(ctx *middleware.Context, handler ReadApisCiliumIoV2CiliumNodeHandler) *ReadApisCiliumIoV2CiliumNode {
	return &ReadApisCiliumIoV2CiliumNode{Context: ctx, Handler: handler}
}

/*ReadApisCiliumIoV2CiliumNode swagger:route GET /apis/cilium.io/v2/ciliumnodes/{name} cilium readApisCiliumIoV2CiliumNode

ReadApisCiliumIoV2CiliumNode read apis cilium io v2 cilium node API

*/
type ReadApisCiliumIoV2CiliumNode struct {
	Context *middleware.Context
	Handler ReadApisCiliumIoV2CiliumNodeHandler
}

func (o *ReadApisCiliumIoV2CiliumNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadApisCiliumIoV2CiliumNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
