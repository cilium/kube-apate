// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package cilium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListApisCiliumIoV2CiliumNodesHandlerFunc turns a function with the right signature into a list apis cilium io v2 cilium nodes handler
type ListApisCiliumIoV2CiliumNodesHandlerFunc func(ListApisCiliumIoV2CiliumNodesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListApisCiliumIoV2CiliumNodesHandlerFunc) Handle(params ListApisCiliumIoV2CiliumNodesParams) middleware.Responder {
	return fn(params)
}

// ListApisCiliumIoV2CiliumNodesHandler interface for that can handle valid list apis cilium io v2 cilium nodes params
type ListApisCiliumIoV2CiliumNodesHandler interface {
	Handle(ListApisCiliumIoV2CiliumNodesParams) middleware.Responder
}

// NewListApisCiliumIoV2CiliumNodes creates a new http.Handler for the list apis cilium io v2 cilium nodes operation
func NewListApisCiliumIoV2CiliumNodes(ctx *middleware.Context, handler ListApisCiliumIoV2CiliumNodesHandler) *ListApisCiliumIoV2CiliumNodes {
	return &ListApisCiliumIoV2CiliumNodes{Context: ctx, Handler: handler}
}

/*ListApisCiliumIoV2CiliumNodes swagger:route GET /apis/cilium.io/v2/ciliumnodes cilium listApisCiliumIoV2CiliumNodes

ListApisCiliumIoV2CiliumNodes list apis cilium io v2 cilium nodes API

*/
type ListApisCiliumIoV2CiliumNodes struct {
	Context *middleware.Context
	Handler ListApisCiliumIoV2CiliumNodesHandler
}

func (o *ListApisCiliumIoV2CiliumNodes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListApisCiliumIoV2CiliumNodesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
