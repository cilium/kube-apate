// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package cilium

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteApisCiliumIoV2CiliumEndpointHandlerFunc turns a function with the right signature into a delete apis cilium io v2 cilium endpoint handler
type DeleteApisCiliumIoV2CiliumEndpointHandlerFunc func(DeleteApisCiliumIoV2CiliumEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteApisCiliumIoV2CiliumEndpointHandlerFunc) Handle(params DeleteApisCiliumIoV2CiliumEndpointParams) middleware.Responder {
	return fn(params)
}

// DeleteApisCiliumIoV2CiliumEndpointHandler interface for that can handle valid delete apis cilium io v2 cilium endpoint params
type DeleteApisCiliumIoV2CiliumEndpointHandler interface {
	Handle(DeleteApisCiliumIoV2CiliumEndpointParams) middleware.Responder
}

// NewDeleteApisCiliumIoV2CiliumEndpoint creates a new http.Handler for the delete apis cilium io v2 cilium endpoint operation
func NewDeleteApisCiliumIoV2CiliumEndpoint(ctx *middleware.Context, handler DeleteApisCiliumIoV2CiliumEndpointHandler) *DeleteApisCiliumIoV2CiliumEndpoint {
	return &DeleteApisCiliumIoV2CiliumEndpoint{Context: ctx, Handler: handler}
}

/*DeleteApisCiliumIoV2CiliumEndpoint swagger:route DELETE /apis/cilium.io/v2/namespaces/{namespace}/ciliumendpoints/{name} cilium deleteApisCiliumIoV2CiliumEndpoint

DeleteApisCiliumIoV2CiliumEndpoint delete apis cilium io v2 cilium endpoint API

*/
type DeleteApisCiliumIoV2CiliumEndpoint struct {
	Context *middleware.Context
	Handler DeleteApisCiliumIoV2CiliumEndpointHandler
}

func (o *DeleteApisCiliumIoV2CiliumEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteApisCiliumIoV2CiliumEndpointParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
