// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package batch_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateBatchV1beta1NamespacedCronJobHandlerFunc turns a function with the right signature into a create batch v1beta1 namespaced cron job handler
type CreateBatchV1beta1NamespacedCronJobHandlerFunc func(CreateBatchV1beta1NamespacedCronJobParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBatchV1beta1NamespacedCronJobHandlerFunc) Handle(params CreateBatchV1beta1NamespacedCronJobParams) middleware.Responder {
	return fn(params)
}

// CreateBatchV1beta1NamespacedCronJobHandler interface for that can handle valid create batch v1beta1 namespaced cron job params
type CreateBatchV1beta1NamespacedCronJobHandler interface {
	Handle(CreateBatchV1beta1NamespacedCronJobParams) middleware.Responder
}

// NewCreateBatchV1beta1NamespacedCronJob creates a new http.Handler for the create batch v1beta1 namespaced cron job operation
func NewCreateBatchV1beta1NamespacedCronJob(ctx *middleware.Context, handler CreateBatchV1beta1NamespacedCronJobHandler) *CreateBatchV1beta1NamespacedCronJob {
	return &CreateBatchV1beta1NamespacedCronJob{Context: ctx, Handler: handler}
}

/*CreateBatchV1beta1NamespacedCronJob swagger:route POST /apis/batch/v1beta1/namespaces/{namespace}/cronjobs batch_v1beta1 createBatchV1beta1NamespacedCronJob

create a CronJob

*/
type CreateBatchV1beta1NamespacedCronJob struct {
	Context *middleware.Context
	Handler CreateBatchV1beta1NamespacedCronJobHandler
}

func (o *CreateBatchV1beta1NamespacedCronJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateBatchV1beta1NamespacedCronJobParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
