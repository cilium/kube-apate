// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadCertificatesV1CertificateSigningRequestApprovalHandlerFunc turns a function with the right signature into a read certificates v1 certificate signing request approval handler
type ReadCertificatesV1CertificateSigningRequestApprovalHandlerFunc func(ReadCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadCertificatesV1CertificateSigningRequestApprovalHandlerFunc) Handle(params ReadCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder {
	return fn(params)
}

// ReadCertificatesV1CertificateSigningRequestApprovalHandler interface for that can handle valid read certificates v1 certificate signing request approval params
type ReadCertificatesV1CertificateSigningRequestApprovalHandler interface {
	Handle(ReadCertificatesV1CertificateSigningRequestApprovalParams) middleware.Responder
}

// NewReadCertificatesV1CertificateSigningRequestApproval creates a new http.Handler for the read certificates v1 certificate signing request approval operation
func NewReadCertificatesV1CertificateSigningRequestApproval(ctx *middleware.Context, handler ReadCertificatesV1CertificateSigningRequestApprovalHandler) *ReadCertificatesV1CertificateSigningRequestApproval {
	return &ReadCertificatesV1CertificateSigningRequestApproval{Context: ctx, Handler: handler}
}

/*ReadCertificatesV1CertificateSigningRequestApproval swagger:route GET /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval certificates_v1 readCertificatesV1CertificateSigningRequestApproval

read approval of the specified CertificateSigningRequest

*/
type ReadCertificatesV1CertificateSigningRequestApproval struct {
	Context *middleware.Context
	Handler ReadCertificatesV1CertificateSigningRequestApprovalHandler
}

func (o *ReadCertificatesV1CertificateSigningRequestApproval) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadCertificatesV1CertificateSigningRequestApprovalParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
