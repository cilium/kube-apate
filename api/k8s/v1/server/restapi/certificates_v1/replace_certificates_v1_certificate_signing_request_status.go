// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceCertificatesV1CertificateSigningRequestStatusHandlerFunc turns a function with the right signature into a replace certificates v1 certificate signing request status handler
type ReplaceCertificatesV1CertificateSigningRequestStatusHandlerFunc func(ReplaceCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceCertificatesV1CertificateSigningRequestStatusHandlerFunc) Handle(params ReplaceCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder {
	return fn(params)
}

// ReplaceCertificatesV1CertificateSigningRequestStatusHandler interface for that can handle valid replace certificates v1 certificate signing request status params
type ReplaceCertificatesV1CertificateSigningRequestStatusHandler interface {
	Handle(ReplaceCertificatesV1CertificateSigningRequestStatusParams) middleware.Responder
}

// NewReplaceCertificatesV1CertificateSigningRequestStatus creates a new http.Handler for the replace certificates v1 certificate signing request status operation
func NewReplaceCertificatesV1CertificateSigningRequestStatus(ctx *middleware.Context, handler ReplaceCertificatesV1CertificateSigningRequestStatusHandler) *ReplaceCertificatesV1CertificateSigningRequestStatus {
	return &ReplaceCertificatesV1CertificateSigningRequestStatus{Context: ctx, Handler: handler}
}

/*ReplaceCertificatesV1CertificateSigningRequestStatus swagger:route PUT /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status certificates_v1 replaceCertificatesV1CertificateSigningRequestStatus

replace status of the specified CertificateSigningRequest

*/
type ReplaceCertificatesV1CertificateSigningRequestStatus struct {
	Context *middleware.Context
	Handler ReplaceCertificatesV1CertificateSigningRequestStatusHandler
}

func (o *ReplaceCertificatesV1CertificateSigningRequestStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceCertificatesV1CertificateSigningRequestStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
