// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package certificates_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchCertificatesV1CertificateSigningRequestListHandlerFunc turns a function with the right signature into a watch certificates v1 certificate signing request list handler
type WatchCertificatesV1CertificateSigningRequestListHandlerFunc func(WatchCertificatesV1CertificateSigningRequestListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchCertificatesV1CertificateSigningRequestListHandlerFunc) Handle(params WatchCertificatesV1CertificateSigningRequestListParams) middleware.Responder {
	return fn(params)
}

// WatchCertificatesV1CertificateSigningRequestListHandler interface for that can handle valid watch certificates v1 certificate signing request list params
type WatchCertificatesV1CertificateSigningRequestListHandler interface {
	Handle(WatchCertificatesV1CertificateSigningRequestListParams) middleware.Responder
}

// NewWatchCertificatesV1CertificateSigningRequestList creates a new http.Handler for the watch certificates v1 certificate signing request list operation
func NewWatchCertificatesV1CertificateSigningRequestList(ctx *middleware.Context, handler WatchCertificatesV1CertificateSigningRequestListHandler) *WatchCertificatesV1CertificateSigningRequestList {
	return &WatchCertificatesV1CertificateSigningRequestList{Context: ctx, Handler: handler}
}

/*WatchCertificatesV1CertificateSigningRequestList swagger:route GET /apis/certificates.k8s.io/v1/watch/certificatesigningrequests certificates_v1 watchCertificatesV1CertificateSigningRequestList

watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchCertificatesV1CertificateSigningRequestList struct {
	Context *middleware.Context
	Handler WatchCertificatesV1CertificateSigningRequestListHandler
}

func (o *WatchCertificatesV1CertificateSigningRequestList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchCertificatesV1CertificateSigningRequestListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
