// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package extensions_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListExtensionsV1beta1IngressForAllNamespacesHandlerFunc turns a function with the right signature into a list extensions v1beta1 ingress for all namespaces handler
type ListExtensionsV1beta1IngressForAllNamespacesHandlerFunc func(ListExtensionsV1beta1IngressForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListExtensionsV1beta1IngressForAllNamespacesHandlerFunc) Handle(params ListExtensionsV1beta1IngressForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// ListExtensionsV1beta1IngressForAllNamespacesHandler interface for that can handle valid list extensions v1beta1 ingress for all namespaces params
type ListExtensionsV1beta1IngressForAllNamespacesHandler interface {
	Handle(ListExtensionsV1beta1IngressForAllNamespacesParams) middleware.Responder
}

// NewListExtensionsV1beta1IngressForAllNamespaces creates a new http.Handler for the list extensions v1beta1 ingress for all namespaces operation
func NewListExtensionsV1beta1IngressForAllNamespaces(ctx *middleware.Context, handler ListExtensionsV1beta1IngressForAllNamespacesHandler) *ListExtensionsV1beta1IngressForAllNamespaces {
	return &ListExtensionsV1beta1IngressForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListExtensionsV1beta1IngressForAllNamespaces swagger:route GET /apis/extensions/v1beta1/ingresses extensions_v1beta1 listExtensionsV1beta1IngressForAllNamespaces

list or watch objects of kind Ingress

*/
type ListExtensionsV1beta1IngressForAllNamespaces struct {
	Context *middleware.Context
	Handler ListExtensionsV1beta1IngressForAllNamespacesHandler
}

func (o *ListExtensionsV1beta1IngressForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListExtensionsV1beta1IngressForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
