// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package extensions_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateExtensionsV1beta1NamespacedIngressHandlerFunc turns a function with the right signature into a create extensions v1beta1 namespaced ingress handler
type CreateExtensionsV1beta1NamespacedIngressHandlerFunc func(CreateExtensionsV1beta1NamespacedIngressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateExtensionsV1beta1NamespacedIngressHandlerFunc) Handle(params CreateExtensionsV1beta1NamespacedIngressParams) middleware.Responder {
	return fn(params)
}

// CreateExtensionsV1beta1NamespacedIngressHandler interface for that can handle valid create extensions v1beta1 namespaced ingress params
type CreateExtensionsV1beta1NamespacedIngressHandler interface {
	Handle(CreateExtensionsV1beta1NamespacedIngressParams) middleware.Responder
}

// NewCreateExtensionsV1beta1NamespacedIngress creates a new http.Handler for the create extensions v1beta1 namespaced ingress operation
func NewCreateExtensionsV1beta1NamespacedIngress(ctx *middleware.Context, handler CreateExtensionsV1beta1NamespacedIngressHandler) *CreateExtensionsV1beta1NamespacedIngress {
	return &CreateExtensionsV1beta1NamespacedIngress{Context: ctx, Handler: handler}
}

/*CreateExtensionsV1beta1NamespacedIngress swagger:route POST /apis/extensions/v1beta1/namespaces/{namespace}/ingresses extensions_v1beta1 createExtensionsV1beta1NamespacedIngress

create an Ingress

*/
type CreateExtensionsV1beta1NamespacedIngress struct {
	Context *middleware.Context
	Handler CreateExtensionsV1beta1NamespacedIngressHandler
}

func (o *CreateExtensionsV1beta1NamespacedIngress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateExtensionsV1beta1NamespacedIngressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
