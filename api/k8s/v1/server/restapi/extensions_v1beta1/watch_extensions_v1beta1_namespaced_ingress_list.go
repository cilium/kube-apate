// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package extensions_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchExtensionsV1beta1NamespacedIngressListHandlerFunc turns a function with the right signature into a watch extensions v1beta1 namespaced ingress list handler
type WatchExtensionsV1beta1NamespacedIngressListHandlerFunc func(WatchExtensionsV1beta1NamespacedIngressListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchExtensionsV1beta1NamespacedIngressListHandlerFunc) Handle(params WatchExtensionsV1beta1NamespacedIngressListParams) middleware.Responder {
	return fn(params)
}

// WatchExtensionsV1beta1NamespacedIngressListHandler interface for that can handle valid watch extensions v1beta1 namespaced ingress list params
type WatchExtensionsV1beta1NamespacedIngressListHandler interface {
	Handle(WatchExtensionsV1beta1NamespacedIngressListParams) middleware.Responder
}

// NewWatchExtensionsV1beta1NamespacedIngressList creates a new http.Handler for the watch extensions v1beta1 namespaced ingress list operation
func NewWatchExtensionsV1beta1NamespacedIngressList(ctx *middleware.Context, handler WatchExtensionsV1beta1NamespacedIngressListHandler) *WatchExtensionsV1beta1NamespacedIngressList {
	return &WatchExtensionsV1beta1NamespacedIngressList{Context: ctx, Handler: handler}
}

/*WatchExtensionsV1beta1NamespacedIngressList swagger:route GET /apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses extensions_v1beta1 watchExtensionsV1beta1NamespacedIngressList

watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchExtensionsV1beta1NamespacedIngressList struct {
	Context *middleware.Context
	Handler WatchExtensionsV1beta1NamespacedIngressListHandler
}

func (o *WatchExtensionsV1beta1NamespacedIngressList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchExtensionsV1beta1NamespacedIngressListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
