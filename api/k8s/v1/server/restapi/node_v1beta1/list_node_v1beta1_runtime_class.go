// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package node_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListNodeV1beta1RuntimeClassHandlerFunc turns a function with the right signature into a list node v1beta1 runtime class handler
type ListNodeV1beta1RuntimeClassHandlerFunc func(ListNodeV1beta1RuntimeClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListNodeV1beta1RuntimeClassHandlerFunc) Handle(params ListNodeV1beta1RuntimeClassParams) middleware.Responder {
	return fn(params)
}

// ListNodeV1beta1RuntimeClassHandler interface for that can handle valid list node v1beta1 runtime class params
type ListNodeV1beta1RuntimeClassHandler interface {
	Handle(ListNodeV1beta1RuntimeClassParams) middleware.Responder
}

// NewListNodeV1beta1RuntimeClass creates a new http.Handler for the list node v1beta1 runtime class operation
func NewListNodeV1beta1RuntimeClass(ctx *middleware.Context, handler ListNodeV1beta1RuntimeClassHandler) *ListNodeV1beta1RuntimeClass {
	return &ListNodeV1beta1RuntimeClass{Context: ctx, Handler: handler}
}

/*ListNodeV1beta1RuntimeClass swagger:route GET /apis/node.k8s.io/v1beta1/runtimeclasses node_v1beta1 listNodeV1beta1RuntimeClass

list or watch objects of kind RuntimeClass

*/
type ListNodeV1beta1RuntimeClass struct {
	Context *middleware.Context
	Handler ListNodeV1beta1RuntimeClassHandler
}

func (o *ListNodeV1beta1RuntimeClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListNodeV1beta1RuntimeClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
