// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadCoreV1NamespacedPodLogHandlerFunc turns a function with the right signature into a read core v1 namespaced pod log handler
type ReadCoreV1NamespacedPodLogHandlerFunc func(ReadCoreV1NamespacedPodLogParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadCoreV1NamespacedPodLogHandlerFunc) Handle(params ReadCoreV1NamespacedPodLogParams) middleware.Responder {
	return fn(params)
}

// ReadCoreV1NamespacedPodLogHandler interface for that can handle valid read core v1 namespaced pod log params
type ReadCoreV1NamespacedPodLogHandler interface {
	Handle(ReadCoreV1NamespacedPodLogParams) middleware.Responder
}

// NewReadCoreV1NamespacedPodLog creates a new http.Handler for the read core v1 namespaced pod log operation
func NewReadCoreV1NamespacedPodLog(ctx *middleware.Context, handler ReadCoreV1NamespacedPodLogHandler) *ReadCoreV1NamespacedPodLog {
	return &ReadCoreV1NamespacedPodLog{Context: ctx, Handler: handler}
}

/*ReadCoreV1NamespacedPodLog swagger:route GET /api/v1/namespaces/{namespace}/pods/{name}/log core_v1 readCoreV1NamespacedPodLog

read log of the specified Pod

*/
type ReadCoreV1NamespacedPodLog struct {
	Context *middleware.Context
	Handler ReadCoreV1NamespacedPodLogHandler
}

func (o *ReadCoreV1NamespacedPodLog) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadCoreV1NamespacedPodLogParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
