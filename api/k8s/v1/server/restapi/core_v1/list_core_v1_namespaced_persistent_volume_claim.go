// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListCoreV1NamespacedPersistentVolumeClaimHandlerFunc turns a function with the right signature into a list core v1 namespaced persistent volume claim handler
type ListCoreV1NamespacedPersistentVolumeClaimHandlerFunc func(ListCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCoreV1NamespacedPersistentVolumeClaimHandlerFunc) Handle(params ListCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
	return fn(params)
}

// ListCoreV1NamespacedPersistentVolumeClaimHandler interface for that can handle valid list core v1 namespaced persistent volume claim params
type ListCoreV1NamespacedPersistentVolumeClaimHandler interface {
	Handle(ListCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder
}

// NewListCoreV1NamespacedPersistentVolumeClaim creates a new http.Handler for the list core v1 namespaced persistent volume claim operation
func NewListCoreV1NamespacedPersistentVolumeClaim(ctx *middleware.Context, handler ListCoreV1NamespacedPersistentVolumeClaimHandler) *ListCoreV1NamespacedPersistentVolumeClaim {
	return &ListCoreV1NamespacedPersistentVolumeClaim{Context: ctx, Handler: handler}
}

/*ListCoreV1NamespacedPersistentVolumeClaim swagger:route GET /api/v1/namespaces/{namespace}/persistentvolumeclaims core_v1 listCoreV1NamespacedPersistentVolumeClaim

list or watch objects of kind PersistentVolumeClaim

*/
type ListCoreV1NamespacedPersistentVolumeClaim struct {
	Context *middleware.Context
	Handler ListCoreV1NamespacedPersistentVolumeClaimHandler
}

func (o *ListCoreV1NamespacedPersistentVolumeClaim) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListCoreV1NamespacedPersistentVolumeClaimParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
