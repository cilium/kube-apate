// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCoreV1NamespacedConfigMapHandlerFunc turns a function with the right signature into a delete core v1 namespaced config map handler
type DeleteCoreV1NamespacedConfigMapHandlerFunc func(DeleteCoreV1NamespacedConfigMapParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCoreV1NamespacedConfigMapHandlerFunc) Handle(params DeleteCoreV1NamespacedConfigMapParams) middleware.Responder {
	return fn(params)
}

// DeleteCoreV1NamespacedConfigMapHandler interface for that can handle valid delete core v1 namespaced config map params
type DeleteCoreV1NamespacedConfigMapHandler interface {
	Handle(DeleteCoreV1NamespacedConfigMapParams) middleware.Responder
}

// NewDeleteCoreV1NamespacedConfigMap creates a new http.Handler for the delete core v1 namespaced config map operation
func NewDeleteCoreV1NamespacedConfigMap(ctx *middleware.Context, handler DeleteCoreV1NamespacedConfigMapHandler) *DeleteCoreV1NamespacedConfigMap {
	return &DeleteCoreV1NamespacedConfigMap{Context: ctx, Handler: handler}
}

/*DeleteCoreV1NamespacedConfigMap swagger:route DELETE /api/v1/namespaces/{namespace}/configmaps/{name} core_v1 deleteCoreV1NamespacedConfigMap

delete a ConfigMap

*/
type DeleteCoreV1NamespacedConfigMap struct {
	Context *middleware.Context
	Handler DeleteCoreV1NamespacedConfigMapHandler
}

func (o *DeleteCoreV1NamespacedConfigMap) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCoreV1NamespacedConfigMapParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
