// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ConnectCoreV1GetNamespacedServiceProxyWithPathHandlerFunc turns a function with the right signature into a connect core v1 get namespaced service proxy with path handler
type ConnectCoreV1GetNamespacedServiceProxyWithPathHandlerFunc func(ConnectCoreV1GetNamespacedServiceProxyWithPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConnectCoreV1GetNamespacedServiceProxyWithPathHandlerFunc) Handle(params ConnectCoreV1GetNamespacedServiceProxyWithPathParams) middleware.Responder {
	return fn(params)
}

// ConnectCoreV1GetNamespacedServiceProxyWithPathHandler interface for that can handle valid connect core v1 get namespaced service proxy with path params
type ConnectCoreV1GetNamespacedServiceProxyWithPathHandler interface {
	Handle(ConnectCoreV1GetNamespacedServiceProxyWithPathParams) middleware.Responder
}

// NewConnectCoreV1GetNamespacedServiceProxyWithPath creates a new http.Handler for the connect core v1 get namespaced service proxy with path operation
func NewConnectCoreV1GetNamespacedServiceProxyWithPath(ctx *middleware.Context, handler ConnectCoreV1GetNamespacedServiceProxyWithPathHandler) *ConnectCoreV1GetNamespacedServiceProxyWithPath {
	return &ConnectCoreV1GetNamespacedServiceProxyWithPath{Context: ctx, Handler: handler}
}

/*ConnectCoreV1GetNamespacedServiceProxyWithPath swagger:route GET /api/v1/namespaces/{namespace}/services/{name}/proxy/{path} core_v1 connectCoreV1GetNamespacedServiceProxyWithPath

connect GET requests to proxy of Service

*/
type ConnectCoreV1GetNamespacedServiceProxyWithPath struct {
	Context *middleware.Context
	Handler ConnectCoreV1GetNamespacedServiceProxyWithPathHandler
}

func (o *ConnectCoreV1GetNamespacedServiceProxyWithPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConnectCoreV1GetNamespacedServiceProxyWithPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
