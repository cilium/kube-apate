// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ConnectCoreV1PostNodeProxyHandlerFunc turns a function with the right signature into a connect core v1 post node proxy handler
type ConnectCoreV1PostNodeProxyHandlerFunc func(ConnectCoreV1PostNodeProxyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConnectCoreV1PostNodeProxyHandlerFunc) Handle(params ConnectCoreV1PostNodeProxyParams) middleware.Responder {
	return fn(params)
}

// ConnectCoreV1PostNodeProxyHandler interface for that can handle valid connect core v1 post node proxy params
type ConnectCoreV1PostNodeProxyHandler interface {
	Handle(ConnectCoreV1PostNodeProxyParams) middleware.Responder
}

// NewConnectCoreV1PostNodeProxy creates a new http.Handler for the connect core v1 post node proxy operation
func NewConnectCoreV1PostNodeProxy(ctx *middleware.Context, handler ConnectCoreV1PostNodeProxyHandler) *ConnectCoreV1PostNodeProxy {
	return &ConnectCoreV1PostNodeProxy{Context: ctx, Handler: handler}
}

/*ConnectCoreV1PostNodeProxy swagger:route POST /api/v1/nodes/{name}/proxy core_v1 connectCoreV1PostNodeProxy

connect POST requests to proxy of Node

*/
type ConnectCoreV1PostNodeProxy struct {
	Context *middleware.Context
	Handler ConnectCoreV1PostNodeProxyHandler
}

func (o *ConnectCoreV1PostNodeProxy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConnectCoreV1PostNodeProxyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
