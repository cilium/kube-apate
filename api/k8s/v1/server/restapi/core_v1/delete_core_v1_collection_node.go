// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCoreV1CollectionNodeHandlerFunc turns a function with the right signature into a delete core v1 collection node handler
type DeleteCoreV1CollectionNodeHandlerFunc func(DeleteCoreV1CollectionNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCoreV1CollectionNodeHandlerFunc) Handle(params DeleteCoreV1CollectionNodeParams) middleware.Responder {
	return fn(params)
}

// DeleteCoreV1CollectionNodeHandler interface for that can handle valid delete core v1 collection node params
type DeleteCoreV1CollectionNodeHandler interface {
	Handle(DeleteCoreV1CollectionNodeParams) middleware.Responder
}

// NewDeleteCoreV1CollectionNode creates a new http.Handler for the delete core v1 collection node operation
func NewDeleteCoreV1CollectionNode(ctx *middleware.Context, handler DeleteCoreV1CollectionNodeHandler) *DeleteCoreV1CollectionNode {
	return &DeleteCoreV1CollectionNode{Context: ctx, Handler: handler}
}

/*DeleteCoreV1CollectionNode swagger:route DELETE /api/v1/nodes core_v1 deleteCoreV1CollectionNode

delete collection of Node

*/
type DeleteCoreV1CollectionNode struct {
	Context *middleware.Context
	Handler DeleteCoreV1CollectionNodeHandler
}

func (o *DeleteCoreV1CollectionNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCoreV1CollectionNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
