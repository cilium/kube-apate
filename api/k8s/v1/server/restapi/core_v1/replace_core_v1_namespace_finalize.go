// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceCoreV1NamespaceFinalizeHandlerFunc turns a function with the right signature into a replace core v1 namespace finalize handler
type ReplaceCoreV1NamespaceFinalizeHandlerFunc func(ReplaceCoreV1NamespaceFinalizeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceCoreV1NamespaceFinalizeHandlerFunc) Handle(params ReplaceCoreV1NamespaceFinalizeParams) middleware.Responder {
	return fn(params)
}

// ReplaceCoreV1NamespaceFinalizeHandler interface for that can handle valid replace core v1 namespace finalize params
type ReplaceCoreV1NamespaceFinalizeHandler interface {
	Handle(ReplaceCoreV1NamespaceFinalizeParams) middleware.Responder
}

// NewReplaceCoreV1NamespaceFinalize creates a new http.Handler for the replace core v1 namespace finalize operation
func NewReplaceCoreV1NamespaceFinalize(ctx *middleware.Context, handler ReplaceCoreV1NamespaceFinalizeHandler) *ReplaceCoreV1NamespaceFinalize {
	return &ReplaceCoreV1NamespaceFinalize{Context: ctx, Handler: handler}
}

/*ReplaceCoreV1NamespaceFinalize swagger:route PUT /api/v1/namespaces/{name}/finalize core_v1 replaceCoreV1NamespaceFinalize

replace finalize of the specified Namespace

*/
type ReplaceCoreV1NamespaceFinalize struct {
	Context *middleware.Context
	Handler ReplaceCoreV1NamespaceFinalizeHandler
}

func (o *ReplaceCoreV1NamespaceFinalize) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceCoreV1NamespaceFinalizeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
