// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCoreV1NamespacedPodEvictionHandlerFunc turns a function with the right signature into a create core v1 namespaced pod eviction handler
type CreateCoreV1NamespacedPodEvictionHandlerFunc func(CreateCoreV1NamespacedPodEvictionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoreV1NamespacedPodEvictionHandlerFunc) Handle(params CreateCoreV1NamespacedPodEvictionParams) middleware.Responder {
	return fn(params)
}

// CreateCoreV1NamespacedPodEvictionHandler interface for that can handle valid create core v1 namespaced pod eviction params
type CreateCoreV1NamespacedPodEvictionHandler interface {
	Handle(CreateCoreV1NamespacedPodEvictionParams) middleware.Responder
}

// NewCreateCoreV1NamespacedPodEviction creates a new http.Handler for the create core v1 namespaced pod eviction operation
func NewCreateCoreV1NamespacedPodEviction(ctx *middleware.Context, handler CreateCoreV1NamespacedPodEvictionHandler) *CreateCoreV1NamespacedPodEviction {
	return &CreateCoreV1NamespacedPodEviction{Context: ctx, Handler: handler}
}

/*CreateCoreV1NamespacedPodEviction swagger:route POST /api/v1/namespaces/{namespace}/pods/{name}/eviction core_v1 createCoreV1NamespacedPodEviction

create eviction of a Pod

*/
type CreateCoreV1NamespacedPodEviction struct {
	Context *middleware.Context
	Handler CreateCoreV1NamespacedPodEvictionHandler
}

func (o *CreateCoreV1NamespacedPodEviction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCoreV1NamespacedPodEvictionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
