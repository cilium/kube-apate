// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCoreV1NamespacedPersistentVolumeClaimHandlerFunc turns a function with the right signature into a create core v1 namespaced persistent volume claim handler
type CreateCoreV1NamespacedPersistentVolumeClaimHandlerFunc func(CreateCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoreV1NamespacedPersistentVolumeClaimHandlerFunc) Handle(params CreateCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder {
	return fn(params)
}

// CreateCoreV1NamespacedPersistentVolumeClaimHandler interface for that can handle valid create core v1 namespaced persistent volume claim params
type CreateCoreV1NamespacedPersistentVolumeClaimHandler interface {
	Handle(CreateCoreV1NamespacedPersistentVolumeClaimParams) middleware.Responder
}

// NewCreateCoreV1NamespacedPersistentVolumeClaim creates a new http.Handler for the create core v1 namespaced persistent volume claim operation
func NewCreateCoreV1NamespacedPersistentVolumeClaim(ctx *middleware.Context, handler CreateCoreV1NamespacedPersistentVolumeClaimHandler) *CreateCoreV1NamespacedPersistentVolumeClaim {
	return &CreateCoreV1NamespacedPersistentVolumeClaim{Context: ctx, Handler: handler}
}

/*CreateCoreV1NamespacedPersistentVolumeClaim swagger:route POST /api/v1/namespaces/{namespace}/persistentvolumeclaims core_v1 createCoreV1NamespacedPersistentVolumeClaim

create a PersistentVolumeClaim

*/
type CreateCoreV1NamespacedPersistentVolumeClaim struct {
	Context *middleware.Context
	Handler CreateCoreV1NamespacedPersistentVolumeClaimHandler
}

func (o *CreateCoreV1NamespacedPersistentVolumeClaim) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCoreV1NamespacedPersistentVolumeClaimParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
