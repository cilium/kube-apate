// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchCoreV1NamespaceStatusHandlerFunc turns a function with the right signature into a patch core v1 namespace status handler
type PatchCoreV1NamespaceStatusHandlerFunc func(PatchCoreV1NamespaceStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchCoreV1NamespaceStatusHandlerFunc) Handle(params PatchCoreV1NamespaceStatusParams) middleware.Responder {
	return fn(params)
}

// PatchCoreV1NamespaceStatusHandler interface for that can handle valid patch core v1 namespace status params
type PatchCoreV1NamespaceStatusHandler interface {
	Handle(PatchCoreV1NamespaceStatusParams) middleware.Responder
}

// NewPatchCoreV1NamespaceStatus creates a new http.Handler for the patch core v1 namespace status operation
func NewPatchCoreV1NamespaceStatus(ctx *middleware.Context, handler PatchCoreV1NamespaceStatusHandler) *PatchCoreV1NamespaceStatus {
	return &PatchCoreV1NamespaceStatus{Context: ctx, Handler: handler}
}

/*PatchCoreV1NamespaceStatus swagger:route PATCH /api/v1/namespaces/{name}/status core_v1 patchCoreV1NamespaceStatus

partially update status of the specified Namespace

*/
type PatchCoreV1NamespaceStatus struct {
	Context *middleware.Context
	Handler PatchCoreV1NamespaceStatusHandler
}

func (o *PatchCoreV1NamespaceStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchCoreV1NamespaceStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
