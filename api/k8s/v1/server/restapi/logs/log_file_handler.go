// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// LogFileHandlerHandlerFunc turns a function with the right signature into a log file handler handler
type LogFileHandlerHandlerFunc func(LogFileHandlerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LogFileHandlerHandlerFunc) Handle(params LogFileHandlerParams) middleware.Responder {
	return fn(params)
}

// LogFileHandlerHandler interface for that can handle valid log file handler params
type LogFileHandlerHandler interface {
	Handle(LogFileHandlerParams) middleware.Responder
}

// NewLogFileHandler creates a new http.Handler for the log file handler operation
func NewLogFileHandler(ctx *middleware.Context, handler LogFileHandlerHandler) *LogFileHandler {
	return &LogFileHandler{Context: ctx, Handler: handler}
}

/*LogFileHandler swagger:route GET /logs/{logpath} logs logFileHandler

LogFileHandler log file handler API

*/
type LogFileHandler struct {
	Context *middleware.Context
	Handler LogFileHandlerHandler
}

func (o *LogFileHandler) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLogFileHandlerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
