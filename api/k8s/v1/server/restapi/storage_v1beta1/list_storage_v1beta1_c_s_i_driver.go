// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListStorageV1beta1CSIDriverHandlerFunc turns a function with the right signature into a list storage v1beta1 c s i driver handler
type ListStorageV1beta1CSIDriverHandlerFunc func(ListStorageV1beta1CSIDriverParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListStorageV1beta1CSIDriverHandlerFunc) Handle(params ListStorageV1beta1CSIDriverParams) middleware.Responder {
	return fn(params)
}

// ListStorageV1beta1CSIDriverHandler interface for that can handle valid list storage v1beta1 c s i driver params
type ListStorageV1beta1CSIDriverHandler interface {
	Handle(ListStorageV1beta1CSIDriverParams) middleware.Responder
}

// NewListStorageV1beta1CSIDriver creates a new http.Handler for the list storage v1beta1 c s i driver operation
func NewListStorageV1beta1CSIDriver(ctx *middleware.Context, handler ListStorageV1beta1CSIDriverHandler) *ListStorageV1beta1CSIDriver {
	return &ListStorageV1beta1CSIDriver{Context: ctx, Handler: handler}
}

/*ListStorageV1beta1CSIDriver swagger:route GET /apis/storage.k8s.io/v1beta1/csidrivers storage_v1beta1 listStorageV1beta1CSIDriver

list or watch objects of kind CSIDriver

*/
type ListStorageV1beta1CSIDriver struct {
	Context *middleware.Context
	Handler ListStorageV1beta1CSIDriverHandler
}

func (o *ListStorageV1beta1CSIDriver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListStorageV1beta1CSIDriverParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
