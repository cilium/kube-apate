// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateNetworkingV1beta1IngressClassHandlerFunc turns a function with the right signature into a create networking v1beta1 ingress class handler
type CreateNetworkingV1beta1IngressClassHandlerFunc func(CreateNetworkingV1beta1IngressClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateNetworkingV1beta1IngressClassHandlerFunc) Handle(params CreateNetworkingV1beta1IngressClassParams) middleware.Responder {
	return fn(params)
}

// CreateNetworkingV1beta1IngressClassHandler interface for that can handle valid create networking v1beta1 ingress class params
type CreateNetworkingV1beta1IngressClassHandler interface {
	Handle(CreateNetworkingV1beta1IngressClassParams) middleware.Responder
}

// NewCreateNetworkingV1beta1IngressClass creates a new http.Handler for the create networking v1beta1 ingress class operation
func NewCreateNetworkingV1beta1IngressClass(ctx *middleware.Context, handler CreateNetworkingV1beta1IngressClassHandler) *CreateNetworkingV1beta1IngressClass {
	return &CreateNetworkingV1beta1IngressClass{Context: ctx, Handler: handler}
}

/*CreateNetworkingV1beta1IngressClass swagger:route POST /apis/networking.k8s.io/v1beta1/ingressclasses networking_v1beta1 createNetworkingV1beta1IngressClass

create an IngressClass

*/
type CreateNetworkingV1beta1IngressClass struct {
	Context *middleware.Context
	Handler CreateNetworkingV1beta1IngressClassHandler
}

func (o *CreateNetworkingV1beta1IngressClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateNetworkingV1beta1IngressClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
