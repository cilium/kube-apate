// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteNetworkingV1beta1CollectionIngressClassHandlerFunc turns a function with the right signature into a delete networking v1beta1 collection ingress class handler
type DeleteNetworkingV1beta1CollectionIngressClassHandlerFunc func(DeleteNetworkingV1beta1CollectionIngressClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteNetworkingV1beta1CollectionIngressClassHandlerFunc) Handle(params DeleteNetworkingV1beta1CollectionIngressClassParams) middleware.Responder {
	return fn(params)
}

// DeleteNetworkingV1beta1CollectionIngressClassHandler interface for that can handle valid delete networking v1beta1 collection ingress class params
type DeleteNetworkingV1beta1CollectionIngressClassHandler interface {
	Handle(DeleteNetworkingV1beta1CollectionIngressClassParams) middleware.Responder
}

// NewDeleteNetworkingV1beta1CollectionIngressClass creates a new http.Handler for the delete networking v1beta1 collection ingress class operation
func NewDeleteNetworkingV1beta1CollectionIngressClass(ctx *middleware.Context, handler DeleteNetworkingV1beta1CollectionIngressClassHandler) *DeleteNetworkingV1beta1CollectionIngressClass {
	return &DeleteNetworkingV1beta1CollectionIngressClass{Context: ctx, Handler: handler}
}

/*DeleteNetworkingV1beta1CollectionIngressClass swagger:route DELETE /apis/networking.k8s.io/v1beta1/ingressclasses networking_v1beta1 deleteNetworkingV1beta1CollectionIngressClass

delete collection of IngressClass

*/
type DeleteNetworkingV1beta1CollectionIngressClass struct {
	Context *middleware.Context
	Handler DeleteNetworkingV1beta1CollectionIngressClassHandler
}

func (o *DeleteNetworkingV1beta1CollectionIngressClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteNetworkingV1beta1CollectionIngressClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
