// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package coordination_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchCoordinationV1NamespacedLeaseHandlerFunc turns a function with the right signature into a patch coordination v1 namespaced lease handler
type PatchCoordinationV1NamespacedLeaseHandlerFunc func(PatchCoordinationV1NamespacedLeaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchCoordinationV1NamespacedLeaseHandlerFunc) Handle(params PatchCoordinationV1NamespacedLeaseParams) middleware.Responder {
	return fn(params)
}

// PatchCoordinationV1NamespacedLeaseHandler interface for that can handle valid patch coordination v1 namespaced lease params
type PatchCoordinationV1NamespacedLeaseHandler interface {
	Handle(PatchCoordinationV1NamespacedLeaseParams) middleware.Responder
}

// NewPatchCoordinationV1NamespacedLease creates a new http.Handler for the patch coordination v1 namespaced lease operation
func NewPatchCoordinationV1NamespacedLease(ctx *middleware.Context, handler PatchCoordinationV1NamespacedLeaseHandler) *PatchCoordinationV1NamespacedLease {
	return &PatchCoordinationV1NamespacedLease{Context: ctx, Handler: handler}
}

/*PatchCoordinationV1NamespacedLease swagger:route PATCH /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name} coordination_v1 patchCoordinationV1NamespacedLease

partially update the specified Lease

*/
type PatchCoordinationV1NamespacedLease struct {
	Context *middleware.Context
	Handler PatchCoordinationV1NamespacedLeaseHandler
}

func (o *PatchCoordinationV1NamespacedLease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchCoordinationV1NamespacedLeaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
