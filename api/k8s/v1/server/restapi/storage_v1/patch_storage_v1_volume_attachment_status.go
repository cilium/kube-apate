// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchStorageV1VolumeAttachmentStatusHandlerFunc turns a function with the right signature into a patch storage v1 volume attachment status handler
type PatchStorageV1VolumeAttachmentStatusHandlerFunc func(PatchStorageV1VolumeAttachmentStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchStorageV1VolumeAttachmentStatusHandlerFunc) Handle(params PatchStorageV1VolumeAttachmentStatusParams) middleware.Responder {
	return fn(params)
}

// PatchStorageV1VolumeAttachmentStatusHandler interface for that can handle valid patch storage v1 volume attachment status params
type PatchStorageV1VolumeAttachmentStatusHandler interface {
	Handle(PatchStorageV1VolumeAttachmentStatusParams) middleware.Responder
}

// NewPatchStorageV1VolumeAttachmentStatus creates a new http.Handler for the patch storage v1 volume attachment status operation
func NewPatchStorageV1VolumeAttachmentStatus(ctx *middleware.Context, handler PatchStorageV1VolumeAttachmentStatusHandler) *PatchStorageV1VolumeAttachmentStatus {
	return &PatchStorageV1VolumeAttachmentStatus{Context: ctx, Handler: handler}
}

/*PatchStorageV1VolumeAttachmentStatus swagger:route PATCH /apis/storage.k8s.io/v1/volumeattachments/{name}/status storage_v1 patchStorageV1VolumeAttachmentStatus

partially update status of the specified VolumeAttachment

*/
type PatchStorageV1VolumeAttachmentStatus struct {
	Context *middleware.Context
	Handler PatchStorageV1VolumeAttachmentStatusHandler
}

func (o *PatchStorageV1VolumeAttachmentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchStorageV1VolumeAttachmentStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
