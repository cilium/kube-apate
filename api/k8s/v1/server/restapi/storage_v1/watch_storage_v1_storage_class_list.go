// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchStorageV1StorageClassListHandlerFunc turns a function with the right signature into a watch storage v1 storage class list handler
type WatchStorageV1StorageClassListHandlerFunc func(WatchStorageV1StorageClassListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchStorageV1StorageClassListHandlerFunc) Handle(params WatchStorageV1StorageClassListParams) middleware.Responder {
	return fn(params)
}

// WatchStorageV1StorageClassListHandler interface for that can handle valid watch storage v1 storage class list params
type WatchStorageV1StorageClassListHandler interface {
	Handle(WatchStorageV1StorageClassListParams) middleware.Responder
}

// NewWatchStorageV1StorageClassList creates a new http.Handler for the watch storage v1 storage class list operation
func NewWatchStorageV1StorageClassList(ctx *middleware.Context, handler WatchStorageV1StorageClassListHandler) *WatchStorageV1StorageClassList {
	return &WatchStorageV1StorageClassList{Context: ctx, Handler: handler}
}

/*WatchStorageV1StorageClassList swagger:route GET /apis/storage.k8s.io/v1/watch/storageclasses storage_v1 watchStorageV1StorageClassList

watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchStorageV1StorageClassList struct {
	Context *middleware.Context
	Handler WatchStorageV1StorageClassListHandler
}

func (o *WatchStorageV1StorageClassList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchStorageV1StorageClassListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
