// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchStorageV1StorageClassHandlerFunc turns a function with the right signature into a watch storage v1 storage class handler
type WatchStorageV1StorageClassHandlerFunc func(WatchStorageV1StorageClassParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchStorageV1StorageClassHandlerFunc) Handle(params WatchStorageV1StorageClassParams) middleware.Responder {
	return fn(params)
}

// WatchStorageV1StorageClassHandler interface for that can handle valid watch storage v1 storage class params
type WatchStorageV1StorageClassHandler interface {
	Handle(WatchStorageV1StorageClassParams) middleware.Responder
}

// NewWatchStorageV1StorageClass creates a new http.Handler for the watch storage v1 storage class operation
func NewWatchStorageV1StorageClass(ctx *middleware.Context, handler WatchStorageV1StorageClassHandler) *WatchStorageV1StorageClass {
	return &WatchStorageV1StorageClass{Context: ctx, Handler: handler}
}

/*WatchStorageV1StorageClass swagger:route GET /apis/storage.k8s.io/v1/watch/storageclasses/{name} storage_v1 watchStorageV1StorageClass

watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.

*/
type WatchStorageV1StorageClass struct {
	Context *middleware.Context
	Handler WatchStorageV1StorageClassHandler
}

func (o *WatchStorageV1StorageClass) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchStorageV1StorageClassParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
