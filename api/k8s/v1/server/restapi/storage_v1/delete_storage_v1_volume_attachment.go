// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteStorageV1VolumeAttachmentHandlerFunc turns a function with the right signature into a delete storage v1 volume attachment handler
type DeleteStorageV1VolumeAttachmentHandlerFunc func(DeleteStorageV1VolumeAttachmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteStorageV1VolumeAttachmentHandlerFunc) Handle(params DeleteStorageV1VolumeAttachmentParams) middleware.Responder {
	return fn(params)
}

// DeleteStorageV1VolumeAttachmentHandler interface for that can handle valid delete storage v1 volume attachment params
type DeleteStorageV1VolumeAttachmentHandler interface {
	Handle(DeleteStorageV1VolumeAttachmentParams) middleware.Responder
}

// NewDeleteStorageV1VolumeAttachment creates a new http.Handler for the delete storage v1 volume attachment operation
func NewDeleteStorageV1VolumeAttachment(ctx *middleware.Context, handler DeleteStorageV1VolumeAttachmentHandler) *DeleteStorageV1VolumeAttachment {
	return &DeleteStorageV1VolumeAttachment{Context: ctx, Handler: handler}
}

/*DeleteStorageV1VolumeAttachment swagger:route DELETE /apis/storage.k8s.io/v1/volumeattachments/{name} storage_v1 deleteStorageV1VolumeAttachment

delete a VolumeAttachment

*/
type DeleteStorageV1VolumeAttachment struct {
	Context *middleware.Context
	Handler DeleteStorageV1VolumeAttachmentHandler
}

func (o *DeleteStorageV1VolumeAttachment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteStorageV1VolumeAttachmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
