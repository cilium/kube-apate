// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadRbacAuthorizationV1beta1NamespacedRoleHandlerFunc turns a function with the right signature into a read rbac authorization v1beta1 namespaced role handler
type ReadRbacAuthorizationV1beta1NamespacedRoleHandlerFunc func(ReadRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadRbacAuthorizationV1beta1NamespacedRoleHandlerFunc) Handle(params ReadRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder {
	return fn(params)
}

// ReadRbacAuthorizationV1beta1NamespacedRoleHandler interface for that can handle valid read rbac authorization v1beta1 namespaced role params
type ReadRbacAuthorizationV1beta1NamespacedRoleHandler interface {
	Handle(ReadRbacAuthorizationV1beta1NamespacedRoleParams) middleware.Responder
}

// NewReadRbacAuthorizationV1beta1NamespacedRole creates a new http.Handler for the read rbac authorization v1beta1 namespaced role operation
func NewReadRbacAuthorizationV1beta1NamespacedRole(ctx *middleware.Context, handler ReadRbacAuthorizationV1beta1NamespacedRoleHandler) *ReadRbacAuthorizationV1beta1NamespacedRole {
	return &ReadRbacAuthorizationV1beta1NamespacedRole{Context: ctx, Handler: handler}
}

/*ReadRbacAuthorizationV1beta1NamespacedRole swagger:route GET /apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name} rbacAuthorization_v1beta1 readRbacAuthorizationV1beta1NamespacedRole

read the specified Role

*/
type ReadRbacAuthorizationV1beta1NamespacedRole struct {
	Context *middleware.Context
	Handler ReadRbacAuthorizationV1beta1NamespacedRoleHandler
}

func (o *ReadRbacAuthorizationV1beta1NamespacedRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadRbacAuthorizationV1beta1NamespacedRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
