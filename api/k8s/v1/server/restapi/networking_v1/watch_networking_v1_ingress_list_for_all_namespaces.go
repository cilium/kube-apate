// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchNetworkingV1IngressListForAllNamespacesHandlerFunc turns a function with the right signature into a watch networking v1 ingress list for all namespaces handler
type WatchNetworkingV1IngressListForAllNamespacesHandlerFunc func(WatchNetworkingV1IngressListForAllNamespacesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchNetworkingV1IngressListForAllNamespacesHandlerFunc) Handle(params WatchNetworkingV1IngressListForAllNamespacesParams) middleware.Responder {
	return fn(params)
}

// WatchNetworkingV1IngressListForAllNamespacesHandler interface for that can handle valid watch networking v1 ingress list for all namespaces params
type WatchNetworkingV1IngressListForAllNamespacesHandler interface {
	Handle(WatchNetworkingV1IngressListForAllNamespacesParams) middleware.Responder
}

// NewWatchNetworkingV1IngressListForAllNamespaces creates a new http.Handler for the watch networking v1 ingress list for all namespaces operation
func NewWatchNetworkingV1IngressListForAllNamespaces(ctx *middleware.Context, handler WatchNetworkingV1IngressListForAllNamespacesHandler) *WatchNetworkingV1IngressListForAllNamespaces {
	return &WatchNetworkingV1IngressListForAllNamespaces{Context: ctx, Handler: handler}
}

/*WatchNetworkingV1IngressListForAllNamespaces swagger:route GET /apis/networking.k8s.io/v1/watch/ingresses networking_v1 watchNetworkingV1IngressListForAllNamespaces

watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchNetworkingV1IngressListForAllNamespaces struct {
	Context *middleware.Context
	Handler WatchNetworkingV1IngressListForAllNamespacesHandler
}

func (o *WatchNetworkingV1IngressListForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchNetworkingV1IngressListForAllNamespacesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
