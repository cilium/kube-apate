// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteNetworkingV1CollectionNamespacedIngressHandlerFunc turns a function with the right signature into a delete networking v1 collection namespaced ingress handler
type DeleteNetworkingV1CollectionNamespacedIngressHandlerFunc func(DeleteNetworkingV1CollectionNamespacedIngressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteNetworkingV1CollectionNamespacedIngressHandlerFunc) Handle(params DeleteNetworkingV1CollectionNamespacedIngressParams) middleware.Responder {
	return fn(params)
}

// DeleteNetworkingV1CollectionNamespacedIngressHandler interface for that can handle valid delete networking v1 collection namespaced ingress params
type DeleteNetworkingV1CollectionNamespacedIngressHandler interface {
	Handle(DeleteNetworkingV1CollectionNamespacedIngressParams) middleware.Responder
}

// NewDeleteNetworkingV1CollectionNamespacedIngress creates a new http.Handler for the delete networking v1 collection namespaced ingress operation
func NewDeleteNetworkingV1CollectionNamespacedIngress(ctx *middleware.Context, handler DeleteNetworkingV1CollectionNamespacedIngressHandler) *DeleteNetworkingV1CollectionNamespacedIngress {
	return &DeleteNetworkingV1CollectionNamespacedIngress{Context: ctx, Handler: handler}
}

/*DeleteNetworkingV1CollectionNamespacedIngress swagger:route DELETE /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses networking_v1 deleteNetworkingV1CollectionNamespacedIngress

delete collection of Ingress

*/
type DeleteNetworkingV1CollectionNamespacedIngress struct {
	Context *middleware.Context
	Handler DeleteNetworkingV1CollectionNamespacedIngressHandler
}

func (o *DeleteNetworkingV1CollectionNamespacedIngress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteNetworkingV1CollectionNamespacedIngressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
