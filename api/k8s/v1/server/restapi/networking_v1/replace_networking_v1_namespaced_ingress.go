// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package networking_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceNetworkingV1NamespacedIngressHandlerFunc turns a function with the right signature into a replace networking v1 namespaced ingress handler
type ReplaceNetworkingV1NamespacedIngressHandlerFunc func(ReplaceNetworkingV1NamespacedIngressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceNetworkingV1NamespacedIngressHandlerFunc) Handle(params ReplaceNetworkingV1NamespacedIngressParams) middleware.Responder {
	return fn(params)
}

// ReplaceNetworkingV1NamespacedIngressHandler interface for that can handle valid replace networking v1 namespaced ingress params
type ReplaceNetworkingV1NamespacedIngressHandler interface {
	Handle(ReplaceNetworkingV1NamespacedIngressParams) middleware.Responder
}

// NewReplaceNetworkingV1NamespacedIngress creates a new http.Handler for the replace networking v1 namespaced ingress operation
func NewReplaceNetworkingV1NamespacedIngress(ctx *middleware.Context, handler ReplaceNetworkingV1NamespacedIngressHandler) *ReplaceNetworkingV1NamespacedIngress {
	return &ReplaceNetworkingV1NamespacedIngress{Context: ctx, Handler: handler}
}

/*ReplaceNetworkingV1NamespacedIngress swagger:route PUT /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name} networking_v1 replaceNetworkingV1NamespacedIngress

replace the specified Ingress

*/
type ReplaceNetworkingV1NamespacedIngress struct {
	Context *middleware.Context
	Handler ReplaceNetworkingV1NamespacedIngressHandler
}

func (o *ReplaceNetworkingV1NamespacedIngress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceNetworkingV1NamespacedIngressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
