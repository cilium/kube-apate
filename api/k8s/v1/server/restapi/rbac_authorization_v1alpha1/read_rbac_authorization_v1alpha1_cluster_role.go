// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadRbacAuthorizationV1alpha1ClusterRoleHandlerFunc turns a function with the right signature into a read rbac authorization v1alpha1 cluster role handler
type ReadRbacAuthorizationV1alpha1ClusterRoleHandlerFunc func(ReadRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadRbacAuthorizationV1alpha1ClusterRoleHandlerFunc) Handle(params ReadRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder {
	return fn(params)
}

// ReadRbacAuthorizationV1alpha1ClusterRoleHandler interface for that can handle valid read rbac authorization v1alpha1 cluster role params
type ReadRbacAuthorizationV1alpha1ClusterRoleHandler interface {
	Handle(ReadRbacAuthorizationV1alpha1ClusterRoleParams) middleware.Responder
}

// NewReadRbacAuthorizationV1alpha1ClusterRole creates a new http.Handler for the read rbac authorization v1alpha1 cluster role operation
func NewReadRbacAuthorizationV1alpha1ClusterRole(ctx *middleware.Context, handler ReadRbacAuthorizationV1alpha1ClusterRoleHandler) *ReadRbacAuthorizationV1alpha1ClusterRole {
	return &ReadRbacAuthorizationV1alpha1ClusterRole{Context: ctx, Handler: handler}
}

/*ReadRbacAuthorizationV1alpha1ClusterRole swagger:route GET /apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name} rbacAuthorization_v1alpha1 readRbacAuthorizationV1alpha1ClusterRole

read the specified ClusterRole

*/
type ReadRbacAuthorizationV1alpha1ClusterRole struct {
	Context *middleware.Context
	Handler ReadRbacAuthorizationV1alpha1ClusterRoleHandler
}

func (o *ReadRbacAuthorizationV1alpha1ClusterRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadRbacAuthorizationV1alpha1ClusterRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
