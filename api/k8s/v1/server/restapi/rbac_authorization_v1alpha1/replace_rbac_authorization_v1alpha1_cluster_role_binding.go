// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package rbac_authorization_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc turns a function with the right signature into a replace rbac authorization v1alpha1 cluster role binding handler
type ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc func(ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandlerFunc) Handle(params ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder {
	return fn(params)
}

// ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler interface for that can handle valid replace rbac authorization v1alpha1 cluster role binding params
type ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler interface {
	Handle(ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams) middleware.Responder
}

// NewReplaceRbacAuthorizationV1alpha1ClusterRoleBinding creates a new http.Handler for the replace rbac authorization v1alpha1 cluster role binding operation
func NewReplaceRbacAuthorizationV1alpha1ClusterRoleBinding(ctx *middleware.Context, handler ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler) *ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding {
	return &ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding{Context: ctx, Handler: handler}
}

/*ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding swagger:route PUT /apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name} rbacAuthorization_v1alpha1 replaceRbacAuthorizationV1alpha1ClusterRoleBinding

replace the specified ClusterRoleBinding

*/
type ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding struct {
	Context *middleware.Context
	Handler ReplaceRbacAuthorizationV1alpha1ClusterRoleBindingHandler
}

func (o *ReplaceRbacAuthorizationV1alpha1ClusterRoleBinding) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceRbacAuthorizationV1alpha1ClusterRoleBindingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
