// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2017-2020 Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package apiregistration_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchApiregistrationV1APIServiceStatusHandlerFunc turns a function with the right signature into a patch apiregistration v1 API service status handler
type PatchApiregistrationV1APIServiceStatusHandlerFunc func(PatchApiregistrationV1APIServiceStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchApiregistrationV1APIServiceStatusHandlerFunc) Handle(params PatchApiregistrationV1APIServiceStatusParams) middleware.Responder {
	return fn(params)
}

// PatchApiregistrationV1APIServiceStatusHandler interface for that can handle valid patch apiregistration v1 API service status params
type PatchApiregistrationV1APIServiceStatusHandler interface {
	Handle(PatchApiregistrationV1APIServiceStatusParams) middleware.Responder
}

// NewPatchApiregistrationV1APIServiceStatus creates a new http.Handler for the patch apiregistration v1 API service status operation
func NewPatchApiregistrationV1APIServiceStatus(ctx *middleware.Context, handler PatchApiregistrationV1APIServiceStatusHandler) *PatchApiregistrationV1APIServiceStatus {
	return &PatchApiregistrationV1APIServiceStatus{Context: ctx, Handler: handler}
}

/*PatchApiregistrationV1APIServiceStatus swagger:route PATCH /apis/apiregistration.k8s.io/v1/apiservices/{name}/status apiregistration_v1 patchApiregistrationV1ApiServiceStatus

partially update status of the specified APIService

*/
type PatchApiregistrationV1APIServiceStatus struct {
	Context *middleware.Context
	Handler PatchApiregistrationV1APIServiceStatusHandler
}

func (o *PatchApiregistrationV1APIServiceStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchApiregistrationV1APIServiceStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
